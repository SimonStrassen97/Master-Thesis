<?xml version="1.0"?>
<doc>
  <assembly>
    <name>LMF.Tracker.Connection</name>
  </assembly>
  <members>
    <member name="T:LMF.Tracker.LMF.Tracker.Connection3509378.LmfCoreInitialization">
      <summary>
            This class is is setting the GetDataFromException, and GetDataFromErrorNumber to the LmfException.
            This method are used, when [deprecated] constructors for LmfExceptions are called.
            The methods convert the exception, and error numbers using the TrackerPilot error database to the ICoreException, which is then used in the core.LmfException.
            
            This Register method needs to be called before first using of the [deprecated] LmfException constructors.
            </summary>
    </member>
    <member name="T:LMF.Tracker.LMF.Tracker.Connection3509378.Connection">
      <summary>
            This class can make connections to a tracker at a given IP address
            </summary>
    </member>
    <member name="M:LMF.Tracker.LMF.Tracker.Connection3509378.Connection.Connect(System.String)">
      <summary>
            Establishes a connection to the given IP address or simulator.
            </summary>
      <param name="connectionString">The IP address to connect to</param>
      <returns>Returns a 'Tracker' object if successful</returns>
    </member>
    <member name="M:LMF.Tracker.LMF.Tracker.Connection3509378.Connection.IncreaseThreadPool">
      <summary>
            This function increase the minimal threads in the thread pool. The function is called on connect to allow sped-up up connection, when the more threads are needed
            </summary>
    </member>
    <member name="M:LMF.Tracker.LMF.Tracker.Connection3509378.Connection.DecreaseThreadPool">
      <summary>
            Function decrease the threads in the pool. Function is called after connect, to reset threadPool to "default" behavior.
            </summary>
    </member>
    <member name="M:LMF.Tracker.LMF.Tracker.Connection3509378.Connection.TrySuccessfulPing(System.TimeSpan,System.String,System.Net.NetworkInformation.PingReply@)">
      <summary>
            This function try to ping destination computer for timeToTryPing.
            The timeToTryPing is not timeout for ping, but the time, how long will be the ping try
            </summary>
      <param name="timeToTryPing">
      </param>
      <param name="lastPingReply">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.LMF.Tracker.Connection3509378.ISimulatorControlCOM.Connect(System.String)">
      <summary>
            Create the connection to the service, and initialize the ISimulatorController class.
            The connection string is in the form IPAddress:PortId. (e.g. 10.21.13.12:22481)
            When the port is not set, then the default port is "22480"  (e.g. 10.21.13.12) default port 22480 is used
            The service is started on the port 22480..22499, depending which port is free in the order.
            </summary>
    </member>
    <member name="T:LMF.Tracker.LMF.Tracker.Connection3509378.SimulatorControl">
      <summary>
            This class connects to a simulator controller
            </summary>
    </member>
    <member name="T:LMF.Tracker.LMF.Tracker.Connection3509378.TrackerErrors">
      <summary>
            This class returns LmfErrors to a specified errornumber
            </summary>
    </member>
    <member name="M:LMF.Tracker.LMF.Tracker.Connection3509378.TrackerErrors.GetErrorDescription(System.Int32)">
      <summary>
            Gets the official Leica error description for an error number
            </summary>
      <param name="paramErrorNumber">The number of the error</param>
      <returns>Returns an LmfError object containing all information about the error</returns>
    </member>
    <member name="T:LMF.Tracker.LMF.Tracker.Connection3509378.TrackerFinder">
      <summary>
            This class will detect all trackers within the networks the computer is connected with.
            </summary>
    </member>
    <member name="M:LMF.Tracker.LMF.Tracker.Connection3509378.TrackerFinder.Refresh">
      <summary>
            Scans the actual network configurations to find trackers
            </summary>
    </member>
    <member name="P:LMF.Tracker.LMF.Tracker.Connection3509378.TrackerFinder.Trackers">
      <summary>
            Returns a list of found trackers
            </summary>
    </member>
    <member name="T:LMF.Tracker.TrackerInfo">
      <summary>
            This class holds information about a found tracker
            </summary>
    </member>
    <member name="M:LMF.Tracker.TrackerInfo.Connect">
      <summary>
            Establishes a connection with the tracker
            </summary>
      <returns>Returns a 'Tracker' object if successful</returns>
    </member>
    <member name="P:LMF.Tracker.TrackerInfo.Name">
      <summary>
            Returns the name of the tracker
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerInfo.Comment">
      <summary>
            Returns the comment of the tracker
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerInfo.Type">
      <summary>
            Provides the official type of the tracker.
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerInfo.InternalTrackerType">
      <summary>
            Provides the internal tracker type received through the discovery. For the Wave trackers
            this type is used for the detection and connection to be independent of the changes of the
            official tracker name. For the other trackers this type represents the official type as well.
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerInfo.LmfTypeName">
      <summary>
            Returns the LMF internal type name of the tracker class
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerInfo.SerialNumber">
      <summary>
            Returns the serial number of the tracker
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerInfo.IPAddress">
      <summary>
            Returns the IP address of the tracker
            </summary>
    </member>
    <member name="T:LMF.Tracker.LMF.Tracker.Connection3509378.TrackerInfoCollection">
      <summary>
            This collection holds all found trackers
            </summary>
    </member>
    <member name="M:LMF.Tracker.LMF.Tracker.Connection3509378.TrackerInfoCollection.GetEnumerator">
      <summary>
            Returns an enumerator of TrackerInfo.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:LMF.Tracker.LMF.Tracker.Connection3509378.TrackerInfoCollection.Count">
      <summary>
            Returns the number of found trackers in the collection
            </summary>
    </member>
    <member name="P:LMF.Tracker.LMF.Tracker.Connection3509378.TrackerInfoCollection.Item(System.Int32)">
      <summary>
            Returns the found tracker at position 'index'
            </summary>
      <param name="index">The index of the list</param>
      <returns>
      </returns>
    </member>
    <member name="T:LMF.Tracker.LMF.Tracker.Connection3509378.LmfCoreInitialization">
      <summary>
            This class is is setting the GetDataFromException, and GetDataFromErrorNumber to the LmfException.
            This method are used, when [deprecated] constructors for LmfExceptions are called.
            The methods convert the exception, and error numbers using the TrackerPilot error database to the ICoreException, which is then used in the core.LmfException.
            
            This Register method needs to be called before first using of the [deprecated] LmfException constructors.
            </summary>
    </member>
    <member name="T:LMF.Tracker.LMF.Tracker.Connection3509378.Connection">
      <summary>
            This class can make connections to a tracker at a given IP address
            </summary>
    </member>
    <member name="M:LMF.Tracker.LMF.Tracker.Connection3509378.Connection.Connect(System.String)">
      <summary>
            Establishes a connection to the given IP address or simulator.
            </summary>
      <param name="connectionString">The IP address to connect to</param>
      <returns>Returns a 'Tracker' object if successful</returns>
    </member>
    <member name="M:LMF.Tracker.LMF.Tracker.Connection3509378.Connection.IncreaseThreadPool">
      <summary>
            This function increase the minimal threads in the thread pool. The function is called on connect to allow sped-up up connection, when the more threads are needed
            </summary>
    </member>
    <member name="M:LMF.Tracker.LMF.Tracker.Connection3509378.Connection.DecreaseThreadPool">
      <summary>
            Function decrease the threads in the pool. Function is called after connect, to reset threadPool to "default" behavior.
            </summary>
    </member>
    <member name="M:LMF.Tracker.LMF.Tracker.Connection3509378.Connection.TrySuccessfulPing(System.TimeSpan,System.String,System.Net.NetworkInformation.PingReply@)">
      <summary>
            This function try to ping destination computer for timeToTryPing.
            The timeToTryPing is not timeout for ping, but the time, how long will be the ping try
            </summary>
      <param name="timeToTryPing">
      </param>
      <param name="lastPingReply">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.LMF.Tracker.Connection3509378.ISimulatorControlCOM.Connect(System.String)">
      <summary>
            Create the connection to the service, and initialize the ISimulatorController class.
            The connection string is in the form IPAddress:PortId. (e.g. 10.21.13.12:22481)
            When the port is not set, then the default port is "22480"  (e.g. 10.21.13.12) default port 22480 is used
            The service is started on the port 22480..22499, depending which port is free in the order.
            </summary>
    </member>
    <member name="T:LMF.Tracker.LMF.Tracker.Connection3509378.SimulatorControl">
      <summary>
            This class connects to a simulator controller
            </summary>
    </member>
    <member name="T:LMF.Tracker.LMF.Tracker.Connection3509378.TrackerErrors">
      <summary>
            This class returns LmfErrors to a specified errornumber
            </summary>
    </member>
    <member name="M:LMF.Tracker.LMF.Tracker.Connection3509378.TrackerErrors.GetErrorDescription(System.Int32)">
      <summary>
            Gets the official Leica error description for an error number
            </summary>
      <param name="paramErrorNumber">The number of the error</param>
      <returns>Returns an LmfError object containing all information about the error</returns>
    </member>
    <member name="T:LMF.Tracker.LMF.Tracker.Connection3509378.TrackerFinder">
      <summary>
            This class will detect all trackers within the networks the computer is connected with.
            </summary>
    </member>
    <member name="M:LMF.Tracker.LMF.Tracker.Connection3509378.TrackerFinder.Refresh">
      <summary>
            Scans the actual network configurations to find trackers
            </summary>
    </member>
    <member name="P:LMF.Tracker.LMF.Tracker.Connection3509378.TrackerFinder.Trackers">
      <summary>
            Returns a list of found trackers
            </summary>
    </member>
    <member name="T:LMF.Tracker.TrackerInfo">
      <summary>
            This class holds information about a found tracker
            </summary>
    </member>
    <member name="M:LMF.Tracker.TrackerInfo.Connect">
      <summary>
            Establishes a connection with the tracker
            </summary>
      <returns>Returns a 'Tracker' object if successful</returns>
    </member>
    <member name="P:LMF.Tracker.TrackerInfo.Name">
      <summary>
            Returns the name of the tracker
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerInfo.Comment">
      <summary>
            Returns the comment of the tracker
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerInfo.Type">
      <summary>
            Provides the official type of the tracker.
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerInfo.InternalTrackerType">
      <summary>
            Provides the internal tracker type received through the discovery. For the Wave trackers
            this type is used for the detection and connection to be independent of the changes of the
            official tracker name. For the other trackers this type represents the official type as well.
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerInfo.LmfTypeName">
      <summary>
            Returns the LMF internal type name of the tracker class
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerInfo.SerialNumber">
      <summary>
            Returns the serial number of the tracker
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerInfo.IPAddress">
      <summary>
            Returns the IP address of the tracker
            </summary>
    </member>
    <member name="T:LMF.Tracker.LMF.Tracker.Connection3509378.TrackerInfoCollection">
      <summary>
            This collection holds all found trackers
            </summary>
    </member>
    <member name="M:LMF.Tracker.LMF.Tracker.Connection3509378.TrackerInfoCollection.GetEnumerator">
      <summary>
            Returns an enumerator of TrackerInfo.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:LMF.Tracker.LMF.Tracker.Connection3509378.TrackerInfoCollection.Count">
      <summary>
            Returns the number of found trackers in the collection
            </summary>
    </member>
    <member name="P:LMF.Tracker.LMF.Tracker.Connection3509378.TrackerInfoCollection.Item(System.Int32)">
      <summary>
            Returns the found tracker at position 'index'
            </summary>
      <param name="index">The index of the list</param>
      <returns>
      </returns>
    </member>
    <member name="T:XamlGeneratedNamespace.LMF.Tracker3509514.GeneratedInternalTypeHelper">
      <summary>
            GeneratedInternalTypeHelper
            </summary>
    </member>
    <member name="M:XamlGeneratedNamespace.LMF.Tracker3509514.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
      <summary>
            CreateInstance
            </summary>
    </member>
    <member name="M:XamlGeneratedNamespace.LMF.Tracker3509514.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
      <summary>
            GetPropertyValue
            </summary>
    </member>
    <member name="M:XamlGeneratedNamespace.LMF.Tracker3509514.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
      <summary>
            SetPropertyValue
            </summary>
    </member>
    <member name="M:XamlGeneratedNamespace.LMF.Tracker3509514.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
      <summary>
            CreateDelegate
            </summary>
    </member>
    <member name="M:XamlGeneratedNamespace.LMF.Tracker3509514.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
      <summary>
            AddEventHandler
            </summary>
    </member>
    <member name="T:LMF.Tracker.ConnectBox">
      <summary>
            This class holds all information about the connect box device if there is one connected to the tracker. Only available for the AT960 Trackers
            </summary>
    </member>
    <member name="M:LMF.Tracker.ConnectBox.#ctor">
      <summary>
      </summary>
    </member>
    <member name="P:LMF.Tracker.ConnectBox.IsConnected">
      <summary>
            Returns if the connect box is connected
            </summary>
    </member>
    <member name="P:LMF.Tracker.ConnectBox.Name">
      <summary>
            Returns the name of the connected connect box
            </summary>
    </member>
    <member name="P:LMF.Tracker.ConnectBox.IPAddress">
      <summary>
            Returns the ip address of the connected connect box
            </summary>
    </member>
    <member name="P:LMF.Tracker.ConnectBox.SerialNumber">
      <summary>
            Returns the serial number of the connected connect box
            </summary>
    </member>
    <member name="P:LMF.Tracker.ConnectBox.InstalledFirmware">
      <summary>
            Returns the installed firmware version of the connected connect box
            </summary>
    </member>
    <member name="M:LMF.Tracker.LaserHelper.ConvertToDayOfWeekNullable(LMF.Tracker.EOccurence)">
      <summary>
            Convert to DayOfWeek. If the conversion is not possible (or not supported) return null.
            </summary>
      <param name="occurence">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.LaserHelper.GetWeekDifference(System.DateTime,System.DayOfWeek,System.TimeSpan)">
      <summary>
            Get the difference from now to the target DayOfWeek.
            E.g. When now is 06.11_10:01 (tuesday) and the target is 07.11_10:02 (wednesday) =&gt; the result is 1d 0h 1min
            When now is 06.11_10:01 (tuesday) and the target is 05.11_10:02 (monday) =&gt; the result is 5d 23h 59min.
              The monday was already (today is tuesday =&gt; to the next monday is it 5d,..)
            </summary>
      <param name="localDateTimeNow">The current DateTime</param>
      <param name="targetDayOfWeek"> The DayOfTheWeek.</param>
      <param name="targetLocalMidnightOffset">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.LaserHelper.GetWeekDifferenceNullable(System.DateTime,System.Nullable{System.DayOfWeek},System.TimeSpan)">
      <summary>
      </summary>
      <param name="localDateTimeNow">The current DateTime</param>
      <param name="targetDayOfWeekNullable"> The DayOfTheWeek. If the value is null, the calculation is not evaluated, and null is returned</param>
      <param name="targetLocalMidnightOffset">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.LaserHelper.FillDaylightTimes(System.Collections.Generic.ICollection{System.Globalization.DaylightTime})">
      <summary>
            Fill the daylightTimes collection with the DaylightTimes
            </summary>
      <param name="daylightTimes">The collection, which will be changed.</param>
    </member>
    <member name="P:LMF.Tracker.ILaserScheduler.DaylightTimes">
      <summary>
            Get the list of DaylightTime
            </summary>
    </member>
    <member name="P:LMF.Tracker.LaserScheduledTask.Occurence">
      <summary>
            Definition when the action takes place
            </summary>
    </member>
    <member name="P:LMF.Tracker.LaserScheduledTask.MidnightOffset">
      <summary>
            UTC Offset to midnight that should trigger the action
            </summary>
    </member>
    <member name="P:LMF.Tracker.LaserScheduledTask.ExpireDate">
      <summary>
            UTC Date when this setting will be turned inactive
            </summary>
    </member>
    <member name="T:LMF.Tracker.AT403Tracker">
      <summary>
            This is the class for all AT403 trackers
            </summary>
    </member>
    <member name="T:LMF.Tracker.ATS600Tracker">
      <summary>
            This is the class for the ATS600 tracker
            </summary>
    </member>
    <member name="M:LMF.Tracker.ATS600Tracker.Restart">
      <summary>
            Restarts system and disconnects lmf afterwards. Returns after it is reachable and ready for a new connection or two minutes at the latest if the ip address changed or no connection is possible.
            The last situation throws an error and requires manual inspection.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Laser">
      <summary>
            This class holds all information about the laser of the tracker. Only available for AT9x0 and AT901 Trackers.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Laser.#ctor">
      <summary>
      </summary>
    </member>
    <member name="M:LMF.Tracker.Laser.GoToSleep(System.DateTime)">
      <summary>
            Switches the laser off until the given DateTime is reached, this is only provided by AT9x0 Tracker
            </summary>
      <param name="paramWakeUpTime">The date and time on which the laser is switched on again</param>
    </member>
    <member name="M:LMF.Tracker.Laser.GetWakeUpTime">
      <summary>
            Get the current laser Wake-up Time.
            For the tracker up ATS600 was function replaced with function GetScheduler()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:LMF.Tracker.Laser.IsOn">
      <summary>
            Returns if the laser if switched on or off, this is only provided by AT9x0 Tracker
            </summary>
    </member>
    <member name="P:LMF.Tracker.Laser.WakeUpTime">
      <summary>
            Returns the local date and time when the laser will be switched on again after a 'GoToSleep' command
            </summary>
    </member>
    <member name="P:LMF.Tracker.Laser.IsLaserWarmedUp">
      <summary>
            Returns if the laser is warmed up and stable
            </summary>
    </member>
    <member name="T:LMF.Tracker.PowerLock">
      <summary>
            This class is used to control the powerlock 
            </summary>
    </member>
    <member name="M:LMF.Tracker.PowerLock.GetTargetDirections">
      <summary>
            Returns all coordinates of visible targets.
            </summary>
      <returns>Coordinates of visible targets as <see cref="T:LMF.Tracker.OVC.ATRCoordinateCollection" />.</returns>
    </member>
    <member name="P:LMF.Tracker.PowerLock.UsePowerLock">
      <summary>
            Handles the usage of power lock.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Direction">
      <summary>
            This class describes a direction
            </summary>
    </member>
    <member name="P:LMF.Tracker.Direction.TimeStamp">
      <summary>
            Gets the date of the creation.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Direction.HorizontalAngle">
      <summary>
            Gets the horizontal angle direction of the tracker.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Direction.VerticalAngle">
      <summary>
            Gets the vertical angle direction of the tracker.
            </summary>
    </member>
    <member name="T:LMF.Tracker.PowerSource">
      <summary>
            This class summarizes all information about powered devices
            </summary>
    </member>
    <member name="P:LMF.Tracker.PowerSource.ControllerPowerStatus">
      <summary>
            Gets the power status object of the controller device
            </summary>
    </member>
    <member name="P:LMF.Tracker.PowerSource.SensorPowerStatus">
      <summary>
            Gets the power status object of the sensor device, only available on AT40x tracker
            </summary>
    </member>
    <member name="T:LMF.Tracker.AlignmentWithScale">
      <summary>
            Computed 7 paramerter alignment, used for transformation
            </summary>
    </member>
    <member name="M:LMF.Tracker.AlignmentWithScale.#ctor">
      <summary>
            Initializes a new instance of AlignmentWithScale
            </summary>
    </member>
    <member name="M:LMF.Tracker.AlignmentWithScale.#ctor(LMF.Tracker.Settings)">
      <summary>
            Initializes a new instance of AlignmentWithScale
            </summary>
      <param name="paramSettings">the settings to use</param>
    </member>
    <member name="P:LMF.Tracker.AlignmentWithScale.Scale">
      <summary>
            The scale of the alignment
            </summary>
    </member>
    <member name="T:LMF.Tracker.AT401Tracker">
      <summary>
            This is the class for all AT401 trackers
            </summary>
    </member>
    <member name="T:LMF.Tracker.Face">
      <summary>
            The Face class is used to control the tracker face.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Face.ChangeFinishedHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.Face.ChangeFinished" /> event.
            </summary>
      <param name="sender">The sender object</param>
      <param name="paramNewValue">The new value</param>
      <param name="ex">An exception if something went wrong</param>
    </member>
    <member name="T:LMF.Tracker.Face.ChangedHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.Face.Changed" /> event.
            </summary>
      <param name="sender">The sender object</param>
      <param name="paramNewValue">The new value</param>
    </member>
    <member name="M:LMF.Tracker.Face.Change">
      <summary>
            Changes the face by turning the tracker head by 180° degree on the horizontal and vertical axis.
            </summary>
      <returns>The face the tracker head is in when the turning is complete.</returns>
    </member>
    <member name="M:LMF.Tracker.Face.ChangeAsync">
      <summary>
            Asynchronously changes the face by turning the tracker head by 180° degree on the horizontal and vertical axis.
            Register to the <see cref="E:LMF.Tracker.Face.ChangeFinished" /> event to get notified when the tracker head has turned to the other face.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Face.Value">
      <summary>
            Get the actual face the tracker head is in
            </summary>
    </member>
    <member name="P:LMF.Tracker.Face.IsFace1">
      <summary>
            Returns true if the tracker head is in the first face.
            </summary>
    </member>
    <member name="E:LMF.Tracker.Face.Changed">
      <summary>
            Occurs when the tracker head changes from one face to another either programmaticaly or manually.
            </summary>
    </member>
    <member name="E:LMF.Tracker.Face.ChangeFinished">
      <summary>
            Gets fired after a <see cref="M:LMF.Tracker.Face.Change" />/<see cref="M:LMF.Tracker.Face.ChangeAsync" /> command when the tracker head has reached its new position.
            </summary>
    </member>
    <member name="T:LMF.Tracker.AT402Tracker">
      <summary>
            This is the class for all AT402 trackers
            </summary>
    </member>
    <member name="T:LMF.Tracker.AT930Tracker">
      <summary>
            This is the class for the AT930 tracker
            </summary>
    </member>
    <member name="T:LMF.Tracker.AT960Tracker">
      <summary>
            This is the class for the AT960 tracker
            </summary>
    </member>
    <member name="T:LMF.Tracker.AT9x0Tracker">
      <summary>
            This is the base class for all AT9x0 product family trackers
            </summary>
    </member>
    <member name="M:LMF.Tracker.AT9x0Tracker.Restart">
      <summary>
            Restarts system and disconnects lmf afterwards. Returns after it is reachable and ready for a new connection or two minutes at the latest if the ip address changed or no connection is possible.
            The last situation throws an error and requires manual inspection.
            </summary>
    </member>
    <member name="T:LMF.Tracker.AT40xTracker">
      <summary>
            This is the base class for all AT40x product family trackers
            </summary>
    </member>
    <member name="M:LMF.Tracker.AT40xTracker.GotoStandBy(System.DateTime)">
      <summary>
            Tracker goes to stand by until wake up time is reached, connection is lost 
            </summary>
      <param name="wakeupTimeStamp">Defines the time to </param>
    </member>
    <member name="T:LMF.Tracker.PowerStatus">
      <summary>
            This class describes the power status of a certain device
            </summary>
    </member>
    <member name="P:LMF.Tracker.PowerStatus.RunsOn">
      <summary>
            Gets the object which describes by which way the device is powered from
            </summary>
    </member>
    <member name="P:LMF.Tracker.PowerStatus.Level">
      <summary>
            Gets the object which describes the amount of load a power source has left
            </summary>
    </member>
    <member name="T:LMF.Tracker.Settings">
      <summary>
            The Settings class stores all settings used by the Tracker.
            It can be used to change the active Unit and Coordinate settings of the Tracker.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Settings.#ctor">
      <summary>
            Instantiates a new Settings object that can be used to convert measurements.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Settings.GetTransformation">
      <summary>
            Gets the currently active transformation
            </summary>
      <returns>Returns the active transformation. Returns null if no transformation is set</returns>
    </member>
    <member name="M:LMF.Tracker.Settings.SetTransformation(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Set the Transformation. This transformation will be applied to all continuous and stationary measurement results.
            </summary>
      <param name="paramTranslation1">translation 1 in user unit</param>
      <param name="paramTranslation2">translation 2 in user unit</param>
      <param name="paramTranslation3">translation 3 in user unit</param>
      <param name="paramRotation0">rotation 0 in user unit. Rotation0 is only used for quaternion representation</param>
      <param name="paramRotation1">rotation 1 in user unit</param>
      <param name="paramRotation2">rotation 2 in user unit</param>
      <param name="paramRotation3">rotation 3 in user unit</param>
      <param name="paramScale">scale, default value [1]</param>
    </member>
    <member name="M:LMF.Tracker.Settings.SetCalculatedTransformation(LMF.Tracker.TrackerAlignments.AlignmentTransformationResult)">
      <summary>
            Sets the transformation from a calculated result from the TrackerAlignment object CalculateTransformation method.
            </summary>
      <param name="paramTransformation">the computed transformation</param>
    </member>
    <member name="M:LMF.Tracker.Settings.GetOrientation">
      <summary>
            Gets the currently active orientation
            </summary>
      <returns>Returns the active orientation. Returns null if no orientation is set</returns>
    </member>
    <member name="M:LMF.Tracker.Settings.SetOrientation(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Set the Orientation. This orientation will be applied to all continuous and stationary measurement results.
            </summary>
      <param name="paramTranslation1">translation 1 in user unit</param>
      <param name="paramTranslation2">translation 2 in user unit</param>
      <param name="paramTranslation3">translation 3 in user unit</param>
      <param name="paramRotation0">rotation 0 in user unit</param>
      <param name="paramRotation1">rotation 1 in user unit</param>
      <param name="paramRotation2">rotation 2 in user unit</param>
      <param name="paramRotation3">rotation 3 in user unit</param>
    </member>
    <member name="M:LMF.Tracker.Settings.SetCalculatedOrientation(LMF.Tracker.TrackerAlignments.AlignmentOrientationResult)">
      <summary>
            Sets the orientation from an already calculated result from the TrackerAlignment object CalculateOrientation method.
            </summary>
      <param name="paramOrientation">the computed orientation</param>
    </member>
    <member name="P:LMF.Tracker.Settings.Units">
      <summary>
            Returns the units object, containing the currently active units
            </summary>
    </member>
    <member name="P:LMF.Tracker.Settings.CoordinateType">
      <summary>
            Get or set the active coordinate type. All measurements and commands will use this coordinate type.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Settings.RotationType">
      <summary>
            Get or set the active rotation type. All measurements and commands will use this rotation type.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Status">
      <summary>
            Class of TrackerHierarchyObject which shows different status.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Status.HasBeenInitializedSinceWarmUp">
      <summary>
            It is a <see cref="T:LMF.Tracker.BasicTypes.BoolValue.ReadOnlyBoolValue" /> which identify if the tracker is initialized since it's warmed up.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Status.IsWarmedUp">
      <summary>
            Is the tracker warmed up already. Not implemented for At901Tracker
            </summary>
    </member>
    <member name="P:LMF.Tracker.Status.WarmUpState">
      <summary>
            Returns the warm up state of AT40x Tracker
            </summary>
    </member>
    <member name="T:LMF.Tracker.Tracker">
      <summary>
            This is the base class for all tracker objects
            </summary>
    </member>
    <member name="T:LMF.Tracker.Tracker.InformationArrivedHandler">
      <summary>
            Event handler to receive informations
            </summary>
      <param name="sender">
      </param>
      <param name="paramInfo">
      </param>
    </member>
    <member name="T:LMF.Tracker.Tracker.WarningArrivedHandler">
      <summary>
            Event handler to receive warnings
            </summary>
      <param name="sender">
      </param>
      <param name="warning">
      </param>
    </member>
    <member name="T:LMF.Tracker.Tracker.ErrorArrivedHandler">
      <summary>
            Event handler to receive errors
            </summary>
      <param name="sender">
      </param>
      <param name="error">
      </param>
    </member>
    <member name="T:LMF.Tracker.Tracker.InitializeFinishedHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.Tracker.InitializeFinished" /> event
            </summary>
      <param name="sender">Initialized tracker</param>
      <param name="ex">Exception if something went wrong</param>
    </member>
    <member name="T:LMF.Tracker.Tracker.GetPrismPositionFinishedHandler">
      <summary>
            Delegate for handling measured prism positions
            </summary>
      <param name="sender">The "Tracker" object on which the method was called</param>
      <param name="paramMeasurement">The measured prism position</param>
      <param name="ex">An exception in case of an error, otherwise null</param>
    </member>
    <member name="T:LMF.Tracker.Tracker.GetDirectionFinishedHandler">
      <summary>
            Delegate for handling a direction measurement
            </summary>
      <param name="sender">The "Tracker" object on which the method was called</param>
      <param name="bm">The measured position</param>
      <param name="ex">An exception in case of an error, otherwise null</param>
    </member>
    <member name="T:LMF.Tracker.Tracker.GoHomePositionFinishedHandler">
      <summary>
            Delegate for handling that the home position has been reached
            </summary>
      <param name="sender">The "Tracker" object on which the method was called</param>
      <param name="ex">An exception in case of an error, otherwise null</param>
    </member>
    <member name="T:LMF.Tracker.Tracker.PositionToFinishedHandler">
      <summary>
            Delegate for handling that the tracker has reached the wanted position
            </summary>
      <param name="sender">The "Tracker" object on which the method was called</param>
      <param name="foundTarget">The found target, otherwise null</param>
      <param name="ex">An exception in case of an error, otherwise null</param>
    </member>
    <member name="T:LMF.Tracker.Tracker.DisconnectedHandler">
      <summary>
            Delegate for handling that the connection to the tracker has disconnected
            </summary>
      <param name="sender">The "Tracker" object on which the method was called</param>
      <param name="ex">An exception in case of an error, otherwise null</param>
    </member>
    <member name="M:LMF.Tracker.Tracker.Initialize">
      <summary>
                Initializes the Tracker.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Tracker.InitializeAsync">
      <summary>
                Initializes the Tracker asynchronously.
                The InitializeFinished Event is raised when finished.
                <see cref="E:LMF.Tracker.Tracker.InitializeFinished" /></summary>
    </member>
    <member name="M:LMF.Tracker.Tracker.GetPrismPosition">
      <summary>
            Returns a measurement object containing the position of the prism
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.Tracker.GetPrismPositionAsync">
      <summary>
            Asynchronousely measures the position of the prism
            </summary>
    </member>
    <member name="M:LMF.Tracker.Tracker.GetDirection">
      <summary>
            Returns the direction (horizontal and vertical angle) of the actual laser position
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.Tracker.GetDirectionAsync">
      <summary>
            Asynchronousely gets the direction (horizontal and vertical angle) of the actual laser position
            </summary>
    </member>
    <member name="M:LMF.Tracker.Tracker.GoHomePosition">
      <summary>
            Positions the tracker into the "home position"
            </summary>
    </member>
    <member name="M:LMF.Tracker.Tracker.GoHomePositionAsync">
      <summary>
            Asynchronousely positions the tracker into the "home position"
            </summary>
    </member>
    <member name="M:LMF.Tracker.Tracker.PositionTo(System.Boolean,System.Boolean,System.Double,System.Double,System.Double)">
      <summary>
            Positions the tracker to the wanted position.
            </summary>
      <param name="searchTarget">if true, tries to find a target after the specified position has been reached</param>
      <param name="isrelative">if true, the specified position is interpreted as relative to the actual position.
            ATTENTION: If isrelative is 'true', the specified position must be in the spherical coordinate system
            Set coordinate type <see cref="F:LMF.Units.ECoordinateType.Spherical" /> on the "CoordinateType" property on the
            <see cref="P:LMF.Tracker.Tracker.Settings" /> class object
            </param>
      <param name="pos1">the 1st component of the specified position in the actual set customer coordinate system</param>
      <param name="pos2">the 2nd component of the specified position in the actual set customer coordinate system</param>
      <param name="pos3">the 3rd component of the specified position in the actual set customer coordinate system</param>
      <returns>Returns the target if a target has been found at the specified position, null otherwise</returns>
    </member>
    <member name="M:LMF.Tracker.Tracker.PositionToAsync(System.Boolean,System.Boolean,System.Double,System.Double,System.Double)">
      <summary>
            Asynchronousely positions the tracker to the wanted position
            </summary>
      <param name="searchTarget">if true, tries to find a target after the specified position has been reached</param>
      <param name="isrelative">if true, the specified position is interpreted as relative to the actual position</param>
      <param name="pos1">the 1st component of the specified position in the actual set customer coordinate system</param>
      <param name="pos2">the 2nd component of the specified position in the actual set customer coordinate system</param>
      <param name="pos3">the 3rd component of the specified position in the actual set customer coordinate system</param>
    </member>
    <member name="M:LMF.Tracker.Tracker.PositionToTarget(LMF.Tracker.Targets.LockOnToken,System.Boolean,System.Double,System.Double,System.Double)">
      <summary>
            Optimized version to position the tracker to the wanted position and target.
            The optimization is available for the AT9x0 series. For the AT90x and AT40x series the command is also available but is
            not optimized for speed. In that case the given target or probe face is ignored.
            It needs a lockOnToken that denotes a target or a face of a probe to lock on. Using this lockOnToken the tracker directly
            tries to lock on to this target or face instead of detecting it. This saves the detection time.
            The lockOnToken can be received by calling GetLockOnToken either on a target or a probe face.
            In case the lockOnToken is invalid the positioning fails. In case the lockOnToken denotes a different
            target or face from the one that resides at the given position the tracker starts the detection procedure
            and returns the one that is detected at this position. This slows the command down.
            The same holds for the case no lockOnToken is provided (null): The command does the full target detection
            without any hint and is slowed down. There is no way to prevent the command from doing a target search.
            The command sets the preselected target to the one given with the lockOnToken if it is a reflector.
            In case the given coordinates are not precise enough the command slows down or fails.
            The command is useful for automation cases where several targets with a given position have to be reached as fast as possible.
            To be able to reach the target the user has to provide a complete set of coordinates. They may either be absolute or relative.
            The relative ones are only allowed using the spherical coordinate system (HVD). Otherwise the command fails.
            </summary>
      <param name="lockOnToken">The LockOnToken of the target to be found at the given position</param>
      <param name="isRelative">if true, the specified position is interpreted as relative to the actual position.
            ATTENTION: If isRelative is 'true', the specified position must be in the spherical coordinate system
            Set coordinate type <see cref="F:LMF.Units.ECoordinateType.Spherical" /> on the "CoordinateType" property on the
            <see cref="P:LMF.Tracker.Tracker.Settings" /> class object
            </param>
      <param name="pos1">the 1st component of the specified position in the actual set customer coordinate system</param>
      <param name="pos2">the 2nd component of the specified position in the actual set customer coordinate system</param>
      <param name="pos3">the 3rd component of the specified position in the actual set customer coordinate system</param>
      <returns>Returns the target if a target has been found at the specified position, null otherwise. In case
            no lockOnToken is provided (parameter is null) the method does the standard target search with no speed optimizations.</returns>
    </member>
    <member name="M:LMF.Tracker.Tracker.PositionToTargetAsync(LMF.Tracker.Targets.LockOnToken,System.Boolean,System.Double,System.Double,System.Double)">
      <summary>
            Asynchronous version of the PositionToTarget command
            </summary>
      <param name="lockOnToken">The LockOnToken of the target to be found at the given position</param>
      <param name="isRelative">if true, the specified position is interpreted as relative to the actual position</param>
      <param name="pos1">the 1st component of the specified position in the actual set customer coordinate system</param>
      <param name="pos2">the 2nd component of the specified position in the actual set customer coordinate system</param>
      <param name="pos3">the 3rd component of the specified position in the actual set customer coordinate system</param>
    </member>
    <member name="M:LMF.Tracker.Tracker.Move(System.Int32,System.Int32)">
      <summary>
            Starts moving the tracker head with the specified speed
            </summary>
      <param name="percentageSpeedH">percentage of max possible moving speed in horizontal direction</param>
      <param name="percentageSpeedV">percentage of max possible moving speed in vertical direction</param>
    </member>
    <member name="M:LMF.Tracker.Tracker.StopMove">
      <summary>
            Stops the tracker head movement
            </summary>
    </member>
    <member name="M:LMF.Tracker.Tracker.Disconnect">
      <summary>
            Disconnects the Tracker.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Tracker.ShutDown">
      <summary>
            Shuts down the tracker and the controller.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Tracker.GenerateLFile">
      <summary>
            Generates an LFile for support purposes
            </summary>
      <returns>Returns the path of the generated LFile</returns>
    </member>
    <member name="M:LMF.Tracker.Tracker.GetErrorDescription(System.Int32)">
      <summary>
            Gets the official Leica error description for an error number
            </summary>
      <param name="paramErrorNumber">The number of the error</param>
      <returns>Returns an LmfError object containing all information about the error</returns>
    </member>
    <member name="P:LMF.Tracker.Tracker.Settings">
      <summary>
            Returns the Settings object which handles customer unit settings, coordinate systems and rotation systems
            </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.PowerSource">
      <summary>
            Returns the PowerSource object which handles information about the power source
            </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.MeteoStation">
      <summary>
            Returns the MeteoStation object which handles humidity,pressure and temperature as well as external sensors
            </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.Measurement">
      <summary>
            Returns the MeasurementSettings object which handles measurement profiles, status and measurements
            </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.OverviewCamera">
      <summary>
            Returns the OverviewCamera object which handles all camera relevant functions
            </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.TargetSearch">
      <summary>
            Returns the TargetSearch object which configures the way a target is searched
            </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.Targets">
      <summary>
            Returns the collection of all available targets on the system
            </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.Triggers">
      <summary>
            Returns the collection of all supported triggers on the system
            </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.Compensations">
      <summary>
            Returns the collection of all available compensations for the system
            </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.Face">
      <summary>
            Returns the Face object which holds information about the actual face
            </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.InclinationSensor">
      <summary>
            Returns the InclinationSensor object which handles all inclination relevant functions
            </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.PowerLock">
      <summary>
            Returns the PowerLock object which handles power lock functionality
            </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.ExpectedFirmware">
      <summary>
             Returns the expected firmware of the tracker
            
             For this version of LMF it will expect the following firmwares
             to be installed depending on the tracker type:
            
                 AT 901  -&gt; Version 3.8.
                 AT 40x  -&gt; Version 2.4.
                 AT 9x0  -&gt; Version 2.1.
                 ATS 600 -&gt; Version 1.1.
             </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.Name">
      <summary>
            Returns the name of the tracker
            </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.ProductName">
      <summary>
            Returns the product name of the tracker
            </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.Laser">
      <summary>
            Returns the Laser object which handles laser functionality
            </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.QuickRelease">
      <summary>
            Returns true if the QuickRelease is Closed
            </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.TrackerAlignment">
      <summary>
            Returns the TrackerAlignment object which can be used to calculate orientation and transfirmation alignments
            </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.Comment">
      <summary>
            Returns the comment of the tracker
            </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.SerialNumber">
      <summary>
            Returns the serial number of the tracker
            </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.IPAddress">
      <summary>
            Returns the IP address of the tracker
            </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.InstalledFirmware">
      <summary>
            Returns the version of the installed firmware
            </summary>
    </member>
    <member name="P:LMF.Tracker.Tracker.IsCompatibleWithInstalledFirmware">
      <summary>
            Returns true if this version of LMF if compatible with the firmware found on the tracker
            </summary>
    </member>
    <member name="E:LMF.Tracker.Tracker.InformationArrived">
      <summary>
            This event is fired when an information arrived
            </summary>
    </member>
    <member name="E:LMF.Tracker.Tracker.WarningArrived">
      <summary>
            This event is fired when a warning arrived
            </summary>
    </member>
    <member name="E:LMF.Tracker.Tracker.ErrorArrived">
      <summary>
            This event is fired when an error arrived
            </summary>
    </member>
    <member name="E:LMF.Tracker.Tracker.InitializeFinished">
      <summary>
            This event is fired when the initialize procedure is finished
            </summary>
    </member>
    <member name="E:LMF.Tracker.Tracker.GetPrismPositionFinished">
      <summary>
            This event is fired when the prism position has beend measured
            </summary>
    </member>
    <member name="E:LMF.Tracker.Tracker.GetDirectionFinished">
      <summary>
            This event is fired when GetDirection procedure is finished
            </summary>
    </member>
    <member name="E:LMF.Tracker.Tracker.GoHomePositionFinished">
      <summary>
            This event gets fired when the home position has been reached
            </summary>
    </member>
    <member name="E:LMF.Tracker.Tracker.PositionToFinished">
      <summary>
            This event is fired if the specified position has been reached
            </summary>
    </member>
    <member name="E:LMF.Tracker.Tracker.PositionToTargetFinished">
      <summary>
            This event is fired if the specified position has been reached.
            </summary>
    </member>
    <member name="E:LMF.Tracker.Tracker.TrackerConnected">
      <summary>
            Event to raise warnings and other connection relevant things.
            Idea is to only raise warnings when lmf is fully connected and errors are not swallowed up.
            </summary>
    </member>
    <member name="E:LMF.Tracker.Tracker.Disconnected">
      <summary>
            This event is fired when the tracker has been disconnected
            </summary>
    </member>
    <member name="T:LMF.Tracker.Alignment">
      <summary>
            Computed 6 parameter alignment, used for orientation
            </summary>
    </member>
    <member name="M:LMF.Tracker.Alignment.#ctor">
      <summary>
            Initializes a new instance of Alignment
            </summary>
    </member>
    <member name="P:LMF.Tracker.Alignment.CoordinateType">
      <summary>
            The coordinate type
            </summary>
    </member>
    <member name="P:LMF.Tracker.Alignment.Translation1">
      <summary>
            The translation 1 of the alignment
            </summary>
    </member>
    <member name="P:LMF.Tracker.Alignment.Translation2">
      <summary>
            The translation 2 of the alignment
            </summary>
    </member>
    <member name="P:LMF.Tracker.Alignment.Translation3">
      <summary>
            The translation 3 of the alignment
            </summary>
    </member>
    <member name="P:LMF.Tracker.Alignment.RotationType">
      <summary>
            The rotation angle type of the alignment
            </summary>
    </member>
    <member name="P:LMF.Tracker.Alignment.Rotation0">
      <summary>
            The rotation 0 of the alignment
            </summary>
    </member>
    <member name="P:LMF.Tracker.Alignment.Rotation1">
      <summary>
            The rotation 1 of the alignment
            </summary>
    </member>
    <member name="P:LMF.Tracker.Alignment.Rotation2">
      <summary>
            The rotation 2 of the alignment
            </summary>
    </member>
    <member name="P:LMF.Tracker.Alignment.Rotation3">
      <summary>
            The rotation 3 of the alignment
            </summary>
    </member>
    <member name="T:LMF.Tracker.AT901Tracker">
      <summary>
            This is the class for all AT901 trackers
            </summary>
    </member>
    <member name="T:LMF.Tracker.AT901Tracker.GoBirdBathFinishedHandler">
      <summary>
            Delegate for handling that the bird bath has been reached
            </summary>
      <param name="sender">The "Tracker" object on which the method was called</param>
      <param name="ex">An exception in case of an error, otherwise null</param>
    </member>
    <member name="M:LMF.Tracker.AT901Tracker.GoBirdBath">
      <summary>
            Positions the tracker into the "bird bath"
            </summary>
    </member>
    <member name="M:LMF.Tracker.AT901Tracker.GoBirdBathAsync">
      <summary>
            Asynchronousely positions the tracker into the "bird bath"
            </summary>
    </member>
    <member name="E:LMF.Tracker.AT901Tracker.GoBirdBathFinished">
      <summary>
            This event gets fired when the bird bath has been reached
            </summary>
    </member>
    <member name="T:LMF.Tracker.Triggers.ProbeButtonTrigger">
      <summary>
            Triggerclass which can be used to work with the ProbeButton events.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Triggers.RemoteControlTrigger">
      <summary>
            Triggerclass which can be used to work with AT40x Tracker and the remote control
            </summary>
    </member>
    <member name="T:LMF.Tracker.Triggers.StableProbingTrigger">
      <summary>
            Triggerclass which can be used to work with StableProbing
            </summary>
    </member>
    <member name="P:LMF.Tracker.Triggers.StableProbingTrigger.TriggerTime">
      <summary>
            Defines the time which is needed to trigger the event
            </summary>
    </member>
    <member name="P:LMF.Tracker.Triggers.StableProbingTrigger.TriggerRegion">
      <summary>
            Defines the region which is needed to trigger the event
            </summary>
    </member>
    <member name="T:LMF.Tracker.Triggers.Trigger">
      <summary>
            Base class for triggers
            </summary>
    </member>
    <member name="P:LMF.Tracker.Triggers.Trigger.IsEnabled">
      <summary>
            Gets the <see cref="T:LMF.Tracker.BasicTypes.BoolValue.BoolValue" /> which says if the trigger is enabled.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Triggers.Trigger.Name">
      <summary>
            Gets the name of the trigger.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Triggers.TriggerCollection">
      <summary>
            Collection of Triggers, contains multiple Triggers that can happen while working with the Tracker, for example Probe Button presses or Stable Probing events.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Triggers.TriggerCollection.TriggerHappenedHandler">
      <summary>
            EventHandler delegate for the <see cref="E:LMF.Tracker.Triggers.TriggerCollection.TriggerHappened" /> event.
            </summary>
      <param name="paramTrigger">Sender collection</param>
      <param name="data">Additional information about the trigger</param>
    </member>
    <member name="E:LMF.Tracker.Triggers.TriggerCollection.TriggerHappened">
      <summary>
            Occurs when a Trigger in this collection has happened.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Triggers.TriggerEventData">
      <summary>
            This class represents the data of the triggerclasses with buttons
            </summary>
    </member>
    <member name="P:LMF.Tracker.Triggers.TriggerEventData.Button">
      <summary>
            Gets the pressed button of the trigger.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Triggers.TriggerEventData.Action">
      <summary>
            Gets the action of the desired trigger.
            </summary>
    </member>
    <member name="T:LMF.Tracker.TrackerAlignments.AlignmentInput">
      <summary>
            A class which holds the input for the alignment
            </summary>
    </member>
    <member name="M:LMF.Tracker.TrackerAlignments.AlignmentInput.#ctor">
      <summary>
            Initializes a new instance of the AlignmentInput class, 
            sets cartesian coordinates, rotation angles and length unit [m] and angle unit [rad]
            </summary>
    </member>
    <member name="M:LMF.Tracker.TrackerAlignments.AlignmentInput.SetTranslationX(System.Double,System.Double)">
      <summary>
            Sets a constraint on Translation X. If this parameter is unknown it does not need to be set explicitly
            </summary>
      <param name="ValueInBaseUnits">the value in base unit [m]</param>
      <param name="AccuracyInBaseUnits">the accuracy, use [FixedAccuracy, ApproximateAccuracy]</param>
    </member>
    <member name="M:LMF.Tracker.TrackerAlignments.AlignmentInput.SetTranslationY(System.Double,System.Double)">
      <summary>
            Sets a constraint on Translation Y. If this parameter is unknown it does not need to be set explicitly
            </summary>
      <param name="ValueInBaseUnits">the value in base unit [m]</param>
      <param name="AccuracyInBaseUnits">the accuracy, use [FixedAccuracy, ApproximateAccuracy]</param>
    </member>
    <member name="M:LMF.Tracker.TrackerAlignments.AlignmentInput.SetTranslationZ(System.Double,System.Double)">
      <summary>
            Sets a constraint on Translation Z. If this parameter is unknown it does not need to be set explicitly
            </summary>
      <param name="ValueInBaseUnits">the value in base unit [m]</param>
      <param name="AccuracyInBaseUnits">the accuracy, use [FixedAccuracy, ApproximateAccuracy]</param>
    </member>
    <member name="M:LMF.Tracker.TrackerAlignments.AlignmentInput.SetRotationX(System.Double,System.Double)">
      <summary>
            Sets a constraint on Rotation X. If this parameter is unknown it does not need to be set explicitly
            </summary>
      <param name="ValueInBaseUnits">the value in base unit [m]</param>
      <param name="AccuracyInBaseUnits">the accuracy, use [FixedAccuracy, ApproximateAccuracy]</param>
    </member>
    <member name="M:LMF.Tracker.TrackerAlignments.AlignmentInput.SetRotationY(System.Double,System.Double)">
      <summary>
            Sets a constraint on Rotation Y. If this parameter is unknown it does not need to be set explicitly
            </summary>
      <param name="ValueInBaseUnits">the value in base unit [m]</param>
      <param name="AccuracyInBaseUnits">the accuracy, use [FixedAccuracy, ApproximateAccuracy]</param>
    </member>
    <member name="M:LMF.Tracker.TrackerAlignments.AlignmentInput.SetRotationZ(System.Double,System.Double)">
      <summary>
            Sets a constraint on Rotation Z. If this parameter is unknown it does not need to be set explicitly
            </summary>
      <param name="ValueInBaseUnits">the value in base unit [m]</param>
      <param name="AccuracyInBaseUnits">the accuracy, use [FixedAccuracy, ApproximateAccuracy]</param>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentInput.FixedAccuracy">
      <summary>
            Indicates a Fixed Accuracy for a given parameter
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentInput.UnknownAccuracy">
      <summary>
            Indicates a Unknown Accuracy for a given parameter
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentInput.ApproximateAccuracy">
      <summary>
            Indicates a Approximate Accuracy for a given parameter
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentInput.Points">
      <summary>
            Input point collection, cotaining nominals and actuals
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentInput.TranslationX">
      <summary>
            The input Translation in X
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentInput.TranslationY">
      <summary>
            The input Translation in Y
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentInput.TranslationZ">
      <summary>
            The input Translation in Z
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentInput.RotationX">
      <summary>
            The input Rotation Angle X
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentInput.RotationY">
      <summary>
            The input Rotation Angle Y
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentInput.RotationZ">
      <summary>
            The input Rotation Angle Z 
            </summary>
    </member>
    <member name="T:LMF.Tracker.TrackerAlignments.AlignmentInputPoint">
      <summary>
            A class which holds information about an input alignment point
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentInputPoint.Nominal">
      <summary>
            The nominal coordinates
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentInputPoint.Measurement">
      <summary>
            The actual measurement (actual coordinates)
            </summary>
    </member>
    <member name="T:LMF.Tracker.TrackerAlignments.AlignmentInputPointCollection">
      <summary>
            A class holding all input points for later alignment calculations
            </summary>
    </member>
    <member name="M:LMF.Tracker.TrackerAlignments.AlignmentInputPointCollection.GetEnumerator">
      <summary>
            Returns an enumerator from a cloned collection that iterates through the collection.
            </summary>
      <returns>Returns an enumerator from type AlignmentInputPoint.</returns>
    </member>
    <member name="M:LMF.Tracker.TrackerAlignments.AlignmentInputPointCollection.AddPoint(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Adds a new point to the input list by passing nominal and measured coordinates
            </summary>
      <param name="nominalX">The nominal, cartesian X-Coordiate [m]</param>
      <param name="nominalY">The nominal, cartesian Y-Coordiate [m]</param>
      <param name="nominalZ">The nominal, cartesian Z-Coordiate [m]</param>
      <param name="nominalAccuracyX">The accuracy of nominal X-Coordiate [m]</param>
      <param name="nominalAccuracyY">The accuracy of nominal Y-Coordiate [m]</param>
      <param name="nominalAccuracyZ">The accuracy of nominal Z-Coordiate [m]</param>
      <param name="measX">The measured, cartesian X-Coordinate</param>
      <param name="measY">The measured, cartesian Y-Coordinate</param>
      <param name="measZ">The measured, cartesian Z-Coordinate</param>
      <param name="measAccuracyX">The accuracy of measured X-Coordiate [m]</param>
      <param name="measAccuracyY">The accuracy of measured Y-Coordiate [m]</param>
      <param name="measAccuracyZ">The accuracy of measured Z-Coordiate [m]</param>
      <returns>The newly added AlignmentInputPoint</returns>
    </member>
    <member name="M:LMF.Tracker.TrackerAlignments.AlignmentInputPointCollection.AddPointFromMeasurement(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,LMF.Tracker.MeasurementResults.StationaryMeasurement3D)">
      <summary>
            Adds a new point to the input list by passing the nominal coordinates and a stationary 
            measurement for the measured coordinates
            </summary>
      <param name="nominalX">The nominal, cartesian X-Coordiante [m]</param>
      <param name="nominalY">The nominal, cartesian Y-Coordiante [m]</param>
      <param name="nominalZ">The nominal, cartesian Z-Coordiante [m]</param>
      <param name="nominalAccuracyX">The accuracy of nominal X-Coordiante [m]</param>
      <param name="nominalAccuracyY">The accuracy of nominal Y-Coordiante [m]</param>
      <param name="nominalAccuracyZ">The accuracy of nominal Z-Coordiante [m]</param>
      <param name="m">The StationaryMeasurement3D object containing the position and accuracy of the measured point</param>
      <returns>The newly added AlignmentInputPoint</returns>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentInputPointCollection.Count">
      <summary>
            Gets the number of elements actually contained in the Collection.
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentInputPointCollection.Item(System.Int32)">
      <summary>
            Gets a <see cref="T:LMF.Tracker.TrackerAlignments.AlignmentInputPoint" /> element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>Element at specified index.</returns>
    </member>
    <member name="T:LMF.Tracker.TrackerAlignments.AlignmentOrientationInput">
      <summary>
            A class which hold the input for the orientation
            </summary>
    </member>
    <member name="T:LMF.Tracker.TrackerAlignments.AlignmentOutputPoint">
      <summary>
            A class which holds information about an Output alignment point
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentOutputPoint.Residual">
      <summary>
            The resiudal defined by r = T(actual) - nominal
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentOutputPoint.Transformed">
      <summary>
            The computed transformed point defined by t = T(actual)
            </summary>
    </member>
    <member name="T:LMF.Tracker.TrackerAlignments.AlignmentOutputPointCollection">
      <summary>
            A class holding all Output points for later alignment calculations
            </summary>
    </member>
    <member name="M:LMF.Tracker.TrackerAlignments.AlignmentOutputPointCollection.GetEnumerator">
      <summary>
            Returns an enumerator from a cloned collection that iterates through the collection.
            </summary>
      <returns>Returns an enumerator from type AlignmentOutputPoint.</returns>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentOutputPointCollection.Count">
      <summary>
            Gets the number of elements actually contained in the Collection.
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentOutputPointCollection.Item(System.Int32)">
      <summary>
            Gets a <see cref="T:LMF.Tracker.TrackerAlignments.AlignmentOutputPoint" /> element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>Element at specified index.</returns>
    </member>
    <member name="T:LMF.Tracker.TrackerAlignments.AlignmentTransformationInput">
      <summary>
            A class which hold the input for the transformation
            </summary>
    </member>
    <member name="M:LMF.Tracker.TrackerAlignments.AlignmentTransformationInput.SetScale(System.Double,System.Double)">
      <summary>
            Sets a constraint on Scale. If this parameter is unknown it does not need to be set explicitly
            </summary>
      <param name="paramValueInBaseUnits">the value in base unit [m]</param>
      <param name="paramAccuracyInBaseUnits">the accuracy, use [FixedAccuracy, ApproximateAccuracy]</param>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentTransformationInput.Scale">
      <summary>
            The input Scale
            </summary>
    </member>
    <member name="T:LMF.Tracker.TrackerAlignments.AlignmentTransformationResult">
      <summary>
            A class which holds the output result, i.e. computed alignment, of the transformation
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentTransformationResult.Transformation">
      <summary>
            The calculated transformation 
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentTransformationResult.Points">
      <summary>
            The point collection containing the residuals and transformed points
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentTransformationResult.RMS">
      <summary>
            The calculated RMS (root mean square) of the transformation 
            </summary>
    </member>
    <member name="T:LMF.Tracker.TrackerAlignments.CartesianCoordinatesWithoutAccuracy">
      <summary>
            A class with cartesian coordinates XYZ in [m]
            </summary>
    </member>
    <member name="M:LMF.Tracker.TrackerAlignments.CartesianCoordinatesWithoutAccuracy.#ctor">
      <summary>
            Initializes a new instance of the CartesianCoordinatesWithoutAccuracy class, 
            sets cartesian coordinates and unit [m]
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.CartesianCoordinatesWithoutAccuracy.CoordinateX">
      <summary>
            The cartesian X coordinate
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.CartesianCoordinatesWithoutAccuracy.CoordinateY">
      <summary>
            The cartesian Y coordinate
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.CartesianCoordinatesWithoutAccuracy.CoordinateZ">
      <summary>
            The cartesian Z coordinate
            </summary>
    </member>
    <member name="T:LMF.Tracker.TrackerAlignments.AlignmentOrientationResult">
      <summary>
            A class which holds the output result, i.e. computed alignment, of the orientation
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentOrientationResult.Orientation">
      <summary>
            The calculated orientation 
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentOrientationResult.Points">
      <summary>
            The point collection containing the residuals and transformed points
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.AlignmentOrientationResult.RMS">
      <summary>
            the calculated RMS (root mean square) of the orientation
            </summary>
    </member>
    <member name="T:LMF.Tracker.TrackerAlignments.CartesianCoordinatesWithAccuracy">
      <summary>
            A class with cartesian coordinates XYZ in [m] including accuracy values
            </summary>
    </member>
    <member name="M:LMF.Tracker.TrackerAlignments.CartesianCoordinatesWithAccuracy.#ctor">
      <summary>
            Initializes a new instance of the CartesianCoordinatesWithAccuracy class, 
            sets cartesian coordinates and unit [m] including accuracy
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.CartesianCoordinatesWithAccuracy.CoordinateX">
      <summary>
            The cartesian X coordinate with accuracy
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.CartesianCoordinatesWithAccuracy.CoordinateY">
      <summary>
            The cartesian Y coordinate with accuracy
            </summary>
    </member>
    <member name="P:LMF.Tracker.TrackerAlignments.CartesianCoordinatesWithAccuracy.CoordinateZ">
      <summary>
            The cartesian Z coordinate with accuracy
            </summary>
    </member>
    <member name="T:LMF.Tracker.TrackerAlignments.TrackerAlignment">
      <summary>
            A class which holds the tracker alignment
            </summary>
    </member>
    <member name="M:LMF.Tracker.TrackerAlignments.TrackerAlignment.CalculateOrientation(LMF.Tracker.TrackerAlignments.AlignmentOrientationInput)">
      <summary>
            Calculates an orientation alignment
            </summary>
      <param name="paramInput">The orientation input containing the points and constraints</param>
      <returns>The computed orientation result</returns>
    </member>
    <member name="M:LMF.Tracker.TrackerAlignments.TrackerAlignment.CalculateTransformation(LMF.Tracker.TrackerAlignments.AlignmentTransformationInput)">
      <summary>
            Calculates a transformation alignment
            </summary>
      <param name="paramInput">The transformation input containing the points and constraints</param>
      <returns>The computed transformation result</returns>
    </member>
    <member name="T:LMF.Tracker.RealTime.RealTimeSetup">
      <summary>
            Base class for RealTimeSetups
            </summary>
    </member>
    <member name="T:LMF.Tracker.RealTime.RealTimeSetupCollection">
      <summary>
            Collection of RealTimeSetups
            </summary>
    </member>
    <member name="T:LMF.Tracker.RealTime.RealTimeSetupCollection.ChangedHandler">
      <summary>
            EventHandler delegate for the <see cref="E:LMF.Tracker.RealTime.RealTimeSetupCollection.Changed" /> event.
            </summary>
      <param name="sender">Sender collection</param>
    </member>
    <member name="E:LMF.Tracker.RealTime.RealTimeSetupCollection.Changed">
      <summary>
            Occurs when the Collection has been modified, for example an unknown Probe has been attached.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Meteo.ManualEnvironmentalSensor">
      <summary>
            This class resembles an environmental sensor (temperature, humidity or pressure)
            </summary>
    </member>
    <member name="P:LMF.Tracker.Meteo.ManualEnvironmentalSensor.MinValue">
      <summary>
            Returns the minimal possible value for this sensor in customer units
            </summary>
    </member>
    <member name="P:LMF.Tracker.Meteo.ManualEnvironmentalSensor.MaxValue">
      <summary>
            Returns the maximal possible value for this sensor in customer units
            </summary>
    </member>
    <member name="P:LMF.Tracker.Meteo.ManualEnvironmentalSensor.MinValueInBaseUnits">
      <summary>
            Returns the minimal possible value for this sensor in base units
            </summary>
    </member>
    <member name="P:LMF.Tracker.Meteo.ManualEnvironmentalSensor.MaxValueInBaseUnits">
      <summary>
            Returns the maximal possible value for this sensor in base units
            </summary>
    </member>
    <member name="P:LMF.Tracker.Meteo.ManualEnvironmentalSensor.Value">
      <summary>
            Get or set the value in user units defined in the <see cref="T:LMF.Tracker.Settings" /> object.
            Throws a <see cref="T:System.ArgumentOutOfRangeException" /> if the value is out of range.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Meteo.ManualEnvironmentalSensor.ValueInBaseUnits">
      <summary>
            Get or set the value in base units.
            Throws a <see cref="T:System.ArgumentOutOfRangeException" /> if the value is out of range.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Meteo.EnvironmentalSensor">
      <summary>
            This class resembles an environmental sensor (temperature, humidity or pressure)
            </summary>
    </member>
    <member name="P:LMF.Tracker.Meteo.EnvironmentalSensor.SerialNumber">
      <summary>
            Returns the serial number of the connected environmental sensor
            </summary>
    </member>
    <member name="P:LMF.Tracker.Meteo.EnvironmentalSensor.Available">
      <summary>
            Returns the object for the availability of this sensor
            </summary>
    </member>
    <member name="T:LMF.Tracker.Meteo.MeteoSource">
      <summary>
            This class lets handles the source for meteo values 
            </summary>
    </member>
    <member name="T:LMF.Tracker.Meteo.MeteoSource.ChangedEventHandler">
      <summary>
            The delegate for a source changed event
            </summary>
      <param name="sender">The meteo source object on which the event happened</param>
      <param name="paramNewValue">The new selected source value</param>
    </member>
    <member name="P:LMF.Tracker.Meteo.MeteoSource.Value">
      <summary>
            Gets or sets the actual selected source for meteo values. The meteo values from the selected source are then used in the accuracy calculation of measurements
            This property is persistent after LMF reconnect but not after controller reboot
            </summary>
    </member>
    <member name="P:LMF.Tracker.Meteo.MeteoSource.Label">
      <summary>
            Returns a label string describing the object which can be used in GUI
            </summary>
    </member>
    <member name="E:LMF.Tracker.Meteo.MeteoSource.Changed">
      <summary>
            This event is fired if the source changed
            </summary>
    </member>
    <member name="T:LMF.Tracker.Meteo.MeteoStation">
      <summary>
            This class hold all information about the meteostation, internal/external temperature sensors, etc.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Meteo.MeteoStation.EnvironmentalValuesChangedEventHandler">
      <summary>
            The delegate for handling changed meteo values
            </summary>
      <param name="sender">The meteo station object on which the value has changed</param>
      <param name="paramTemperature">The actual temperature</param>
      <param name="paramHumidity">The actual humidity</param>
      <param name="paramPressure">The actual pressure</param>
    </member>
    <member name="P:LMF.Tracker.Meteo.MeteoStation.Source">
      <summary>
            Returns the object for the selection of the meteo values which are used in the accuracy calculation of measurements
            </summary>
    </member>
    <member name="P:LMF.Tracker.Meteo.MeteoStation.IsAirSensorConnected">
      <summary>
            Returns true if an external air temperature sensor is connected to the controller, not implemented for At901 tracker
            </summary>
    </member>
    <member name="P:LMF.Tracker.Meteo.MeteoStation.HardwareTemperature">
      <summary>
            Returns the object for the internal/external temperature sensor
            </summary>
    </member>
    <member name="P:LMF.Tracker.Meteo.MeteoStation.HardwareHumidity">
      <summary>
            Returns the object for the internal humidity sensor
            </summary>
    </member>
    <member name="P:LMF.Tracker.Meteo.MeteoStation.HardwarePressure">
      <summary>
            Returns the object for the internal pressure sensor
            </summary>
    </member>
    <member name="P:LMF.Tracker.Meteo.MeteoStation.ManualTemperature">
      <summary>
            Returns the object for the manual temperature sensor
            </summary>
    </member>
    <member name="P:LMF.Tracker.Meteo.MeteoStation.ManualHumidity">
      <summary>
            Returns the object for the manual humidity sensor
            </summary>
    </member>
    <member name="P:LMF.Tracker.Meteo.MeteoStation.ManualPressure">
      <summary>
            Returns the object for the manual pressure sensor
            </summary>
    </member>
    <member name="P:LMF.Tracker.Meteo.MeteoStation.ObjectTemperature">
      <summary>
            Returns the object for the external object temperature sensor
            </summary>
    </member>
    <member name="E:LMF.Tracker.Meteo.MeteoStation.EnvironmentalValuesChanged">
      <summary>
            This event is fired if any of the meteo values (humidity, pressure, temperature) has changed
            </summary>
    </member>
    <member name="T:LMF.Tracker.SFX.SfxConnectivity">
      <summary>
            Class of TrackerHierarchyObject which shows different SfxConnectivity.
            </summary>
    </member>
    <member name="P:LMF.Tracker.SFX.SfxConnectivity.CipDataTransferAllowed">
      <summary>
            Customer Improvement Programm
            </summary>
    </member>
    <member name="T:LMF.Tracker.Network.Profiles.EncryptionProfile">
      <summary>
            Base class for all EncryptionProfiles in LMF.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Network.Profiles.EncryptionProfile.Select">
      <summary>
            Selects the desired EncryptionProfile and sets it active.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Network.Profiles.EncryptionProfileCollection.Selected">
      <summary>
            Gets the selected network profile.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Network.Profiles.EncryptionProfileCollection.Count">
      <summary>
            Gets number of elements in the collection.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Network.Profiles.EncryptionProfileCollection.Item(System.Int32)">
      <summary>
            Get the desired network profile.
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="E:LMF.Tracker.Network.Profiles.EncryptionProfileCollection.SelectedChanged">
      <summary>
            Occurs if the selected profile changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Network.Profiles.NetworkProfile">
      <summary>
            Base class for all NetworkProfiles in LMF.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Network.Profiles.NetworkProfile.Select">
      <summary>
            Selects the desired NetworkProfile and sets it active.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Network.Profiles.NetworkProfile.Name">
      <summary>
            Gets the name of the NetworkProfile.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Network.Profiles.NetworkProfileCollection.Selected">
      <summary>
            Gets the selected network profile.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Network.Profiles.NetworkProfileCollection.Count">
      <summary>
            Gets number of elements in the collection.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Network.Profiles.NetworkProfileCollection.Item(System.Int32)">
      <summary>
            Get the desired network profile.
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="E:LMF.Tracker.Network.Profiles.NetworkProfileCollection.SelectedChanged">
      <summary>
            Occurs if the selected profile changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Network.Profiles.LanAutomaticProfile">
      <summary>
            Inherited class of <see cref="T:LMF.Tracker.Measurements.MeasurementProfile" /> which can be used/selected for outdoor measurements.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Network.Profiles.LanDhcpClientProfile">
      <summary>
            Inherited class of <see cref="T:LMF.Tracker.Measurements.MeasurementProfile" /> which can be used/selected for outdoor measurements.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Network.Profiles.LanDhcpServerProfile">
      <summary>
            Inherited class of <see cref="T:LMF.Tracker.Measurements.MeasurementProfile" /> which can be used/selected for outdoor measurements.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Network.Profiles.LanStaticIPClientProfile">
      <summary>
            Inherited class of <see cref="T:LMF.Tracker.Measurements.MeasurementProfile" /> which can be used/selected for outdoor measurements.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Network.Profiles.WLanAdhocDhcpServerProfile">
      <summary>
            Inherited class of <see cref="T:LMF.Tracker.Measurements.MeasurementProfile" /> which can be used/selected for outdoor measurements.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Network.Profiles.WLanAdhocStaticIPClientProfile">
      <summary>
            Inherited class of <see cref="T:LMF.Tracker.Measurements.MeasurementProfile" /> which can be used/selected for outdoor measurements.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Network.Profiles.WLanDhcpClientProfile">
      <summary>
            Inherited class of <see cref="T:LMF.Tracker.Measurements.MeasurementProfile" /> which can be used/selected for outdoor measurements.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Network.Profiles.WLanDhcpServerProfile">
      <summary>
            Inherited class of <see cref="T:LMF.Tracker.Measurements.MeasurementProfile" /> which can be used/selected for outdoor measurements.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Network.Profiles.WLanStaticIPClientProfile">
      <summary>
            Inherited class of <see cref="T:LMF.Tracker.Measurements.MeasurementProfile" /> which can be used/selected for outdoor measurements.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Network.CountryProfiles.CountryProfile">
      <summary>
            Base class for all CountryProfiles in LMF.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Network.CountryProfiles.CountryProfile.Select">
      <summary>
            Selects the desired CountryProfile and sets it active.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Network.CountryProfiles.CountryProfile.Name">
      <summary>
            Gets the name of the CountryProfile.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Network.CountryProfiles.CountryProfileCollection.Selected">
      <summary>
            Gets the selected network profile.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Network.CountryProfiles.CountryProfileCollection.Count">
      <summary>
            Gets number of elements in the collection.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Network.CountryProfiles.CountryProfileCollection.Item(System.Int32)">
      <summary>
            Get the desired network profile.
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="E:LMF.Tracker.Network.CountryProfiles.CountryProfileCollection.SelectedChanged">
      <summary>
            Occurs if the selected profile changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Network.CountryProfiles.WLanAvailableProfile">
      <summary>
            Base class for all WLanAvailableProfiles in LMF.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Network.CountryProfiles.WLanFranceProfile">
      <summary>
            Base class for all WLanFranceProfiles in LMF.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Network.CountryProfiles.WLanNotAvailableProfile">
      <summary>
            Base class for all WLanNotAvailableProfiles in LMF.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Network.CountryProfiles.WLanRestOfWorldProfile">
      <summary>
            Base class for all WLanRestOfWorldProfiles in LMF.
            </summary>
    </member>
    <member name="M:LMF.Tracker.MeasurementStatus.MeasurementPreconditionHelpers.IsTargetAndProfileCombinationAllowed(LMF.Tracker.Tracker)">
      <summary>
            Helper method to check if the combination of selected target and selected profile is valid.
            Forbids some profiles in general and some profiles in combination with some targets.
            All other combinations are allowed.
            </summary>
      <returns>True or false.</returns>
    </member>
    <member name="T:LMF.Tracker.MeasurementStatus.MeasurementPreconditionSets">
      <summary>
            Static class to represent the different sets of measurement preconditions that are used in the system.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementStatus.MeasurementPreconditionSets.ATS600IgnoreMeasPrecondsInAreaScanProfile">
      <summary>
            Collection to filter out all measurement impediments that do not prevent the ATS600 from starting a scan using the AreaScanProfile.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementStatus.MeasurementPreconditionSets.ATS600IgnoreMeasPrecondsInRingScanProfile">
      <summary>
            Collection to filter out all measurement impediments that do not prevent the ATS600 from starting a scan using the RingScanProfile.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementStatus.MeasurementPreconditionSets.ATS600IgnoreMeasPrecondsInLineScanProfile">
      <summary>
            Collection to filter out all measurement impediments that do not prevent the ATS600 from starting a scan using the LineScanProfile.
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementStatus.MeasurementPrecondition">
      <summary>
            This class is used to define a precondition which has to be fullfilled to take measurements.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementStatus.MeasurementPrecondition.Number">
      <summary>
            Number of the precondition.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementStatus.MeasurementPrecondition.Title">
      <summary>
            Title of the precondition.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementStatus.MeasurementPrecondition.Description">
      <summary>
            Description of the precondition.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementStatus.MeasurementPrecondition.Solution">
      <summary>
            Soulution to fullfill the precondition.
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementStatus.MeasurementPreconditionCollection">
      <summary>
            This class is a collection of <see cref="T:LMF.Tracker.MeasurementStatus.MeasurementPrecondition" />.
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementStatus.MeasurementPreconditionCollection.ChangedHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.MeasurementStatus.MeasurementPreconditionCollection.Changed" /> event.
            </summary>
      <param name="sender">The corresponding MeasurementPreconditionCollection.</param>
    </member>
    <member name="M:LMF.Tracker.MeasurementStatus.MeasurementPreconditionCollection.GetEnumerator">
      <summary>
            Returns an enumerator from a cloned collection that iterates through the collection.
            </summary>
      <returns>Returns an enumerator form type MeasurementPrecondition.</returns>
    </member>
    <member name="M:LMF.Tracker.MeasurementStatus.MeasurementPreconditionCollection.GetSnapshot">
      <summary>
            Return the list of current precondition's.
            The returned list is cloned (Snapshot is created).
            This mean, that the returned list is no more changed, when the <see cref="T:LMF.Tracker.MeasurementStatus.MeasurementPreconditionCollection" /> is changed.
            </summary>
      <returns>array of <see cref="T:LMF.Tracker.MeasurementStatus.MeasurementPrecondition" /></returns>
    </member>
    <member name="P:LMF.Tracker.MeasurementStatus.MeasurementPreconditionCollection.Count">
      <summary>
            Gets the number of elements actually contained in the Collection.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementStatus.MeasurementPreconditionCollection.Item(System.Int32)">
      <summary>
            Gets a <see cref="T:LMF.Tracker.MeasurementStatus.MeasurementPrecondition" /> element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>Element at specified index.</returns>
    </member>
    <member name="E:LMF.Tracker.MeasurementStatus.MeasurementPreconditionCollection.Changed">
      <summary>
            Occures when a MeasurementPrecondition is removed or added.
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementStatus.MeasurementStatusValue">
      <summary>
            This class collects data about the measurement status.
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementStatus.MeasurementStatusValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.MeasurementStatus.MeasurementStatusValue.Changed" /> event.
            </summary>
      <param name="sender">The corresponding MeasurementStatusValue.</param>
      <param name="paramNewValue">The new measurement status.</param>
    </member>
    <member name="P:LMF.Tracker.MeasurementStatus.MeasurementStatusValue.Value">
      <summary>
            Gets the current measurement status.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementStatus.MeasurementStatusValue.Label">
      <summary>
            Gets the label of the status.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementStatus.MeasurementStatusValue.Preconditions">
      <summary>
            Gets the current <see cref="T:LMF.Tracker.MeasurementStatus.MeasurementPreconditionCollection" />.
            </summary>
    </member>
    <member name="E:LMF.Tracker.MeasurementStatus.MeasurementStatusValue.Changed">
      <summary>
            Occures when measurement status changed.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.IDistanceComputer.GetDistance(System.Boolean)">
      <summary>
            Get the current distance of the tracker from last ATR or DRO
            </summary>
      <param name="isPreferredDroDistance">True if the dro distance value should be preferred before ATR</param>
      <returns>distance (in m)</returns>
    </member>
    <member name="T:LMF.Tracker.OVC.IOvcCameraComputer">
      <summary>
            Computer to convert the OVC stream x,y coordinates to the Tracker coordinates.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.IOvcCameraComputer.PixelToSphericalPoint3D(System.Windows.Point,System.Windows.Size,System.Double)">
      <summary>
            Convert the Pixel coordinates (OVC stream) to the Tracker coordinate system
            </summary>
      <param name="xy">(x, y) pixel coordinates on the OVC stream picture</param>
      <param name="widthHeight">(width, height) of the OVC stream picture. Standard (640x480)</param>
      <param name="distance">The distance of the point from the tracker. If the parameter is -1, the last/current tracker distance is used</param>
      <returns>Point in the spherical coordinate system corresponding to the input (x, y) pixel coordinate.</returns>
    </member>
    <member name="P:LMF.Tracker.OVC.IOvcCameraComputer.VideoIsRotated">
      <summary>
            Get, set the flag determining if the video is rotated 180 deg (up side down)
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.IOvcCameraComputer.VideoIsVerticallyFlipped">
      <summary>
            Get, set the flag determining if the video is flipped
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.IOvcCameraComputer.PreferredDroDistance">
      <summary>
            Get, set the flag determining if the (DRO distance == True) is preferred for (ATR distance == false)
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.OvcCameraComputer.GetAxisSign">
      <summary>
            Get the Sign flag depending on the VideoIsRotated and VideoIsVerticallyFlipped
            </summary>
      <returns>Sign for the X and Y </returns>
    </member>
    <member name="M:LMF.Tracker.OVC.SphericalPoint2D.#ctor(System.Double,System.Double)">
      <summary>
      </summary>
      <param name="theta">azimuthal angle θ (theta) [horizontal]</param>
      <param name="phi">polar angle φ (phi) [vertical]</param>
    </member>
    <member name="M:LMF.Tracker.OVC.SphericalPoint2D.ToString">
      <summary>
            Creates a <see cref="T:System.String" /> representation of this
            <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.
            </summary>
      <returns>
            A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Media3D.Point3D.X" />,
            <see cref="P:System.Windows.Media.Media3D.Point3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Point3D.Z" />
            values of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.
            </returns>
    </member>
    <member name="M:LMF.Tracker.OVC.SphericalPoint2D.ToString(System.IFormatProvider)">
      <summary>
            Creates a <see cref="T:System.String" /> representation of this
            <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.
            </summary>
      <param name="provider">The culture-specific formatting information.</param>
      <returns>
            A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Media3D.Point3D.X" />,
            <see cref="P:System.Windows.Media.Media3D.Point3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Point3D.Z" />
            values of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.
            </returns>
    </member>
    <member name="P:LMF.Tracker.OVC.SphericalPoint2D.Theta">
      <summary>Gets or sets the theta-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>The theta-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</returns>
    </member>
    <member name="P:LMF.Tracker.OVC.SphericalPoint2D.Phi">
      <summary>Gets or sets the phi-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>The phi-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</returns>
    </member>
    <member name="M:LMF.Tracker.OVC.SphericalPoint3D.#ctor(System.Double,System.Double,System.Double)">
      <summary>
      </summary>
      <param name="r">radial distance r</param>
      <param name="theta">azimuthal angle θ (theta) [horizontal]</param>
      <param name="phi">polar angle φ (phi) [vertical]</param>
    </member>
    <member name="M:LMF.Tracker.OVC.SphericalPoint3D.ToString">
      <summary>
            Creates a <see cref="T:System.String" /> representation of this
            <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.
            </summary>
      <returns>
            A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Media3D.Point3D.X" />,
            <see cref="P:System.Windows.Media.Media3D.Point3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Point3D.Z" />
            values of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.
            </returns>
    </member>
    <member name="M:LMF.Tracker.OVC.SphericalPoint3D.ToString(System.IFormatProvider)">
      <summary>
            Creates a <see cref="T:System.String" /> representation of this
            <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.
            </summary>
      <param name="provider">The culture-specific formatting information.</param>
      <returns>
            A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Media3D.Point3D.X" />,
            <see cref="P:System.Windows.Media.Media3D.Point3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Point3D.Z" />
            values of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.
            </returns>
    </member>
    <member name="P:LMF.Tracker.OVC.SphericalPoint3D.Theta">
      <summary>Gets or sets the theta-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>The theta-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</returns>
    </member>
    <member name="P:LMF.Tracker.OVC.SphericalPoint3D.Phi">
      <summary>Gets or sets the phi-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>The phi-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</returns>
    </member>
    <member name="P:LMF.Tracker.OVC.SphericalPoint3D.R">
      <summary>Gets or sets the r-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>The r-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</returns>
    </member>
    <member name="T:LMF.Tracker.OVC.ATRCoordinate">
      <summary>
            The ATR Coordinates can be used to display target positions on the OVC Image.
            The Pixel X and Y Values relate to the current Image. The H and V Angles can be used
            as direction to lock on the targets.
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.ATRCoordinate.AngleHz">
      <summary>
            Horizontal Angle in user units, set in the Settings.
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.ATRCoordinate.AngleVt">
      <summary>
            Vertical Angle in user units, set in the Settings.
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.ATRCoordinate.PixelX">
      <summary>
            Pixel X coordinate of the found target in the OVC Image. 
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.ATRCoordinate.PixelY">
      <summary>
            Pixel Y coordinate of the found target in the OVC Image. 
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.ATRCoordinateCollection">
      <summary>
            Holds a collection of ATR Coordinates which are only available for AT9x0 Trackers.
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.ATROverlayControl">
      <summary>
            ATROverlayControl
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.ATROverlayControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Dialog">
      <summary>
            Dialog to get OVC data in different ways.
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Dialog.ClosedHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.OVC.Dialog.Closed" /> event
            </summary>
      <param name="sender">Initialized tracker</param>
    </member>
    <member name="M:LMF.Tracker.OVC.Dialog.Show">
      <summary>
            Shows the OVC dialog (WPF Dialog).
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Dialog.ShowOnProcess(System.Int32)">
      <summary>
            Shows the OVC dialog within a process.
            </summary>
      <param name="processID">Determines the process (ID) which should be attached.</param>
    </member>
    <member name="M:LMF.Tracker.OVC.Dialog.ShowTopmost">
      <summary>
            Shows the dialog on top of all open windows and stays there until it is closed.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Dialog.Close">
      <summary>
            Closes the OVC dialog.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Dialog.ShowDialog">
      <summary>
            Shows OVC dialog but the owner window is locked.
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Dialog.ShowCrossHair">
      <summary>
            Show or hide the cross hair
            </summary>
    </member>
    <member name="E:LMF.Tracker.OVC.Dialog.Closed">
      <summary>
            This event is fired when dialog is closed
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.FoundTargetControl">
      <summary>
            Interaction logic for FoundTargetControl.xaml
            </summary>
      <summary>
            FoundTargetControl
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.FoundTargetControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.OVCCameraControl">
      <summary>
            OVCCameraControl
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.OVCCameraControl.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>
            General keyboard handling function that is called before the key press reaches the controls to
            handle all keys that have a global meaning.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.OVC.OVCCameraControl.HandleMovingKey(System.Windows.Input.KeyEventArgs)">
      <summary>
            Helper function to move the tracker based on the given keyboard input. It marks the event as handled
            if the key is interpreted. This behaviour is required to avoi any doubled handling of the key event
            as both the OVC camera control and the OVC window may receive the event depending on the focus
            that can be on any control or window.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:LMF.Tracker.OVC.OVCCameraControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.ICameraSettings.GetFiledOfView">
      <summary>
            Return the field of view for the current camera settings
            </summary>
      <returns>field of view</returns>
    </member>
    <member name="M:LMF.Tracker.OVC.ICameraSettings.GetMaxFiledOfView">
      <summary>
            Return the max field of view from xFieldOfView and yFieldOfView
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:LMF.Tracker.OVC.ICameraSettings.ChipIsRotated">
      <summary>
            Determinate if the ccd chip in the camera is build rotated compared to the Wave
            e.g. Genie have rotated chip
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.OVCWindow">
      <summary>
              Interaction logic for OVCWindow.xaml
            </summary>
      <summary>
            OVCWindow
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.OVCWindow.WaitForMeasurementFinished">
      <summary>
            Helper function to stall the calling thread while the tracker is measuring.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.OVCWindow.GetFocusAgainAfterWaitDialogHelper(System.Exception)">
      <summary>
            Helper function to get the focus on the OVC window again once the WaitDialogHelper has finished. Otherwise
            the keyboard events would not be handled correctly after locking onto a target if the WaitDialogHelper was used.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:LMF.Tracker.OVC.OVCWindow.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>
            General keyboard handling function that is called before the key press reaches the controls to
            handle all keys that have a global meaning.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.OVC.OVCWindow.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.ZoomScrollBoard">
      <summary>
              Interaction logic for ZoomScrollBoard.xaml
            </summary>
      <summary>
            ZoomScrollBoard
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.ZoomScrollBoard.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.ZoomScrollBoard.MaxScale">
      <summary>
            Get set the max scale of the zoom scroll board.
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.OverviewCamera">
      <summary>
            Class for OVC handling. Every tracker has a available class OverviewCamera.
            </summary>
      <summary>
            Class for OVC handling. Every tracker has a available class OverviewCamera.
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.OverviewCamera.TCameraSettings">
      <summary>
            The OverviewCamera is in LMF public interface =&gt; can not add on the class the ICameraSettings interface, because then the class will have more public properties. (properties in interface can be only public)
            But I can make new property (internal), which will implement ICameraSettings.
            This class is the helper class to implement this internal property.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.OverviewCamera.StartAsync">
      <summary>
            This method starts an OVC session asynchronously
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.OverviewCamera.Stop">
      <summary>
            Stops the OVC session.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.OverviewCamera.MoveToPixel(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            This method moves the OVC to the defined pixel/position.
            </summary>
      <param name="paramX">X Coordinate in OVC window</param>
      <param name="paramY">Y Coordinate in OVC window</param>
      <param name="width">Defines the width of the window in pixels</param>
      <param name="height">Defines the height of the window in pixels</param>
    </member>
    <member name="M:LMF.Tracker.OVC.OverviewCamera.GetStillImage(LMF.Tracker.Enums.EStillImageMode)">
      <summary>
            Gets a still image in the desired resolution
            </summary>
      <param name="imageMode">The desired resolution</param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.OVC.OverviewCamera.SaveStillImage(LMF.Tracker.Enums.EStillImageMode,System.String)">
      <summary>
            Saves a still image in the desired resolution to the specified file
            </summary>
      <param name="mode">The desired resolution</param>
      <param name="fileName">The filename for the image</param>
    </member>
    <member name="M:LMF.Tracker.OVC.OverviewCamera.Zoom(LMF.Tracker.Internals.VideoStreamResolution,LMF.Tracker.Internals.VideoZoomLevel,System.Drawing.Point)">
      <summary>
             This function zoom the OVC stream.
             </summary>
      <param name="targetVideoResolution">The target/destination resolution of the ovc stream</param>
      <param name="zoomLevel">The zoom level</param>
      <param name="regionOfInterest">Region of interest.</param>
      <example>
             1. Zoom(VideoStreamResolution.Low, VideoZoomLevel.Zoom1x, new Point(0,0))
               This call set the ovc stream to the low resolution with no zoom.
               The maximal hardware resolution (2560x1920) will be re-sampled to the target resolution (640x480)
             
             2. Zoom(VideoStreamResolution.Low, VideoZoomLevel.Zoom2x, new Point(10,100))
               This call set the ovc stream to the low resolution.
               The maximal hardware resolution (2560x1920) will be re-sampled to the resolution (1280, 960).
               The result of the steam will be rectangle (10, 100, 10+640, 100+480).
            
             3. Zoom(VideoStreamResolution.Low, VideoZoomLevel.Zoom4x, new Point(0,500))
               This call set the ovc stream to the low resolution.
               From the maximal hardware resolution (2560x1920) is the result rectangle (0, 500, 0+640, 500+480).
            
             4. Zoom(VideoStreamResolution.Medium, VideoZoomLevel.Zoom2x, new Point(0, 10))
               This call set the ovc stream to the mid resolution (1280, 960)
               From the maximal hardware resolution (2560x1920) is the result rectangle (0, 500, 0+1280, 10+960).
            
             5. Not allowed combinations
               Zoom(VideoStreamResolution.Medium, VideoZoomLevel.Zoom4x, new Point(0, 0)) .. In the Medium resolution can not zoom more then Zoom2x
               Zoom(VideoStreamResolution.High, VideoZoomLevel.Zoom2x, new Point(0, 0))  .. In High resolution can not zoom.
             
             </example>
    </member>
    <member name="M:LMF.Tracker.OVC.OverviewCamera.ToTrackerCoordinatesWithDistance(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            This method convert the OVC window pixel coordinates to the tracker coordinates.
            </summary>
      <param name="pX">X pixel coordinate in the OVC window</param>
      <param name="pY">Y pixel coordinate in OVC window</param>
      <param name="width">width of the OVC window in pixels</param>
      <param name="height">height of the OVC window in pixels</param>
      <param name="distance">distance of the point</param>
      <returns>The tracker coordinates in the coordinate system determined by the current settings</returns>
    </member>
    <member name="M:LMF.Tracker.OVC.OverviewCamera.SetVideoSize(System.Double,System.Double)">
      <summary>
            Set the default VideoSize resolution.
            The function is used only for TPI devices, where the VideoWidth, and VideoHeight is not send with image.
            </summary>
      <param name="videoWidth">
      </param>
      <param name="videoHeight">
      </param>
    </member>
    <member name="M:LMF.Tracker.OVC.OverviewCamera.SetVideoRegionOfInterest(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Set the default VideoRegionOfInterest.
            The function is used only for TPI devices, where the VideoWidth, and VideoHeight is not send with image.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:LMF.Tracker.OVC.OverviewCamera.RelativeTrackerCoordinatesToAbsolute(LMF.Tracker.OVC.SphericalPoint3D)">
      <summary>
            Convert the relative tracker coordinates (result from PixelToSphericalPoint3D) to the Absolute tracker coordinate system.
            For this is needed the current position of the tracker (h,v)
            </summary>
      <param name="relativeCoordinates">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:LMF.Tracker.OVC.OverviewCamera.Brightness">
      <summary>
            Gets the current brightness of the OVC.
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.OverviewCamera.Contrast">
      <summary>
            Gets the current contrast of the OVC.
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.OverviewCamera.DisplaySize">
      <summary>
            The output display width/height. Default 640x480. The value can be different from the (VideoWidth/VideoHeight == video resolution)
            </summary>
    </member>
    <member name="E:LMF.Tracker.OVC.OverviewCamera.ImageArrived">
      <summary>
            Eventhandler to handle the event "ImageArrived" which delivers you an OVC image. (as Byte-array)
            </summary>
    </member>
    <member name="E:LMF.Tracker.OVC.OverviewCamera.WPFBitmapImageArrived">
      <summary>
            Eventhandler to handle the event "ImageArrived" which delivers you an OVC image. (as WPF Image)
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Internal.IVideoSettings.IsVideoRotated">
      <summary>
            Get the flag if video is rotated
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Internal.IVideoSettings.IsVideoVerticallyFlipped">
      <summary>
            Get the flag if video is Vertically Flipped
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Internal.IVideoSettings.VideoRegionOfInterest">
      <summary>
            Get The current video region of interest. The region is set with every picture from stream.
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Internal.IVideoSettings.VideoSize">
      <summary>
            Get The current video size (width, height). The resolution is set with every picture.
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Internal.IVideoSettings.VideoZoomLevel">
      <summary>
            Get the current sub sampling of the stream.
            1 .. The video is in full resolution, no sub sampling (hi-res)
            2 .. The video is in full/2 resolution, (mid-res)
            4 .. The video is in full/4 resolution, (lo-res)
            </summary>
      <example>
            If the Video stream is open with "lo" resolution, then in the picture is VideoSize=(640, 480), SubSampling=4
            If the Video stream is open with "mid" resolution, then in the picture is VideoSize=(1280, 960), SubSampling=2
            If the Video stream is open with "lo" resolution, and ZOOM is applied(to hi-res), then in the picture is VideoSize=(640, 480), SubSampling=1
            If the Video stream is open with "mid" resolution, and ZOOM is applied(to hi-res), then in the picture is VideoSize=(1280, 960), SubSampling=1
            </example>
    </member>
    <member name="P:LMF.Tracker.OVC.Internal.IVideoSettings.VideoStreamResolution">
      <summary>
            Get the current VideoStreamResolution. The resolution is calculated from the VideoSize
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Internal.IVideoSettings.ApiPointOfInterest">
      <summary>
            Get the point of interest from te API. If the point was not set (e.g. the version of command was below 4 the point can be null)
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Internal.IVideoSettings.PanoramaModeImageCounter">
      <summary>
            Get the image counter in the panorama mode.
            If the panorama mode is not started, this value is 0
            The next panorama image can be detected, by checking if the value is increased.
            The last panorama image can be detected, by checking if the value was changed from not 0 value to 0. 
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Internal.IVideoSettings.PanoramaModeImagePosition">
      <summary>
            Get the (H,V,D) position for the image in the panorama mode.
            The HV are in RAD
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Internal.IVideoSettings.Version">
      <summary>
            Get the version of the video settings
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Internal.IVideoSettings.VideoGeometricalOperation">
      <summary>
            Return the VideoGeometricalOperation calculated from IsVideoRotated, IsVideoVerticallyFlipped
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Internal.VideoSettings">
      <summary>
            This class is holder for  the information's about the received video settings from the stream.
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Internal.IVideoSettingsTools">
      <summary>
            This is the interface for the help tools for the VideoSettings functionality.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Internal.IVideoSettingsTools.GetResolutionSizeFromVideoSettings(LMF.Tracker.Internals.VideoStreamResolution,LMF.Tracker.Internals.VideoZoomLevel)">
      <summary>
            Get the VideoSize (width, height) from subSampling
            </summary>
      <param name="videoResolution">
      </param>
      <param name="videoZoomLevel">
      </param>
      <returns>Video size</returns>
    </member>
    <member name="T:LMF.Tracker.OVC.Internal.WaitDialog">
      <summary>
              Interaction logic for WaitDialog.xaml
            </summary>
      <summary>
            WaitDialog
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Internal.WaitDialog.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Internal.WPFUIHelper.ToBitmapPng(System.Windows.Media.Visual)">
      <summary>
              Returns the contents of a WPF Visual as a Bitmap in PNG format.
            </summary>
      <param name="visual"> A WPF Visual. </param>
      <returns> A GDI+ System.Drawing.Bitmap. </returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Internal.WPFUIHelper.ToBitmapSource(System.Windows.Media.Visual)">
      <summary>
              Returns the contents of a WPF Visual as a BitmapSource, e.g. for binding to an Image control.
            </summary>
      <param name="visual"> A WPF Visual. </param>
      <returns> A set of pixels. </returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Internal.WPFUIHelper.FindVisualChild``1(System.Windows.DependencyObject,System.String)">
      <summary>
              Finds a Child of a given item in the visual tree.
            </summary>
      <param name="parent"> A direct parent of the queried item. </param>
      <typeparam name="T"> The type of the queried item. </typeparam>
      <param name="childName"> x:Name or Name of child. </param>
      <returns> The first parent item that matches the submitted type parameter. If not matching item can be found, a null parent is being returned. </returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Internal.WPFUIHelper.FindVisualParent``1(System.Windows.DependencyObject)">
      <summary>
              Finds a parent of a given item on the visual tree.
            </summary>
      <typeparam name="T"> The type of the queried item. </typeparam>
      <param name="child"> A direct or indirect child of the queried item. </param>
      <returns> The first parent item that matches the submitted type parameter. If not matching item can be found, a null reference is being returned. </returns>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.SphereGeometryHelper">
      <summary>
            Helper class for geometric operations
            Source: http://www.codeproject.com/Articles/24727/WPF-D-Part-of-n
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.SphereGeometryHelper.GetPosition(System.Double,System.Double,System.Double)">
      <summary>
            Get (x,y,z) coordinates for given angles and radius
            </summary>
      <param name="theta">Theta angle</param>
      <param name="phi">Phi angle</param>
      <param name="radius">Radius</param>
      <returns>Coordinates</returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.SphereGeometryHelper.GetNormal(System.Double,System.Double)">
      <summary>
            Get normal vector for given angles
            </summary>
      <param name="theta">Theta angle</param>
      <param name="phi">Phi angle</param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.SphereGeometryHelper.GetTextureCoordinate(System.Double,System.Double)">
      <summary>
            Get texture coordinates for given angles
            </summary>
      <param name="theta">Theta angle</param>
      <param name="phi">Phi angle</param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.SphereGeometryHelper.CreateSphereMesh(System.Int32,System.Int32,System.Double,System.Double,System.Double)">
      <summary>
            Create a tessellated sphere mesh
            </summary>
      <param name="tDiv">Theta divisions</param>
      <param name="pDiv">Phi divisions</param>
      <param name="radius">Radius</param>
      <returns>Sphere mesh</returns>
            Source: http://www.codeproject.com/Articles/24727/WPF-D-Part-of-n
        </member>
    <member name="T:LMF.Tracker.OVC.Scanning.ScanningOverviewControl">
      <summary>
            Interaction logic for ScanningOverviewControl.xaml
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.ScanningOverviewControl.SingleTaskRunner">
      <summary>
            This class Allow only one action in the task. When moe actions are added, when the old task is running, only last action is executed in the next task.
            </summary>
    </member>
    <member name="F:LMF.Tracker.OVC.Scanning.ScanningOverviewControl._showCrossHairController">
      <summary>
            Set the controller, which allow to show/hide cross-hair.
            </summary>
    </member>
    <member name="F:LMF.Tracker.OVC.Scanning.ScanningOverviewControl._showPanoramaController">
      <summary>
            Set the controller, which allow to show/hide cross-hair.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.ScanningOverviewControl.Init">
      <summary>
            Must be called after ctr and before Load
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.ScanningOverviewControl.Close">
      <summary>
            Is called on close. Before Dispose.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.ScanningOverviewControl.RefreshCrossHair">
      <summary>
            This function is called on every image arrive.
            The 'CrossHair' is bind-ed to the UI check button.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.ScanningOverviewControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.ScanningWindow">
      <summary>
            Interaction logic for ScanningWindow.xaml
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.ScanningWindow.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.WorldModels.IHighResolutionSphereLayer.DrawingSize">
      <summary>
            The drawing size of the sphere.
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.WorldModels.ILiveOvcLayer.ShowFrameOnOvcWindow">
      <summary>
            Get or set the property, which determinate if the frame is painted around the ovc window
            </summary>
    </member>
    <member name="F:LMF.Tracker.OVC.Scanning.WorldModels.LiveOvcLayer.lastVideoZoomLevel">
      <summary>
            The function update _RenderTarget to the current VideoScalingFactor
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.WorldModels.LiveOvcLayer.TrackerUpDownRotationBlock(System.Windows.Media.DrawingContext,System.Windows.Size,System.Boolean,System.Action)">
      <summary>
            If the tracker is 'upside down', the 'action' is executed in the 180 deg rotation.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.WorldModels.PerimeterLayer.EndDrawing(System.Boolean)">
      <summary>
            Call to finish drawing. When the cancel parameter is true, the drawing will be canceled (region/poligon) will be not added
            </summary>
      <param name="cancel">
      </param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.WorldModels.WpfRenderHelper.ConvertToRegular(System.Windows.Point)">
      <summary>
            This function convert the filliped (h,v) vector to the not filliped vector.
            If the input is not flipped vector, the result is the same as the input.
            </summary>
      <param name="hv"> input vector (h,v)</param>
      <returns>Not flipped vector</returns>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.WorldLayers.EventLayer">
      <summary>
            This event know how to calculate the mouse clicks to layer position
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.WorldLayers.PatchGrid.#ctor(LMF.Tracker.OVC.Scanning.WorldModels.HighResolutionSphereLayer,System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
            This apply (create the texture on the sphere model).
            In this texture are visible the model points.
            </summary>
      <param name="sphere">sphere layer</param>
      <param name="panoramaWidth">width of the texture (drawing context). Standard is it (360.0 / OvcFieldOfViewX) * 640 == </param>
      <param name="panoramaHeight">
      </param>
      <param name="patchCountX">The model is created from patches. This is the count of patches in X</param>
      <param name="patchCountY">
      </param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.WorldLayers.Panorama.IPanoramaLayer.UpdateAllDrawings">
      <summary>
            Used only on Init, where the grid is created. TODO Create Init function instead.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.WorldLayers.Panorama.IPanoramaLayer.UpdateModel">
      <summary>
            Redraw the layer. Is called, when the panoramaImage was updated, and content needs to be repainted.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.WorldLayers.Panorama.IPanoramaLayer.UpdateOffset">
      <summary>
            Update the panorama on the offset calculated from the distance.
            With this call the panorama is aligned to the live ovc layer.
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.WorldLayers.Panorama.IPanoramaLayer.Model">
      <summary>
            Get the model. Needed by the initialization of the over all model
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.WorldLayers.Panorama.IPanoramaLayer.DrawingSize">
      <summary>
            Return the current drawing size
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.WorldLayers.Panorama.PanoramaLayer.#ctor(LMF.Tracker.OVC.Scanning.Controls.Panorama.IPanoramaRoom,LMF.Tracker.OVC.Scanning.WorldModels.IHighResolutionSphereLayer,System.Windows.Size,System.Windows.Size,System.Windows.Size,LMF.Tracker.OVC.Scanning.Controls.Panorama.Builder.IPanoramaBuilder,LMF.Tracker.OVC.Scanning.Tools.ICenterPointOffsetComputer,LMF.Tracker.OVC.Internal.IVideoSettings,Leica.Logbook.ILogger)">
      <summary>
            ctr
            </summary>
      <param name="sphere">The sphere with the model</param>
      <param name="size">The size of the panorama (width/height)</param>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Tools.LimitCameraLookDirectionProvider">
      <summary>
            This class have functions, which know how to calculate the limit of the cameraLookDirection and FieldOfView,
            depending if the ZoomOverCameraFieldOfView is allowed.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.LimitCameraLookDirectionProvider.GetLimitedCameraLookDirection(System.Windows.Point,System.Double,System.Windows.Point)">
      <summary>
            Get the look direction. Limit the look direction, and the field of view, that image is not out of area.
            </summary>
      <param name="requestedCameraLookDirection">input look direction</param>
      <param name="requestedFieldOfView">input field of view</param>
      <param name="currentLaserLookDirection">
      </param>
      <returns>target camera look direction</returns>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Tools.LimitCameraLookDirectionProvider.AllowZoomOverCameraFieldOfView">
      <summary>
            Determinate if the zoom over field of view is allowed.
            e.g. for Wave is it allowed, for genie not.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.IOvcStreamObserver.Update(System.Boolean)">
      <summary>
            This function needs to be called in periodic intervals to stay IsLiving in true.
            If the function is not called in some interval, the IsLiving is changed to false;
            </summary>
      <param name="isLiving">
      </param>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Tools.IOvcStreamObserver.IsLiving">
      <summary>
            Return the current value of isLiving
            </summary>
    </member>
    <member name="E:LMF.Tracker.OVC.Scanning.Tools.IOvcStreamObserver.Changed">
      <summary>
            Is raised when the IsLiving was changed. In the args is the value of the IsLiving when the is raised was invoked.
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Tools.OvcStreamObserver">
      <summary>
            This class observe the ovc stream, and raise the event, if the stream state was changed.
            e.g. when the OVC display is turned off
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.OvcStreamObserver.#ctor(System.TimeSpan)">
      <summary>
            ctr
            </summary>
      <param name="ovcStreamTimeOut">The time interval on which the IsLiving is changed to false, when no Update is called</param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.IPointWave.Draw">
      <summary>
            Main function to draw the wave around the point
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Tools.PointWave">
      <summary>
            This class know how to paint the waves on the target point
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.PointWave.#ctor(System.Windows.Point,LMF.Tracker.OVC.Scanning.Tools.IParentListRemover,System.Windows.Controls.Canvas,LMF.Tracker.OVC.Scanning.Tools.IViewPortCanvasPositionConverter)">
      <summary>
            ctr
            </summary>
      <param name="pointHVInRad">The HV Rad cord in tracker system, of the point, where should be painted waves</param>
      <param name="parentListRemover">The interface to the function, which will remove current point from the parent list, when the wave is finished.</param>
      <param name="crossHairOverlay">The canvas on which will be the point painted</param>
      <param name="viewPortCanvasPositionConverter">The convertor, which know how to convert Tracker cord to the Canvas cord</param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.IPointWaveManager.Add(System.Windows.Point)">
      <summary>
            Add the point which will be painted.
            </summary>
      <param name="pointHvInRad">
      </param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.IPointWaveManager.DrawPoints">
      <summary>
            Called, when the points are repainted. This function needs to be called in cycles.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.IParentListRemover.Remove(System.Object)">
      <summary>
            Callback function which allow point to remove him self from the manager list.
            </summary>
      <param name="item">
      </param>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Tools.PointWaveManager">
      <summary>
            This class manage paint points. Know how to add point, and remove point, when it was full painted.
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Tools.JoystickTrackerMoveHandler">
      <summary>
            Interaction logic for JoystickMoveHandler.xaml
            </summary>
      <summary>
            JoystickTrackerMoveHandler
            </summary>
    </member>
    <member name="F:LMF.Tracker.OVC.Scanning.Tools.JoystickTrackerMoveHandler.moveStepSizeHorizontal">
      <summary>
            The Step size (in DEG) on which will be the tracker moved, when clicking on the UI arrow control
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.JoystickTrackerMoveHandler.GetMoveHorizontalOffsetFromKey(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)">
      <summary>
            Return the distance on which should be tracker head moved (horizontal), depending on the input Key, ModifierKeys
            If none combination Key + ModifierKeys is found, the distance = -1, and this men, that the Key was not handled
            </summary>
      <param name="key">
      </param>
      <param name="modifierKeys">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.JoystickTrackerMoveHandler.MoveTrackerOnOffset(System.Double,System.Double,System.String)">
      <summary>
            Move the tracker head on offset.
            </summary>
      <param name="horizontalOffsetInDeg">
            - for the move to LEFT
            + for the move to RIGHT</param>
      <param name="verticalOffsetInDeg">
            - for the move UP
            + for the move DOWN
            </param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.JoystickTrackerMoveHandler.UpdateOffset(System.Double@,System.Double@)">
      <summary>
            This function update the horizontal, vertical offset depending on the _addCompensationToMoveOffset
            </summary>
      <param name="horizontalOffsetInDeg">
      </param>
      <param name="verticalOffsetInDeg">
      </param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.JoystickTrackerMoveHandler.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.IShortestPointPathConverter.ExpandHvdPoints(System.Collections.Generic.IEnumerable{System.Windows.Point})">
      <summary>
            Function expand the points (horizontal) from (-pi, pi) space to the infinite space by the shortest distance algorithm
            The inputs points are in RAD
            </summary>
      <param name="hvPoints">source points in Rad</param>
      <returns>Expanded points</returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.IShortestPointPathConverter.ExpandHvdPoint(System.Nullable{System.Windows.Point},System.Windows.Point)">
      <summary>
            Function expand the point (horizontal) from (-pi, pi), or (0, 2pi) space to the infinite space continued on the last point by the shortest distance algorithm
            The inputs points are in RAD
            The lastPoint, when the currentPoint is first point.
            </summary>
      <param name="lastPoint">lastPoint in Rad. </param>
      <param name="currentPoint"> the currentPoint point in Rad</param>
      <returns>Expanded point</returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.ShortestPointPathConverter.ShrinkHvdPoints(System.Collections.Generic.IEnumerable{System.Windows.Point})">
      <summary>
            Function shrink the points (horizontal) from infinite space to the (-pi, pi) space
            The inputs points are in RAD
            </summary>
      <param name="hvdInfinitePoints">source points in Rad</param>
      <returns>Shrink points</returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.ICameraProvider.UpdateCamera">
      <summary>
            Set the LookDirection, and the Offset of the camera from the internal values. This call will move the camera 
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Tools.ICameraProvider.CameraOffset">
      <summary>
            Get or set the camera offset in RAD to the internal values. The camera object is not updated. Update is over <see cref="M:LMF.Tracker.OVC.Scanning.Tools.ICameraProvider.UpdateCamera" /> call.
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Tools.ICameraProvider.CameraLookDirection">
      <summary>
            Get the camera look direction in DEG. The camera object is not updated. Update is over <see cref="M:LMF.Tracker.OVC.Scanning.Tools.ICameraProvider.UpdateCamera" /> call.
            </summary>
    </member>
    <member name="E:LMF.Tracker.OVC.Scanning.Tools.ICameraProvider.FieldOfViewChanged">
      <summary>
            raised, when the FieldOfView changed
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.TSphericalPoint2D.Set(System.Double,System.Double)">
      <summary>
            Sets the values, without creating the instance.
            </summary>
      <param name="theta">azimuthal angle θ (theta) [horizontal]</param>
      <param name="phi">polar angle φ (phi) [vertical]</param>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Tools.TSphericalPoint2D.Phi">
      <summary>Gets or sets the phi-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>The phi-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</returns>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Tools.CenterPointOffsetComputer">
      <summary>
            This class know how to calculate the offset of the center point of the OVC
            This is used to calculate the offset of the laser point to center of the ovc.
            The offset is depending on the distance =&gt; The actual dro distance is used
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.IOvcCrossHairHandler.UpdateCrossHair(System.Boolean,System.Windows.Point)">
      <summary>
            Show or hide the cross hair
            </summary>
      <param name="showHide"> True show cross hair, False hide cross hair.</param>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Tools.IDeveloperViewHandler.Enabled">
      <summary>
            Determinate if developer window is enabled or disabled
            </summary>
    </member>
    <member name="E:LMF.Tracker.OVC.Scanning.Tools.IDeveloperViewHandler.Changed">
      <summary>
            Determinate if the state of the Enabled was changed (The DevelopViewer was activated/deactivated)
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Tools.DeveloperViewHandler">
      <summary>
            This class know how/if to show/hide developer window. The window holds more information's.
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Tools.IDragWorldMoveHandler.Enabled">
      <summary>
            General switch to turn On/Off handler.
            If Enabled == false no events are handled.
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Tools.DragWorldMoveHandler">
      <summary>
            This class know how to handle world move operations
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Tools.Face2Handler">
      <summary>
            The class him self register on Change event, and execute action on the save
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.IKeyEventHandler.HandleKeyEvent(System.Windows.Input.KeyEventArgs)">
      <summary>
            Handle function for Key
            </summary>
      <param name="e">Key event args</param>
      <returns>True is the key event was handled.</returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.IMouseEventHandler.HandleMouseEvent(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Handle function for mouse
            </summary>
      <param name="e">mouse event args</param>
      <returns>True is the event was handled.</returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.IMouseEventHandler.HandleMouseMoveEvent(System.Windows.Input.MouseEventArgs)">
      <summary>
            Handle function for mouse move
            </summary>
      <param name="e">mouse event args</param>
      <returns>True is the event was handled.</returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.IMouseEventHandler.HandleMouseMoveWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>
            Handle function for mouse wheel
            </summary>
      <param name="e">mouse wheel event args</param>
      <returns>True is the event was handled.</returns>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Tools.IFlyingWorldMoveHandler.Enabled">
      <summary>
            General switch to turn On/Off handler.
            If Enabled == false no events are handled.
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Tools.FlyingWorldMoveHandler">
      <summary>
            This class know how to handle world move operations
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.IViewPortCanvasPositionConverter.GetScreenPoint(System.Windows.Point)">
      <summary>
            Convert the HV point in Rad to the canvas (pixel) point
            </summary>
      <param name="pointHVInRad">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Tools.ViewPortCanvasPositionConverter">
      <summary>
            This class know how to convert the H,V tracker point to the Canvas View port point.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.IZoomHandler.RefreshZoomRegion">
      <summary>
            RefreshZoom region on the actual camera position.
            The function is called, when the camera look direction was changed. In this case when only the sub-region is shown this needs to be recalculated
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.IZoomHandler.ZoomToFieldOfView(System.Double)">
      <summary>
            Zoom directly to the field of view.
            e.g. 30 mean, that the camera will see 30 deg
            </summary>
      <param name="fieldOfViewInDeg">
      </param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.IZoomHandler.ZoomToLevel1">
      <summary>
            This function zoom, that the no partial zoom is used.
            If already the zoom level 1 is used, function do nothing.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.IZoomHandler.GetCameraZoomOffset">
      <summary>
            Return the camera zoom offset relative to the Tracker position (without camera compensation offset)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Tools.IZoomHandler.AllowRegionZoom">
      <summary>
            Determinate if the RegionZoom os allowed. The region zoom is zooming function which is alowed only when the region zoom is implemented in the firmware.
            e.g. zoom in MID resolution will continues to the HI resolution zoom in region.
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Tools.ZoomHandler.SingleTaskRunner">
      <summary>
            This class Allow only one action in the task. When moe actions are added, when the old task is running, only last action is executed in the next task.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.ZoomHandler.GetDelta(System.Double,System.Double)">
      <summary>
            This function transfer the mouse zoom to the more smooth zooming
            </summary>
      <param name="currentFiledOfView">
      </param>
      <param name="zoomDelta">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.ZoomHandler.GetRegionOfInterest(LMF.Tracker.Internals.VideoStreamResolution,System.Drawing.Point,LMF.Tracker.Internals.VideoZoomLevel)">
      <summary>
            Calculate region of interest.
            </summary>
      <param name="videoStreamResolution">THe current video stream resolution. e.g. 640x480</param>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Tools.StableProbing.HvImage">
      <summary>
            This is dto object for the one panorama image. 
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Tools.StableProbing.IStableProbingProviderEvents.Enabled">
      <summary>
            Enable/disable the provider
            When set to enabled, the current position is set as the start position.
            </summary>
    </member>
    <member name="E:LMF.Tracker.OVC.Scanning.Tools.StableProbing.IStableProbingProviderEvents.PositionChanged">
      <summary>
            Raised, when the tracker position is changed. The subscriber should react on this event. e.g. resize the painting rectangle.
            </summary>
    </member>
    <member name="E:LMF.Tracker.OVC.Scanning.Tools.StableProbing.IStableProbingProviderEvents.Triggered">
      <summary>
            Raised, when the tracker is no more moved.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.StableProbing.IMouseStableProbingProvider.RaiseTriggered(System.Double,System.Double,System.Double)">
      <summary>
            call this function to manual raise the triggered event.
            This is used in mouse provider, because there is Triggered raised, on mouse down click.
            </summary>
      <param name="h">horizontal in RAD</param>
      <param name="v">horizontal in RAD</param>
      <param name="d">
      </param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.StableProbing.IMouseStableProbingProvider.Update(System.Double,System.Double,System.Double)">
      <summary>
            Called from provider to update the h,v,image data.
            In this call is raised PositionChanged event
            </summary>
      <param name="h">horizontal in RAD</param>
      <param name="v">vertical in RAD</param>
      <param name="d">distance</param>
    </member>
    <member name="E:LMF.Tracker.OVC.Scanning.Tools.StableProbing.IStableProbingProviderManager.PositionChanged">
      <summary>
            Raised, when the tracker position is changed. The subscriber should react on this event. e.g. resize the painting rectangle.
            </summary>
    </member>
    <member name="E:LMF.Tracker.OVC.Scanning.Tools.StableProbing.IStableProbingProviderManager.Triggered">
      <summary>
            Raised, when the tracker is no more moved.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.StableProbing.ITrackerProbingProvider.Update(System.Double,System.Double,System.Double,System.Windows.Media.Imaging.BitmapImage)">
      <summary>
            Called from provider to update the h,v,image data.
            In this call is raised PositionChanged event
            </summary>
      <param name="h">horizontal in RAD</param>
      <param name="v">vertical in RAD</param>
      <param name="d">distance</param>
      <param name="image">
      </param>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Tools.StableProbing.ITrackerProbingProvider.AutoTriggerEnabled">
      <summary>
            Disable or enable the auto trigger.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Tools.StableProbing.ILedBlinkingManager.Triggered">
      <summary>
            called when the auto stable probing is successfully triggered.
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.RegionItemControl">
      <summary>
            Interaction logic for RegionItemControl.xaml
            </summary>
      <summary>
            RegionItemControl
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.RegionItemControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.RegionPropertyControl">
      <summary>
            Interaction logic for RegionPropertyControl.xaml
            </summary>
      <summary>
            RegionPropertyControl
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.RegionPropertyControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.AreaScanProfileControl">
      <summary>
            Interaction logic for AreaScanProfileControl.xaml
            </summary>
      <summary>
            AreaScanProfileControl
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.AreaScanProfileControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.BoundaryPolygonControl">
      <summary>
            Interaction logic for BoundaryPolygonControl.xaml
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.BoundaryPolygonControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.IPropertyPanelControl.SetContent(System.Object)">
      <summary>
            Set the content of the property control
            </summary>
      <param name="guiContent">
      </param>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.IPropertyPanelControl.Active">
      <summary>
            Set the control active/inactive
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.IPropertyPanelControl.OnSceneUpdateRequired">
      <summary>
            Is called, when the update of the scene layout is required.
            e.g when the GuiContent is set to null =&gt; the this.Width is set to 0 =&gt; The scene needs to be updated.
            
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.IPropertyPanelControl.Visible">
      <summary>
            Get/Set the visibility of the panel
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.PropertyPanelControl">
      <summary>
            Interaction logic for PropertyPanelControl.xaml
            </summary>
      <summary>
            PropertyPanelControl
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.PropertyPanelControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.PanoramaRegionItemControl">
      <summary>
            Interaction logic for RegionItemControl.xaml
            </summary>
      <summary>
            PanoramaRegionItemControl
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.PanoramaRegionItemControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.ProfileSelectorControl">
      <summary>
            Interaction logic for ProfileSelectorControl.xaml
            </summary>
      <summary>
            ProfileSelectorControl
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.ProfileSelectorControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.ValueSliderControl">
      <summary>
            Interaction logic for ValueSliderControl.xaml
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.ValueSliderControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.ScanningRegionControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Traverse.PanoramaProfileControl">
      <summary>
            Interaction logic for TraverseScanProfileControl.xaml
            </summary>
      <summary>
            PanoramaProfileControl
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Traverse.PanoramaProfileControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Traverse.PolyLineControl">
      <summary>
            Interaction logic for PolyLineControl.xaml
            </summary>
      <summary>
            PolyLineControl
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Traverse.PolyLineControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Traverse.LineItemControl">
      <summary>
            Interaction logic for TraverseItemControl.xaml
            </summary>
      <summary>
            LineItemControl
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Traverse.LineItemControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Traverse.LinePropertyControl">
      <summary>
            Interaction logic for TraversePropertyControl.xaml
            </summary>
      <summary>
            LinePropertyControl
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Traverse.LinePropertyControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Traverse.LineScanProfileControl">
      <summary>
            Interaction logic for TraverseScanProfileControl.xaml
            </summary>
      <summary>
            LineScanProfileControl
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Traverse.LineScanProfileControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.ICurrentImageProvider.UpdateImage(System.Windows.Media.Imaging.BitmapImage,System.Double,System.Double,System.Double)">
      <summary>
            Set the intern image, and H, V
            </summary>
      <param name="image">
      </param>
      <param name="h">
      </param>
      <param name="v">
      </param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.ICurrentImageProvider.GetImage">
      <summary>
            Get the image, which was previously set by the UpdateImage. The image is cloned.
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Panorama.IPanoramaImageProvider">
      <summary>
            This interface provide functionality to get new panorama image which is merged from existing panorama image, and the provided image.
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Panorama.ArrivedPanoramaImage">
      <summary>
            This is dto object for the one panorama image. 
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.Panorama.ImageArrivedEventArgs.H">
      <summary>
            H is in DEG
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.Panorama.ImageArrivedEventArgs.V">
      <summary>
            V is in DEG
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.IScanPanoramaImageProvider.Start(System.Windows.Rect,System.Windows.Size)">
      <summary>
            Start the panorama image's scanning
            </summary>
      <param name="scanRect">Define the start and the end point of the scanned rectangle</param>
      <param name="deltaXy"> Determinate the next move on X, and move on Y. Wit this can be determined the overlap between images.</param>
    </member>
    <member name="E:LMF.Tracker.OVC.Scanning.Controls.Panorama.IScanPanoramaImageProvider.ImageArrived">
      <summary>
            Raised, when the image is arrived
            </summary>
    </member>
    <member name="E:LMF.Tracker.OVC.Scanning.Controls.Panorama.IScanPanoramaImageProvider.Finished">
      <summary>
            Raised, After last image was arrived, and scanning is finished.
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Panorama.ScanPanoramaImageProvider">
      <summary>
            This class Provides the images for the panorama, when panorama scanning is started
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.IPanoramaRectCalculator.Calcualte(System.Collections.Generic.IEnumerable{System.Windows.Point})">
      <summary>
            Calculate the rect from the points
            </summary>
      <param name="points">The points. The order of the points is important</param>
      <returns>
      </returns>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Panorama.PanoramaShortestWayRectCalculator">
      <summary>
            This class know how from the input points can calculate the Rect.
            This is used, when the point is added in panorama definition.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.IPanoramaRoom.Init(LMF.Tracker.OVC.Scanning.Controls.Panorama.IPanoramaImageProvider)">
      <summary>
            Initialize the class. Load the panorama data (if existing ) to the memory
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.IPanoramaRoom.GetPanoramaImage">
      <summary>
            Gets the rendered panorama image
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.IPanoramaRoom.DeletePanorama">
      <summary>
            Delete panorama.
            - Delete current room, all stored images, and also panoramaImage
            - Raise event, panorama image changed. 
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.IPanoramaRoom.SetAndSavePanoramaImage(System.Windows.Media.Imaging.BitmapImage)">
      <summary>
            Set the panorama image
            - Save the panorama image to the disc.
            - Raise event, panorama image changed. 
            </summary>
      <param name="bitmapImage">
      </param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.IPanoramaRoom.CreateAddRegion">
      <summary>
            This function create the region, and add it to the regions list.
            The add needs to be here, because the region path is depending on the file system.
            </summary>
      <returns>The created region</returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.IPanoramaRoom.DeleteRegion(LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegion)">
      <summary>
            Delete the region
            </summary>
      <param name="region">
      </param>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.Panorama.IPanoramaRoom.Regions">
      <summary>
            Get the panorama regions
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.Panorama.IPanoramaRoom.Enabled">
      <summary>
            When set enabled = true, the Panorama, and the regions are loaded
            When enabled = false, The panorama is unloaded. all regions are unloaded.
            
            The regions, and panorama image are deleted from the disc
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.Panorama.IPanoramaRoom.IsPanoramaExistingOnTheDisc">
      <summary>
            Determinate if the panorama is existing on the disc.
            This is used to check if the load icon needs to be shown.
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.Panorama.IPanoramaRoom.PanoramaSize">
      <summary>
            Return the size of the panorama image.
            If the panorama image is not existing, return Size.Empty
            </summary>
    </member>
    <member name="E:LMF.Tracker.OVC.Scanning.Controls.Panorama.IPanoramaRoom.PanoramaImageChanged">
      <summary>
            Raised, when panorama image changed.
            </summary>
    </member>
    <member name="E:LMF.Tracker.OVC.Scanning.Controls.Panorama.IPanoramaRoom.RegionsChanged">
      <summary>
            Raised when regions changed
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Panorama.PanoramaRoom">
      <summary>
            This class holds the panorama data
            1. For the design
            2. For the already created panorama.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.PanoramaRoom.CreateLoadRegions">
      <summary>
            Load the data from the disk to panorama room
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.PanoramaRoom.SavePanoramaImage">
      <summary>
            Save current panorama image to the disc
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Builder.IPanoramaBuilder.Init(System.Drawing.Size,System.Windows.Size)">
      <summary>
            Initialize the panorama builder before execute
            </summary>
      <param name="outputDrawingSize">The output panorama image bitmap size</param>
      <param name="ovcFieldOfViewSize">The fielf of view for camera.</param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Builder.IPanoramaBuilder.Execute(System.Windows.Media.Imaging.BitmapImage,System.Double,System.Double,System.Windows.Media.Imaging.BitmapImage)">
      <summary>
            Build the panorama
            </summary>
      <param name="Image">
      </param>
      <param name="h">
      </param>
      <param name="v">
      </param>
      <param name="existingPanoramaImage">The existing panorama image, which will be combined with the rendered image</param>
      <returns>
      </returns>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Panorama.Builder.PanoramaBuilder">
      <summary>
            This class know how to build the panorama
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Builder.Algorithm.IRectangleRenderAlgorithm.MapImageToRect(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},LMF.Tracker.OVC.Scanning.Controls.Panorama.Builder.Algorithm.enumOrientation)">
      <summary>
      </summary>
      <param name="wpfRectangleHvdPoints">source hvd points defining the rectangle containing from 2 triangles
            Note the (V) is comparing to tracker cord system increased on 90, because tracked cord system is moved +90 to wpf system.
            This is need that the transfer cartesian=&gt; hvd functions are correctly working.</param>
      <param name="orientation">
      </param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Builder.Algorithm.IRectangleRenderAlgorithm.XyzToHvdDeg(System.Windows.Media.Media3D.Point3D)">
      <summary>
            Convert the cartesian (xyz) to Hvd in deg 
            </summary>
      <param name="xyz">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Builder.Algorithm.IRectangleRenderAlgorithm.HvdInDegToXyz(System.Windows.Media.Media3D.Point3D)">
      <summary>
            Convert Hvd in deg to cartesian (xyz)
            </summary>
      <param name="hvdInDeg">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Builder.Algorithm.RectangleRenderAlgorithm.#ctor(System.Boolean)">
      <summary>
            ctr
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Builder.Algorithm.SphericalPoint2D.#ctor(System.Double,System.Double)">
      <summary>
      </summary>
      <param name="theta">azimuthal angle θ (theta) [horizontal]</param>
      <param name="phi">polar angle φ (phi) [vertical]</param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Builder.Algorithm.SphericalPoint2D.ToString">
      <summary>
            Creates a <see cref="T:System.String" /> representation of this
            <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.
            </summary>
      <returns>
            A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Media3D.Point3D.X" />,
            <see cref="P:System.Windows.Media.Media3D.Point3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Point3D.Z" />
            values of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.
            </returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Builder.Algorithm.SphericalPoint2D.ToString(System.IFormatProvider)">
      <summary>
            Creates a <see cref="T:System.String" /> representation of this
            <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.
            </summary>
      <param name="provider">The culture-specific formatting information.</param>
      <returns>
            A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Media3D.Point3D.X" />,
            <see cref="P:System.Windows.Media.Media3D.Point3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Point3D.Z" />
            values of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.
            </returns>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.Panorama.Builder.Algorithm.SphericalPoint2D.Theta">
      <summary>Gets or sets the theta-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>The theta-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</returns>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.Panorama.Builder.Algorithm.SphericalPoint2D.Phi">
      <summary>Gets or sets the phi-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>The phi-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</returns>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Panorama.Builder.Renderer.FlatRenderer">
      <summary>
            This class know how to render panorama without modification of images.
            The images are placed to the panorama as they come, without applying any transformation.
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Panorama.Builder.Renderer.RendererPanoramaImage">
      <summary>
            This is dto object for the one panorama image. 
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Panorama.Builder.Renderer.RectangleRenderer">
      <summary>
            This class know how to render panorama image, and apply 2 tringels (one rect) transformation.
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Panorama.Builder.Renderer.StarPanoramaRenderer">
      <summary>
            This class to know hoe to render panorama image with applying star transformation.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegion.AddImageDefinitionPoint(System.Windows.Media.Imaging.BitmapImage,System.Double,System.Double)">
      <summary>
             Add rectangle DefinitionPoint, and Image
             - Add new point to the list.
             - Notify subscriber, that the rectangle needs to be recalculated.
            
              - Generate new panorama image
             - Replace panoramaImage on disc
             - Save original image with HV to Disc
             - Raise event, panorama image changed.
             </summary>
      <param name="image">
      </param>
      <param name="h">
      </param>
      <param name="v">
      </param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegion.RemoveLastImageDefinitionPoint">
      <summary>
             Remove rectangle DefinitionPoint, and Image
             - Remove point from the list list.
             - Notify subscriber, that the rectangle needs to be recalculated.
            
             - Remove image with HV on the Disc
                                //- Raise event, panorama image changed.
             </summary>
      <returns>
             True if remove was successful (there was point which can be removed)
             False remove unsuccessful. The points count == 0
             </returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegion.AddImageToPanorama(System.Windows.Media.Imaging.BitmapImage,System.Double,System.Double,System.Double)">
      <summary>
             Add Image to the panorama
             - Generate new panorama image
            
             - Replace panoramaImage on disc
             - Save original image with HV to Disc
             - Raise event, panorama image changed.
             </summary>
      <param name="image">
      </param>
      <param name="h">
      </param>
      <param name="v">
      </param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegion.AddImageToPanoramaWithoutSaving(System.Byte[],System.Double,System.Double)">
      <summary>
             Add Image to the panorama
             - Generate new panorama image
             - The image + hv are not saved to the disc.
            
             - Replace panoramaImage on disc
             - Raise event, panorama image changed.
             </summary>
      <param name="arrayBitmap">
      </param>
      <param name="h">
      </param>
      <param name="v">
      </param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegion.CleanRegionImages">
      <summary>
             Clean region images.
             - Delete all stored region images.
             - The panoramaImages.dat is deleted
             
             - The Rectangle definition is not deleted
             - Raise event, panorama image changed.
            
             The function is called before rescan panorama
             </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegion.CleanAllRegionData">
      <summary>
            Clean the whole region directory.
            
            This function is called, when the region is deleted.
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegion.TemPoint3D">
      <summary>
            Get the tmp point.
            This point is used in edit mode to temporary change the RectangleDefinition.
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegion.DefinitionPoints">
      <summary>
            Get the list of definition points (without active point)
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegion.RectangleDefinition">
      <summary>
            Get the current rectangle definition calculated from DefinitionPoint's
            When loaded from the disk, the DefinitionPoint's are filled with 2 points.
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegion.RectangleDefinitionWithoutWorkingPoint">
      <summary>
            Get the current rectangle definition calculated from DefinitionPoint's, without TempPoint
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegion.DirectoryName">
      <summary>
            Get the directory name of the region. This is used as the name in the UI
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegion.PanoramaRegionImageManager">
      <summary>
            Get the filename with path of the ImagesDefinitionFileName
            </summary>
    </member>
    <member name="E:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegion.RectangleDefinitionChanged">
      <summary>
            Raised, when the rectangle DefinitionPoint is added or removed.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.PanoramaRegion.Load">
      <summary>
            Load the panorama data (if existing ) to the memory
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.PanoramaRegion.Init">
      <summary>
            This function is called, when the region is not loaded. The Directory is created.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.PanoramaRegion.AddRectangleDefinitionPoint(System.Double,System.Double)">
      <summary>
            Add rectangle DefinitionPoint.
            - Add new point to the list.
            - Notify subscriber, that the rectangle needs to be recalculated.
            </summary>
      <param name="h">
      </param>
      <param name="v">
      </param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegionImageManager.Load">
      <summary>
            Load the items from the file
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegionImageManager.Add(LMF.Tracker.OVC.Scanning.Tools.StableProbing.IhvImage)">
      <summary>
            Add the hvImage to the definition file
            - Save the file to the disc
            - Save the definition file
            </summary>
      <param name="hvImage">
      </param>
      <returns>The IPanoramaRegionImage </returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegionImageManager.Remove(LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegionImage)">
      <summary>
            Remove the panoramaRegionImage from the list
            - Delete the image file on the disc
            - Save the new definition file.
            </summary>
      <param name="panoramaRegionImage">
      </param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegionImageManager.DeleteAllImages">
      <summary>
            Delete all images from the disc.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegionImageManager.CleanImageDefinitions">
      <summary>
            Clean image definitions, and delete definition list from disc
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegionImageManager.Items">
      <summary>
            Get the items
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.IPanoramaRegionImageManager.RegionPath">
      <summary>
            Get the full path to the region/scene
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.PanoramaRegionImageManager.CleanImageDefinitions">
      <summary>
            Clean image definitions, and delete definition list from disc
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Panorama.Model.PanoramaRegionRectangleDefinitionManager">
      <summary>
            This class know how to save and restore Rectangle definition
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Panorama.ImageProvider.RegionDiscPanoramaImageProvider">
      <summary>
            This class simulate image provider from already existing images on the disc.
            With this class can be reproduced the creating of the panorama image.
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Panorama.ImageProvider.TrackerPanoramaImageProvider">
      <summary>
            This class decouple the incoming images from the panorama image processing
            The incoming images are stored to the tmpImage directory.
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Panorama.Extensions.ImageHeaderDecoder">
      <summary>
            This class know how to get width, and the height of the image, without reading the whole image file.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Extensions.ImageHeaderDecoder.GetDimensions(System.String)">
      <summary>
            Gets the dimensions of an image.
            </summary>
      <param name="path">The path of the image to get the dimensions of.</param>
      <returns>The dimensions of the specified image.</returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Panorama.Extensions.ImageHeaderDecoder.GetDimensions(System.IO.BinaryReader)">
      <summary>
            Gets the dimensions of an image.
            </summary>
      <param name="binaryReader">The path of the image to get the dimensions of.</param>
      <returns>The dimensions of the specified image.</returns>
      <exception cref="T:System.ArgumentException">The image was of an unrecognized format.</exception>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Common.AbstractProfileEditor.Undo">
      <summary>
            Remove (undo) the last point.
            True,  When the operation was successful (there was point on which can be undo)
            False, There is no point for undo.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Common.AbstractProfileEditor.DeleteSelected">
      <summary>
            Delete the current selected point.
            True, When the operation was successful (there was point which was deleted)
            False, There is no point for delete.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.Common.IDropDownToolbarControl.SelectedItem">
      <summary>
            Set/Get the active button
            </summary>
    </member>
    <member name="E:LMF.Tracker.OVC.Scanning.Controls.Common.IDropDownToolbarControl.SelectedItemChanged">
      <summary>
            Raised, when the SelectedItem changed
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Common.DropDownToolbarControl">
      <summary>
            Interaction logic for DropDownToolbarControl.xaml
            </summary>
      <summary>
            DropDownToolbarControl
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Common.DropDownToolbarControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Common.EnumSelectionControl">
      <summary>
            Interaction logic for EnumSelectionControl.xaml
            </summary>
      <summary>
            EnumSelectionControl
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Common.EnumSelectionControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Common.PopupContainerControl">
      <summary>
            Interaction logic for PopupContainerControl.xaml
            </summary>
      <summary>
            PopupContainerControl
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Common.PopupContainerControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Common.PopupToolbarButton.#ctor">
      <summary>
            Ctr for the UI
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Common.PopupToolbarButton.#ctor(System.Windows.UIElement,System.Windows.Controls.Dock,System.Int32,System.String,Leica.Resources.ELeicaImages,System.Boolean,System.Nullable{Leica.Resources.ELeicaImages})">
      <summary>
             create instance of PopupToolbarButton
             </summary>
      <param name="popupContent">The content of the popup, which should be shown</param>
      <param name="popupDirection">The direction of the popup</param>
      <param name="popupOffset">Offset of the popup</param>
      <param name="toolTip">The button tooltip</param>
      <param name="iconResourceName">The button Icon resource name</param>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.Common.IPopupToolbarControl.SelectedItem">
      <summary>
            Set/Get the active button
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Common.PopupToolbarControl">
      <summary>
            Interaction logic for PopupToolbarControl.xaml
            </summary>
      <summary>
            PopupToolbarControl
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Common.PopupToolbarControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Common.ToolbarButton">
      <summary>
            Interaction logic for ToolBarButton.xaml
            </summary>
      <summary>
            ToolbarButton
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Common.ToolbarButton.Init(System.String,Leica.Resources.ELeicaImages,System.Windows.RoutedEventHandler,System.Boolean,System.Nullable{Leica.Resources.ELeicaImages})">
      <summary>
            This function will initialize the button from the properties (like in the constructor).
            This function is called when the button was already created e.g. in design, and needs to be initialized like in ctr.
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Common.ToolbarButton.Update(System.String,Leica.Resources.ELeicaImages)">
      <summary>
            Update the properties of the button
            </summary>
      <param name="toolTip">
      </param>
      <param name="iconResourceName">
      </param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Common.ToolbarButton.SetCheckedWithClickAction(System.Boolean)">
      <summary>
            Set checked, to the correct value, and call the clicked action
            </summary>
      <param name="checkedValue">
      </param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Common.ToolbarButton.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Common.IToolbarControl.AddButton(System.Windows.FrameworkElement)">
      <summary>
            Add button to the toolbar
            </summary>
      <param name="buttonDefinition">
      </param>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Common.IToolbarControl.RemoveButton(System.Windows.Controls.UserControl)">
      <summary>
            Remove button from the toolbar
            </summary>
      <param name="buttonDefinition">
      </param>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.Common.IToolbarControl.Visible">
      <summary>
            Set the visibility of the toolbar
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.Common.IToolbarControl.Orientation">
      <summary>
            Get or set the orientation of the toolbar
            </summary>
    </member>
    <member name="P:LMF.Tracker.OVC.Scanning.Controls.Common.IToolbarControl.Distance">
      <summary>
            Get or set the distance between the buttons
            </summary>
    </member>
    <member name="T:LMF.Tracker.OVC.Scanning.Controls.Common.ToolBarControl">
      <summary>
            Interaction logic for ToolBarControl.xaml
            </summary>
      <summary>
            ToolBarControl
            </summary>
    </member>
    <member name="M:LMF.Tracker.OVC.Scanning.Controls.Common.ToolBarControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.MeasurementArrivedEventArgs">
      <summary>
            A collection for all kind of <see cref="T:LMF.Tracker.MeasurementResults.Measurement" />.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.MeasurementSettings">
      <summary>
            Class which sets and gets settings for taking measurements.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.MeasurementSettings.StartMeasurement">
      <summary>
            Starts a new measurement.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.MeasurementSettings.StopMeasurement">
      <summary>
            Stops the current measurement.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.MeasurementSettings.MeasureStationary">
      <summary>
            Measures stationary and returns a measurement.
            </summary>
      <returns>A Measurement object with the results.</returns>
    </member>
    <member name="M:LMF.Tracker.Measurements.MeasurementSettings.DeliverMeasurementCollection(LMF.Tracker.MeasurementResults.MeasurementCollection)">
      <summary>
            Helper function to add a measurement collection to the LmfWorkerQueue that delivers it to the
            customer preserving the order of the measurement collections.
            </summary>
      <param name="collection">
      </param>
    </member>
    <member name="M:LMF.Tracker.Measurements.MeasurementSettings.GoAndMeasureStationary(LMF.Tracker.Targets.LockOnToken,System.Boolean,System.Double,System.Double,System.Double)">
      <summary>
            Optimized version to position the tracker to the wanted position and target and to do a stationary measurement
            on the given target or face.
            The optimization is available for the AT9x0 series. For the AT90x and AT40x series the command is also available but is
            not optimized for speed. In that case the given target or probe face is ignored.
            It needs a lockOnToken that denotes a target or a face of a probe to lock on. Using this lockOnToken the tracker directly
            tries to lock on to this target or face instead of detecting it. This saves the detection time.
            The lockOnToken can be received by calling GetLockOnToken either on a target or a probe face.
            In case the lockOnToken is invalid the positioning fails. In case the lockOnToken denotes a different
            target or face from the one that resides at the given position the tracker starts the detection procedure
            and returns the one that is detected at this position. This slows the command down.
            Once the positioning has been successful, the tracker directly starts a stationary measurement using
            the given or detected target. It uses the selected accuracy if the stationary measurement profile is selected but never does
            a two face measurement. In case a different measurement profile is selected, the command takes the stationary one
            with the standard accuracy.
            Using this command the positioning and the stationary measurement are combined and faster therefore.
            The command sets the preselected target to the one given with the lockOnToken if it is a reflector.
            In case the given coordinates are not precise enough the command slows down or fails.
            The command is useful for automation cases where several targets with a given position have to be measured as fast as possible.
            To be able to reach the target the user has to provide a complete set of coordinates. They may either be absolute or relative.
            The relative ones are only allowed using the spherical coordinate system (HVD). Otherwise the command fails.
            </summary>
      <param name="lockOnToken">The LockOnToken of the target to be found at the given position</param>
      <param name="isRelative">if true, the specified position is interpreted as relative to the actual position.
            ATTENTION: If isRelative is 'true', the specified position must be in the spherical coordinate system
            Set coordinate type <see cref="F:LMF.Units.ECoordinateType.Spherical" /> on the "CoordinateType" property on the
            <see cref="P:LMF.Tracker.Tracker.Settings" /> class object
            </param>
      <param name="pos1">the 1st component of the specified position in the actual set customer coordinate system</param>
      <param name="pos2">the 2nd component of the specified position in the actual set customer coordinate system</param>
      <param name="pos3">the 3rd component of the specified position in the actual set customer coordinate system</param>
      <returns>Returns a measurement if the target was found and the measurement could be done, null otherwise.  In case
            no lockOnToken is provided (parameter is null) the function throws an exception.</returns>
    </member>
    <member name="M:LMF.Tracker.Measurements.MeasurementSettings.GoAndMeasureStationaryAsync(LMF.Tracker.Targets.LockOnToken,System.Boolean,System.Double,System.Double,System.Double)">
      <summary>
            Asynchronous version of the GoAndMeasureStationary command
            </summary>
      <param name="lockOnToken">The LockOnTocken object of the target to be found at the given position</param>
      <param name="isRelative">if true, the specified position is interpreted as relative to the actual position</param>
      <param name="pos1">the 1st component of the specified position in the actual set customer coordinate system</param>
      <param name="pos2">the 2nd component of the specified position in the actual set customer coordinate system</param>
      <param name="pos3">the 3rd component of the specified position in the actual set customer coordinate system</param>
    </member>
    <member name="M:LMF.Tracker.Measurements.MeasurementSettings.CheckMeasurementPrecondition">
      <summary>
            This function check if measurement can be started. If not, the exception is send to the tracker.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:LMF.Tracker.Measurements.MeasurementSettings.Profiles">
      <summary>
            Gets all available measurement profiles.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.MeasurementSettings.Status">
      <summary>
            Gets the status of the tracker (ready, not ready or measuring).
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.MeasurementSettings.MeasurementInProgress">
      <summary>
            Gets the <see cref="T:LMF.Tracker.BasicTypes.BoolValue.ReadOnlyBoolValue" /> which determines if there is a measurement ongoing.
            </summary>
    </member>
    <member name="E:LMF.Tracker.Measurements.MeasurementSettings.MeasurementArrived">
      <summary>
            After starting a measurement there can be received the MeasurementArrived. 
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.MeasurementProfile">
      <summary>
            Base class for all measurementprofiles in LMF.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Measurements.MeasurementProfile._pointsCount">
      <summary>
            Get/set the points count
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.MeasurementProfile.Select">
      <summary>
            Selects the desired measurementprofile and sets it active.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.MeasurementProfile.Name">
      <summary>
            Gets the name of the measurementprofile.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.MeasurementProfile.AllowResultToDroGrid">
      <summary>
            Determinate if the result measurements points will be shown in DRO grid
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.MeasurementProfileCollection.Selected">
      <summary>
            Gets the selected measurement profile.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.MeasurementProfileCollection.Count">
      <summary>
            Gets number of elements in the collection.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.MeasurementProfileCollection.Item(System.Int32)">
      <summary>
            Get the desired mearuement profile.
            </summary>
      <param name="index">
      </param>
      <returns>The index determines in which range the profile is.</returns>
    </member>
    <member name="E:LMF.Tracker.Measurements.MeasurementProfileCollection.SelectedChanged">
      <summary>
            Occurs if the selected profile changed.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Perimeters.PolyLine.Delete">
      <summary>
            Removes the polyline from the collection
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Perimeters.PolyLine.Points">
      <summary>
            Gets the collection of points in the polyline
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Perimeters.PolyLine.IsValid">
      <summary>
            A polyline is valid for a line scan if it contains at least 2 points.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Perimeters.PolyLineCollection">
      <summary>
            A class representing a collection of PolyLine instances
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Perimeters.PolyLineCollection.GetEnumerator">
      <summary>
            Returns an enumerator from a cloned collection that iterates through the collection.
            </summary>
      <returns>Returns an enumerator from type PolyLine.</returns>
    </member>
    <member name="M:LMF.Tracker.Measurements.Perimeters.PolyLineCollection.AddPolyLine">
      <summary>
            Creates and adds a new PolyLine to the list of polylines
            </summary>
      <returns>The created PolyLine</returns>
    </member>
    <member name="P:LMF.Tracker.Measurements.Perimeters.PolyLineCollection.Count">
      <summary>
            Gets the number of elements actually contained in the Collection.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Perimeters.PolyLineCollection.Item(System.Int32)">
      <summary>
            Gets a <see cref="T:LMF.Tracker.Measurements.Perimeters.PolyLine" /> element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>Element at specified index.</returns>
    </member>
    <member name="P:LMF.Tracker.Measurements.Perimeters.PerimeterDefinition.IsInclusion">
      <summary>
            Gets/Sets the flag if the actual perimeter definition is included or excluded in the union of all perimeter definitions of that region
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Perimeters.PerimeterDefinition.IsValid">
      <summary>
            The base class of the perimeters is never valid for a scan as it is only an abstract base for the concrete perimeter elements.
            Flagging it as abstract is impossible as the COM interface does not support that.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Perimeters.PerimeterDefinitionCollection">
      <summary>
            A class holding all input points for later alignment calculations
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Perimeters.PerimeterDefinitionCollection.GetEnumerator">
      <summary>
            Returns an enumerator from a cloned collection that iterates through the collection.
            </summary>
      <returns>Returns an enumerator from type PerimeterDefinition.</returns>
    </member>
    <member name="M:LMF.Tracker.Measurements.Perimeters.PerimeterDefinitionCollection.AddPolygon">
      <summary>
            Creates and adds a new BoundaryPolygon to the list of perimeter definitions
            </summary>
      <returns>The created BoundaryPolygon</returns>
    </member>
    <member name="P:LMF.Tracker.Measurements.Perimeters.PerimeterDefinitionCollection.Count">
      <summary>
            Gets the number of elements actually contained in the Collection.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Perimeters.PerimeterDefinitionCollection.Item(System.Int32)">
      <summary>
            Gets a <see cref="T:LMF.Tracker.Measurements.Perimeters.PerimeterDefinition" /> element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>Element at specified index.</returns>
    </member>
    <member name="M:LMF.Tracker.Measurements.Perimeters.BoundaryPoint.Delete">
      <summary>
            Removes the boundary point from the points collection
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Perimeters.BoundaryPoint.Coordinate1">
      <summary>
            Gets the first component of the point's coordinate
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Perimeters.BoundaryPoint.Coordinate2">
      <summary>
            Gets the second component of the point's coordinate
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Perimeters.BoundaryPoint.Coordinate3">
      <summary>
            Gets the third component of the point's coordinate
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Perimeters.BoundaryPointCollection">
      <summary>
            A class holding all input points for later alignment calculations
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Perimeters.BoundaryPointCollection.GetEnumerator">
      <summary>
            Returns an enumerator from a cloned collection that iterates through the collection.
            </summary>
      <returns>Returns an enumerator from type BoundaryPoint.</returns>
    </member>
    <member name="M:LMF.Tracker.Measurements.Perimeters.BoundaryPointCollection.AddPoint(System.Double,System.Double,System.Double)">
      <summary>
            Adds a new point to the point collection. All coordinates are interpreted as coordinates in the system which has been set by the Tracker.Settings object.
            Customer chosen coordinate systems, alignments (rotation/transformation) and unit systems do also apply.
            </summary>
      <param name="pos1">
      </param>
      <param name="pos2">
      </param>
      <param name="pos3">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:LMF.Tracker.Measurements.Perimeters.BoundaryPointCollection.Count">
      <summary>
            Gets the number of elements actually contained in the Collection.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Perimeters.BoundaryPointCollection.Item(System.Int32)">
      <summary>
            Gets a <see cref="T:LMF.Tracker.Measurements.Perimeters.BoundaryPoint" /> element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>Element at specified index.</returns>
    </member>
    <member name="M:LMF.Tracker.Measurements.Perimeters.BoundaryPolygon.Delete">
      <summary>
            Removes the boundary polygon from the perimeter collection
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Perimeters.BoundaryPolygon.Points">
      <summary>
            Gets the collection of points in the polygon
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Perimeters.BoundaryPolygon.IsValid">
      <summary>
            A boundary polygon is valid for an area scan if it contains at least 3 points (that are not on a line). Checking for a single
            line is omitted as it is not worth the effort and performance to check that yet.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Profiles.IRingCsvFileWorker`1.SetOutputDirectory(System.String)">
      <summary>
            Set the output directory where the csv file will be written.
            If the output directory is not set, the default outputDirectory is used, which was set in ctr.
            The function must be called before Initialize()
            </summary>
      <param name="outputDirectory">
      </param>
    </member>
    <member name="M:LMF.Tracker.Measurements.Profiles.IRingCsvFileWorker`1.SetOutputFileName(System.String)">
      <summary>
            Set the output file name where the csv file will be written.
            If the output file name is not set, the file name will be generated from the actual DateTime (Unique).
            The function must be called before Initialize()
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Profiles.IRingCsvFileWorker`1.Initialize">
      <summary>
            Initialize the class for starting writing to the file.
            Clean all data, and open the file for write.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Profiles.IRingCsvFileWorker`1.Terminate">
      <summary>
            de-initialize the class. Flush all not written data, and Close the file.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Profiles.IRingCsvFileWorker`1.Post(`0)">
      <summary>
            Post the data to the queue, which will be in the other thread written to the file.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Profiles.IRingCsvFileWorker`1.Post(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Post the data to the queue, which will be in the other thread written to the file.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Profiles.IRingCsvFileWorker`1.PostHeader(`0)">
      <summary>
            Post the CSV Header to the queue, this function must be called before any other Post function.
            The second call of the function will be ignored (the header can be added only one time).
            The header is possible again add after the Initialize() is called.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.IRingCsvFileWorker`1.File">
      <summary>
            Get the file, where the data are written.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.IRingCsvFileWorker`1.IsPostHeaderAllowed">
      <summary>
            Determinate if the post header was already called, or not.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Profiles.RingCsvFileWorker`1.#ctor(System.String,System.Func{`0,System.String},Leica.Logbook.ILogger)">
      <summary>
      </summary>
      <param name="conversionFunction">Function to convert T to the string, which is used to write to file</param>
    </member>
    <member name="T:LMF.Tracker.Measurements.Profiles.RingScanProfile">
      <summary>
            Inherited class of measurement profile which continuously measures points in a defined perimeter
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.RingScanProfile.EstimatedScanTime">
      <summary>
            Provides the estimate how long the scan procedure will take using the current settings.
            The estimated scan time is calculated in the background anytime a setting of the profile is changed.
            This lets the user update the settings very fast but decouples the update of the estimated time from
            the user call changing the settings.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.RingScanProfile.MinimalVerticalAngle">
      <summary>
            Defines the minimal vertical angle
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.RingScanProfile.MaximalVerticalAngle">
      <summary>
            Defines the maximal vertical angle
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.RingScanProfile.EstimatedPointsCount">
      <summary>
            Provides the estimate how many points the scan procedure will take using the current settings.
            The estimated value is calculated in the background anytime a setting of the profile is changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Profiles.LineScanProfile">
      <summary>
      </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.LineScanProfile.EstimatedScanTime">
      <summary>
            Provides the estimate how long the scan procedure will take using the current settings.
            The estimated scan time is calculated in the background anytime a setting of the profile is changed.
            This lets the user update the settings very fast but decouples the update of the estimated time from
            the user call changing the settings.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.LineScanProfile.Accuracy">
      <summary>
            Gets the accuracy value object as return value <see cref="T:LMF.Tracker.BasicTypes.EnumTypes.AccuracyValue" />.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.LineScanProfile.Lines">
      <summary>
            Defines the scanning traverses
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Profiles.AbstractScanProfile">
      <summary>
            Inherited class of measurementprofile which measures points in a defined perimeter in a stop and go way
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.AbstractScanProfile.EstimatedScanTime">
      <summary>
            Provides the estimate how long the scan procedure will take using the current settings.
            The estimated scan time is calculated in the background anytime a setting of the profile is changed.
            This lets the user update the settings very fast but decouples the update of the estimated time from
            the user call changing the settings.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.AbstractScanProfile.Regions">
      <summary>
            Defines the scanning perimeter
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Profiles.AreaScanProfile">
      <summary>
            Inherited class of measurementprofile which measures points in a defined perimeter.
            The PacketRate, DistanceSnr and the exact measurement time are internal parameters. They are not
            put into the profile for the customer. The measurement time is derived from the accuracy.
            The deltaL, deltaQ are derived from the point to point distance. The roll angle is always set to 0.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.AreaScanProfile.Accuracy">
      <summary>
            Gets the accuracy value object as return value <see cref="T:LMF.Tracker.BasicTypes.EnumTypes.AccuracyValue" />.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.AreaScanProfile.Filters">
      <summary>
            List of filters for this profile
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Profiles.CustomTriggerProfile">
      <summary>
            The custom trigger profile contains all settings needed to do internal and external triggered measurements.
            For touch trigger measurements, please use the <see cref="T:LMF.Tracker.Measurements.Profiles.TouchTriggerProfile" /></summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Profiles.CustomTriggerProfile.TriggeredMeasurementsArrivedHandler">
      <summary>
            Event handler of the<see cref="E:LMF.Tracker.Measurements.Profiles.CustomTriggerProfile.TriggeredMeasurementsArrived" /> event
            </summary>
      <param name="sender">Profile</param>
      <param name="paramMeasurements">measurements</param>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.CustomTriggerProfile.ClockSource">
      <summary>
            Defines measurements are triggered based on internal settings or on external signals.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.CustomTriggerProfile.StartStopActiveLevel">
      <summary>
            The start/stop signal can be either low or high active (low active means low = start condition). Default is low.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.CustomTriggerProfile.StartStopSource">
      <summary>
            Defines whether the <see cref="P:LMF.Tracker.Measurements.Profiles.CustomTriggerProfile.StartStopActiveLevel" /> is used.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.CustomTriggerProfile.ClockTransmission">
      <summary>
            The clock signal can be configured to work either with the positive or the negative clock transmission. Default is negative transmission.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.CustomTriggerProfile.MinimalTimeDelay">
      <summary>
            While using a real-time trigger mode based on external clock the maximal data rate (minimal delay between 2 points) can be defined.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.CustomTriggerProfile.PacketRate">
      <summary>
            Determines the maximum number of measurement packets per second.
            </summary>
    </member>
    <member name="E:LMF.Tracker.Measurements.Profiles.CustomTriggerProfile.TriggeredMeasurementsArrived">
      <summary>
            Occurs when a triggered measurement has arrived.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Profiles.OutdoorProfile">
      <summary>
            Inherited class of <see cref="T:LMF.Tracker.Measurements.MeasurementProfile" /> which can be used/selected for outdoor measurements.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Profiles.CustomStationaryMeasurementProfile">
      <summary>
            Custom Stationary Measurement profile is used to perform stationary measurements using a custom measurement time.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.CustomStationaryMeasurementProfile.Time">
      <summary>
            Custom Measurement Time
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Profiles.ContinuousDistanceProfile">
      <summary>
            Inherited class of measurementprofile which continously measures between two points with defined distance separation
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.ContinuousDistanceProfile.DistanceSeparation">
      <summary>
            Represents the distance in baseunits between two measurements.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Profiles.ContinuousTimeProfile">
      <summary>
            Inherited class of measurementprofile which continously measures between defined time with defined timeseparation.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.ContinuousTimeProfile.TimeSeparation">
      <summary>
            Represents the timeseparation in baseunits between two measurements.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.ContinuousTimeProfile.PacketRate">
      <summary>
            Determines the maximum number of measurement packets per second. Has no effect on AT901 trackers.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Profiles.TouchTriggerProfile">
      <summary>
            Inherited class of <see cref="T:LMF.Tracker.Measurements.MeasurementProfile" /> which can be used if user is working with TouchTrigger.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Profiles.StationaryMeasurementProfile">
      <summary>
            Inherited class of <see cref="T:LMF.Tracker.Measurements.MeasurementProfile" /> which can be used/selected for stationary measurements.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.StationaryMeasurementProfile.Accuracy">
      <summary>
            Gets the accuracy value object as return value <see cref="T:LMF.Tracker.BasicTypes.EnumTypes.AccuracyValue" />.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Profiles.StationaryMeasurementProfile.TwoFace">
      <summary>
            Gets and sets a <see cref="T:LMF.Tracker.BasicTypes.BoolValue.BoolValue" /> which defines if should be TwoFace measurements done.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.IScanToCsvFileWorker.SetOutputDirectory(System.String)">
      <summary>
            Set the output directory where the csv file will be written.
            If the output directory is not set, the default outputDirectory is used, which was set in ctr.
            The function must be called before Initialize()
            </summary>
      <param name="outputDirectory">
      </param>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.IScanToCsvFileWorker.SetOutputFileName(System.String)">
      <summary>
            Set the output file name where the csv file will be written.
            If the output file name is not set, the file name will be generated from the actual DateTime (Unique).
            The function must be called before Initialize()
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.IScanToCsvFileWorker.Initialize">
      <summary>
            Initialize the class for starting writing to the file.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.IScanToCsvFileWorker.Terminate">
      <summary>
            de-initialize the class. Flush all not written data, and Close the file.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.IScanToCsvFileWorker.PostCurrentUnitsData(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Post the data to the queue, which will be in the other thread written to the file.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.IScanToCsvFileWorker.PostCurrentUnitsHeader(System.String)">
      <summary>
            Post the CSV Header to the queue, this function must be called before any other Post function.
            The second call of the function will be ignored (the header can be added only one time).
            The header is possible again add after the Initialize() is called.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.IScanToCsvFileWorker.PostBaseUnitsData(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Same as <see cref="M:LMF.Tracker.Measurements.Scanning.IScanToCsvFileWorker.PostCurrentUnitsData(System.Collections.Generic.IEnumerable{System.String})" />, but for the base units.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.IScanToCsvFileWorker.PostBaseUnitsHeader(System.String)">
      <summary>
            Same as <see cref="M:LMF.Tracker.Measurements.Scanning.IScanToCsvFileWorker.PostCurrentUnitsHeader(System.String)" />, but for the base units.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Scanning.IScanToCsvFileWorker.File">
      <summary>
            Get the file, where the data are written.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Scanning.IScanToCsvFileWorker.IsCurrentUnitsHeaderPosted">
      <summary>
            Determinate if the IsCurrentUnitsHeaderPosted was already called or no.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Scanning.IScanToCsvFileWorker.IsBaseUnitsHeaderPosted">
      <summary>
            Same as <see cref="P:LMF.Tracker.Measurements.Scanning.IScanToCsvFileWorker.IsCurrentUnitsHeaderPosted" />, but for the base units.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Scanning.ELineChangedHint">
      <summary>
            Gives hint about why region changed event happened
            </summary>
    </member>
    <member name="F:LMF.Tracker.Measurements.Scanning.ELineChangedHint.Programmatically">
      <summary>
            Changed event happened from programmatic use of the LMF interface
            </summary>
    </member>
    <member name="F:LMF.Tracker.Measurements.Scanning.ELineChangedHint.Manually">
      <summary>
            Changed event happened after some manual manipulation in the OVC scanning dialog
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Scanning.ScanningLineCollection">
      <summary>
            A class holding all input points for later alignment calculations
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Scanning.ScanningLineCollection.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.Measurements.Scanning.ScanningLineCollection.Changed" /> event.
            </summary>
      <param name="sender">Sender object</param>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.ScanningLineCollection.GetEnumerator">
      <summary>
            Returns an enumerator from a cloned collection that iterates through the collection.
            </summary>
      <returns>Returns an enumerator from type ScanningRegion.</returns>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.ScanningLineCollection.AddLine">
      <summary>
            Creates a new line and adds it to the collection
            </summary>
      <returns>The created line</returns>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.ScanningLineCollection.RefreshGUI">
      <summary>
            Refreshes the Scannind Dialog GUI if the scannind OVC dialog is already open to reflect the recent changes in the regions
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Scanning.ScanningLineCollection.Count">
      <summary>
            Gets the number of elements actually contained in the Collection.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Scanning.ScanningLineCollection.Item(System.Int32)">
      <summary>
            Gets a <see cref="T:LMF.Tracker.Measurements.Scanning.ScanningLine" /> element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>Element at specified index.</returns>
    </member>
    <member name="E:LMF.Tracker.Measurements.Scanning.ScanningLineCollection.Changed">
      <summary>
            Occurs when something on the lines in the collection has changed
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Scanning.ScanningLineCollectionChangedEventArgs.Hint">
      <summary>
            Tells the reason why the 'Changed' event happened
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Scanning.ScanningLine.PositionToCenterFinishedHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.Measurements.Scanning.ScanningLine.PositionToCenterFinished" /> event
            </summary>
      <param name="sender">ScanningLine</param>
      <param name="ex">Exception if something went wrong</param>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.ScanningLine.PositionToCenter">
      <summary>
            Positions the tracker head into the geometrical center of the scanning line
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.ScanningLine.PositionToCenterAsync">
      <summary>
                Positions the tracker head into the geometrical center of the scanning line asynchronously
                The PositionToCenterFinished Event is raised when finished.
                <see cref="E:LMF.Tracker.Measurements.Scanning.ScanningLine.PositionToCenterFinished" /></summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.ScanningLine.Delete">
      <summary>
            Removes the scanning line from the lines collection
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Scanning.ScanningLine.PolyLines">
      <summary>
            Contains all polylines that are added to the scanning line.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Scanning.ScanningLine.Mode">
      <summary>
            Defines the mode for scanning the lines
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Scanning.ScanningLine.PointToPointDistance">
      <summary>
            Gets the point to point distance object where you can define the distance between two points on the scanline
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Scanning.ScanningLine.LineToLineDistance">
      <summary>
            Gets the line to line distance object where you can define the distance between two scan lines
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Scanning.ScanningLine.LineWidth">
      <summary>
            Defines the width of the scanning line which is used in the cross line mode
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Scanning.ScanningLine.GetsScanned">
      <summary>
            Gets/Sets the flag if the actual scanning line will be scanned or not
            </summary>
    </member>
    <member name="E:LMF.Tracker.Measurements.Scanning.ScanningLine.PositionToCenterFinished">
      <summary>
            This event is fired when the PositionToCenter procedure is finished
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Scanning.ERegionChangedHint">
      <summary>
            Gives hint about why region changed event happened
            </summary>
    </member>
    <member name="F:LMF.Tracker.Measurements.Scanning.ERegionChangedHint.Programmatically">
      <summary>
            Changed event happened from programmatic use of the LMF interface
            </summary>
    </member>
    <member name="F:LMF.Tracker.Measurements.Scanning.ERegionChangedHint.Manually">
      <summary>
            Changed event happened after some manual manipulation in the OVC scanning dialog
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Scanning.ScanningRegion.PositionToCenterFinishedHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.Measurements.Scanning.ScanningRegion.PositionToCenterFinished" /> event
            </summary>
      <param name="sender">ScanningRegion</param>
      <param name="ex">Exception if something went wrong</param>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.ScanningRegion.PositionToCenter">
      <summary>
            Positions the tracker head into the geometrical center of the scanning region
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.ScanningRegion.PositionToCenterAsync">
      <summary>
                Positions the tracker head into the geometrical center of the scanning region asynchronicaly
                The PositionToCenterFinished Event is raised when finished.
                <see cref="E:LMF.Tracker.Measurements.Scanning.ScanningRegion.PositionToCenterFinished" /></summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.ScanningRegion.Delete">
      <summary>
            Removes the scanning region from the regions collection
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Scanning.ScanningRegion.Perimeters">
      <summary>
            Contains all perimeters that are added to the scanning region.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Scanning.ScanningRegion.PointToPointDistance">
      <summary>
            Gets the point to point distance object where you can define the distance between two points on the scanline
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Scanning.ScanningRegion.LineToLineDistance">
      <summary>
            Gets the line to line distance object where you can define the distance between two scan lines
            In the AreaScanProfile is this value ignored, and only <see cref="P:LMF.Tracker.Measurements.Scanning.ScanningRegion.PointToPointDistance" /> is used.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Scanning.ScanningRegion.GrowShrinkWidth">
      <summary>
            Gets the grow/shrink width object where you can define the width to grow/shrink the region
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Scanning.ScanningRegion.DeltaL">
      <summary>
            Settings applied to the region in case it is changed and reevaluated internally.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Scanning.ScanningRegion.GetsScanned">
      <summary>
            Gets/Sets the flag if the actual scanning region will be scanned or not
            </summary>
    </member>
    <member name="E:LMF.Tracker.Measurements.Scanning.ScanningRegion.PositionToCenterFinished">
      <summary>
            This event is fired when the PositionToCenter procedure is finished
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Scanning.ScanningRegionCollection">
      <summary>
            A class holding all input points for later alignment calculations
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Scanning.ScanningRegionCollection.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.Measurements.Scanning.ScanningRegionCollection.Changed" /> event.
            </summary>
      <param name="sender">Sender object</param>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.ScanningRegionCollection.GetEnumerator">
      <summary>
            Returns an enumerator from a cloned collection that iterates through the collection.
            </summary>
      <returns>Returns an enumerator from type ScanningRegion.</returns>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.ScanningRegionCollection.AddRegion">
      <summary>
            Creates a new region and adds it to the collection
            </summary>
      <returns>The created region</returns>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.ScanningRegionCollection.RefreshGUI">
      <summary>
            Refreshes the Scannind Dialog GUI if the scannind OVC dialog is already open to reflect the recent changes in the regions
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Scanning.ScanningRegionCollection.Count">
      <summary>
            Gets the number of elements actually contained in the Collection.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Scanning.ScanningRegionCollection.Item(System.Int32)">
      <summary>
            Gets a <see cref="T:LMF.Tracker.Measurements.Scanning.ScanningRegion" /> element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>Element at specified index.</returns>
    </member>
    <member name="E:LMF.Tracker.Measurements.Scanning.ScanningRegionCollection.Changed">
      <summary>
            Occurs when the something on the regions in the collection has changed
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Scanning.ScanningRegionCollectionChangedEventArgs.Hint">
      <summary>
            Tells the reason why the 'Changed' event happened
            </summary>
    </member>
    <member name="F:LMF.Tracker.Measurements.Scanning.Line.ELineScanMode.Linear">
      <summary>
            This mode defines scanning along the defined polyline
            </summary>
    </member>
    <member name="F:LMF.Tracker.Measurements.Scanning.Line.ELineScanMode.CrossLine">
      <summary>
            This mode defines scanning perpendicular to the defined polyline with a thickness defined by the width of the scan line
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Scanning.Internal.DistanceFilter">
      <summary>
                Docu: "H:\Develop_SW\FLUM\2020\2020-06-04\Cubic Spline Interpolation3.pptx" Section "PI Regulated Distance Filter"
            </summary>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.Internal.ScanPolygonMerge.AddAndGetSquareTestRegionForAreaScanTests(LMF.Tracker.Direction,LMF.Tracker.Measurements.Profiles.AreaScanProfile)">
      <summary>
            Default perimeter providing a square around the given position square length is about 23° (+/- 11.46 in each direction).
            </summary>
      <param name="direction">
      </param>
      <param name="asp">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.Internal.ScanPolygonMerge.AddAndGetRectangleTestRegion(LMF.Tracker.Direction,LMF.Tracker.Measurements.Profiles.AreaScanProfile,System.Double,System.Double,System.Double)">
      <summary>
            Default perimeter providing a square around the given position square length is about 23° (+/- 11.46 in each direction).
            </summary>
      <param name="direction">
      </param>
      <param name="asp">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.Internal.ScanPolygonMerge.IsContinuedLine(LMF.Tracker.Measurements.Scanning.Internal.ScanLineCalculation.ScanLine,LMF.Tracker.Measurements.Scanning.Internal.ScanLineCalculation.ScanLine)">
      <summary>
            The scalar product of the vectors of the both lines (based on start and end point) is positive in case the
            have the same direction (same line). Otherwise it is negative (new line).
            </summary>
      <param name="line1">
      </param>
      <param name="line2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.Internal.ScanPolygonMerge.CalculatePointDistanceRad(LMF.Tracker.Measurements.Scanning.Internal.ScanLineCalculation.ScanPoint,LMF.Tracker.Measurements.Scanning.Internal.ScanLineCalculation.ScanPoint)">
      <summary>
            Helper method to get the distance between two scan points regardless of their orientation.
            </summary>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.Internal.ScanImpediments.IsPerimeterValid(LMF.Tracker.Measurements.Profiles.AreaScanProfile,System.Boolean)">
      <summary>
            Checks that at least one region with at least one valid perimeter element is available. Filtering out
            the invalid abstract Perimeter
            </summary>
      <param name="scanProfile">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.Internal.ScanTimeCalculation.ScanTime.CalculateOptimalScanSettingsForAllRegions(System.Collections.Generic.List{LMF.Tracker.Measurements.Scanning.ScanningRegion},LMF.Tracker.Enums.EAccuracy,System.Double,System.Double@,System.Int32@)">
      <summary>
                Takes the selected AreaScanProfile and calculates the best settings in terms of scan time based on
                the given settings (mainly perimeter and accuracy). Writes the optimal settings to each of the scanning regions
                of the selected AreaScanProfile.
            </summary>
      <param name="scanningRegions">
      </param>
      <param name="accuracy">
      </param>
      <param name="rollAngle">
      </param>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.Internal.ScanTimeCalculation.ScanTime.GetScanRegionsFromScanLines(System.Collections.Generic.IEnumerable{LMF.Tracker.Measurements.Scanning.ScanningLine},LMF.Core.TRoot,LMF.Tracker.BasicTypes.ITrackerMachine)">
      <summary>
            This Function convert the ScanningLine's to the corresponding scanning regions.
            </summary>
      <param name="scanningLines">
      </param>
      <param name="parent">
      </param>
      <param name="machine">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.Measurements.Scanning.Internal.ScanLineCalculation.ScanLine._MaxCartesianSpeedAtUTurn(LMF.Tracker.Measurements.Scanning.Internal.ScanLineCalculation.ScanPoint)">
      <summary>
                This is speed is achieved with maximal acceleration within a distance of PointSeparation/2.
                Thus the U-turn needs the same time for the longitudinal as for the lateral motion, assuming that LineSeparation =
                PointSeparation.
                On the controller we only have PointSeparation at hand.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Filters.AOIFilter">
      <summary>
            Class for angle of incidence filter.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Filters.AOIFilter.Threshold">
      <summary>
            Hold the threshold at which angle the AOI filter filters out measurements
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Filters.ESignalFilterStrength">
      <summary>
            Enumerates the strength of the signal filter
            </summary>
    </member>
    <member name="F:LMF.Tracker.Measurements.Filters.ESignalFilterStrength.Low">
      <summary>
            Low strength
            </summary>
    </member>
    <member name="F:LMF.Tracker.Measurements.Filters.ESignalFilterStrength.Medium">
      <summary>
            Medium strength
            </summary>
    </member>
    <member name="F:LMF.Tracker.Measurements.Filters.ESignalFilterStrength.High">
      <summary>
            High strength
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Filters.MeasurementFilter">
      <summary>
            Base class for MeasurementFilters
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Filters.MeasurementFilter.IsEnabled">
      <summary>
            Gets the <see cref="T:LMF.Tracker.BasicTypes.BoolValue.BoolValue" /> which says if the MeasurementFilter is enabled.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Filters.MeasurementFilter.Name">
      <summary>
            Gets the name of the MeasurementFilter.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Filters.MeasurementFilterCollection">
      <summary>
            Collection of MeasurementFilters, contains multiple MeasurementFilters that can happen while working with the Tracker, for example Probe Button presses or Stable Probing events.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Filters.SignalFilter">
      <summary>
            Class for signal filter
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Filters.SignalFilterStrengthValue">
      <summary>
            Convenience class for <see cref="T:LMF.Tracker.Enums.EAccuracy" /> values.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Measurements.Filters.SignalFilterStrengthValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.Measurements.Filters.SignalFilterStrengthValue.Changed" /> event.
            </summary>
      <param name="sender">the sender object</param>
      <param name="paramNewValue">the new value</param>
    </member>
    <member name="P:LMF.Tracker.Measurements.Filters.SignalFilterStrengthValue.Value">
      <summary>
            Get or set the accuracy.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Measurements.Filters.SignalFilterStrengthValue.Label">
      <summary>
            Get the label.
            </summary>
    </member>
    <member name="E:LMF.Tracker.Measurements.Filters.SignalFilterStrengthValue.Changed">
      <summary>
            Occurs when the value has changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWordExt">
      <summary>
            Reflects the status of the tracker providing a set of flags that indicate a state, a warning or an error
            of the tracker.
            Represents flags 32-63 and the client status flags. The flags 0-32 are mapped to the <see cref="T:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord" />.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWordExt.None">
      <summary>
            Special value to initialize the status with no flag set.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWordExt.ConflictingMeasProfileAndTarget">
      <summary>
            Tells that the currently selected target and profile in LMF do not match to get a valid
            measurement.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWordExt.InvalidPointToPointDistance">
      <summary>
            Tells that the point to point distance is not correctly set within its valid range (currently unused).
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWordExt.InvalidLineToLineDistance">
      <summary>
            Tells that the line to line distance is not correctly set within its valid range (currently unused).
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWordExt.InvalidReferenceDistance">
      <summary>
            Tells that the reference distance is not within its range (currently unused).
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWordExt.InvalidPerimeter">
      <summary>
            Tells that there is no valid (complete) perimeter to be scanned (currently unused).
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings">
      <summary>
            Is a compilation of indicators used in <see cref="T:LMF.Tracker.MeasurementResults.MeasurementInfo" />.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.NoFlagSet">
      <summary>
            Helper value for the test if no flag is set at all.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.AllOk">
      <summary>
            Measurement is valid. Some other flags may be set in parallel to show a warning about the
            measurement without invalidating it.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.NotEnoughLEDs">
      <summary>
            Measurement is declined because not enough LEDs are visible
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.RotationError">
      <summary>
            Measurement is declined if the calculation of the rotations results in implausible values.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.RotationOutOfRange">
      <summary>
            Measurement is declined because the probe is rotated too much.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.AccuracyError">
      <summary>
            The minimum LED group conditions are not met.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.TargetOutOfRange">
      <summary>
            Target is too near to the Tracker or too far away.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.TipMissing">
      <summary>
            No tip is attached.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.CompensationMissing">
      <summary>
            The Tracker, Probe or Tip is not compensated.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.TriggerTimeViolation">
      <summary>
            Measurement is invalid because the time difference to last measurement is smaller than defined by parameter minimal time delay.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.ZoomPosFrozen">
      <summary>
            Internal 6Dof Module error
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.TouchTriggerConfirmTimeout">
      <summary>
            Measurement is declined because of unclear trigger pulse.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.NoTargetLocked">
      <summary>
            No target is locked.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.ProbeIsSleeping">
      <summary>
            Probe is sleeping.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.TriggerOverrun">
      <summary>
            Measurement is invalid because the actual trigger rate is above 1kHz.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.ImageRmsTooHigh">
      <summary>
            Image RMS too high
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.WithoutTip">
      <summary>
            Measurement taken without the tip.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.TrackerPosFrozen">
      <summary>
            For AT90x only
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.BroadeningError">
      <summary>
            Set for ATS600 in case a measurement contains more than one distance (e.g. at an edge)
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.SpecialDistanceMode">
      <summary>
            Set for ATS600 in case the measurement is done using a special distance mode (e.g. measurement into the handle prism)
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.PointToReflector">
      <summary>
            Set for ATS600 in case a surface target is selected but the tracker points to a reflector
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.Triggered">
      <summary>
            Set for Triggered Measurement if it was triggered
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.Skipped">
      <summary>
            Set for Triggered Measurement if it should be skipped
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.Invalidated">
      <summary>
            Set for Triggered Measurement if it was invalidated
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings.OutOfSync">
      <summary>
            Set for Triggered Measurement if it was out of sync
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.EMeasurementInfoMode">
      <summary>
            Defines the mode of the measurement.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoMode.Continuous">
      <summary>
            Part of a continuous measurement
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoMode.Stationary">
      <summary>
            Averaged stationary result
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoMode.Display">
      <summary>
            DRO measurement element
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoMode.Triggered">
      <summary>
            Measurement based on an external trigger
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoMode.RawMeasurement">
      <summary>
            Non-compensated measurement
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord">
      <summary>
            Reflects the status of the tracker providing a set of flags that indicate a state, a warning or an error
            of the tracker.
            Represents flags 0-31. The flags 32-63 and the client status flags are mapped to the <see cref="T:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWordExt" />.
            Warning: The enum is 32 bit wide. Do not add any flags anymore.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.None">
      <summary>
            Special value to initialize the status with no flag set.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.LaserNotStabilized">
      <summary>
            Tells that the laser is not stabilized so that the tracker is not ready yet to measure.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.NotInitialized">
      <summary>
            Tells that the tracker is not initialized yet. Some trackers automatically initialize after startup.
            Others do not.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.TargetMissing">
      <summary>
            Tells that the tracker does not point to a valid target based on the preselected one and the direction
            it is pointing to.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.SensorMissing">
      <summary>
            Tells that no sensor is connected to the tracker controller.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.Sensor6DofHardwareError">
      <summary>
            Indicates that there is a problem with a probe.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.TrackerCompensationMissing">
      <summary>
            Tells that the tracker is not fully compensated to be ready to measure or that an incomplete
            compensation is selected.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.ProbeCompensationMissing">
      <summary>
            Tells that the tracker is locked on a probe that is not compensated. Loading a valid compensation using
            Tracker Pilot solves that problem.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.StylusCompensationMissing">
      <summary>
            Tells that there is a stylus connected to a probe that is not compensated yet. Compensating it using
            Tracker Pilot solves that problem.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.StylusMissing">
      <summary>
            Tells that the tracker is pointing to a probe that has no stylus attached.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.TargetTilted">
      <summary>
            Tells that the tracker is locked on a probe that is tilted too much to get a valid measurement.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.TargetDistanceOutOfRange">
      <summary>
            Tells that the tracker points to a target that is either too near or too far to the tracker.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.InclinationOutOfWorkingRange">
      <summary>
            Tells that the tracker is tilted so much that the inclination sensor is not working anymore. Properly
            leveling the tracker solves that problem.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.OrientToGravityNotInitialized">
      <summary>
            Tells that no OTG has been done.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.OrientToGravityNotActivated">
      <summary>
            Tells that the measurements are not aligned to gravity.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.QuickReleaseNotLocked">
      <summary>
            Tells that the quick release is not properly locked.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.MeteoInvalidData">
      <summary>
            Tells that the meteo data is not sufficient to have some valid measurements.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.MeteoNoExternalTemperature">
      <summary>
            Tells that there is no external temperature sensor connected to the tracker
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.SensorInsideTemperatureInvalid">
      <summary>
            Tells that the internal temperature sensor does not provide a valid value.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.MeteoManuallySet">
      <summary>
            Tells that the tracker uses the manually set meteo data. Alternatively it can use the measured data.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.VarioPositionFrozen">
      <summary>
            Tells that the hardware to focus on the probe does not correctly work.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.MountingDirectionUpsideDown">
      <summary>
            Tells that the tracker is mounted upside down.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.HardShockOccurred">
      <summary>
            Tells that there was a hard shock of the tracker since the last compensation
            that corrected the influence of the previous hard shocks if any.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.ClientStatusNotReady">
      <summary>
            Tells that LMF detected that the tracker is not ready to measure according to the current
            configuration.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.MeasureReflectors">
      <summary>
            Tells that the tracker ignores all probes and does a reflector measurement only.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.LaserStabilizationError">
      <summary>
            Tells that stabilizing the laser to be ready to measure failed.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.LaserLightSwitchedOff">
      <summary>
            Tells that the laser has been switched off.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.LaserControlNearLimit">
      <summary>
            Tells that the laser is near to the end of its life.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.LaserTrackingDisabled">
      <summary>
            Tells that the tracker does not lock onto the reflectors. Issuing PositionTo with the parameters set to lock onto a
            target enables tracking again.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.PowerLockOff">
      <summary>
            Tells that the power lock is switched off.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.VarioNotInitialized">
      <summary>
            Tells that the focus hardware for the probes does not correctly work.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.SixDofCameraNotInitialized">
      <summary>
            Tells that the camera is not correctly initialized to detect the probes.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.ELmfTrackerStatusWord.SensorInternalTimeSyncError">
      <summary>
            Tells that there is an internal problem regarding the time synchronization.
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.Position">
      <summary>
            This class represents the coordination of a <see cref="T:LMF.Tracker.MeasurementResults.SingleShotMeasurement3D" />.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.Position.Coordinate1">
      <summary>
            Gets the first coordinate value.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.Position.Coordinate2">
      <summary>
            Gets the second coordinate value.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.Position.Coordinate3">
      <summary>
            Gets the third coordinate value.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.Position.CoordinateType">
      <summary>
            Gets the <see cref="T:LMF.Units.ECoordinateType" /> in which the coordinate is written.
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags">
      <summary>
            Is a compilation of indicators used in <see cref="T:LMF.Tracker.MeasurementResults.MeasurementInfo" />.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.AllOk">
      <summary>
            Measurement is valid.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.NotEnoughLEDs">
      <summary>
            Measurement is declined because not enough LEDs are visible
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.RotationError">
      <summary>
            Measurement is declined if the calculation of the rotations results in implausible values.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.RotationOutOfRange">
      <summary>
            Measurement is declined because the probe is rotated too much.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.AccuracyError">
      <summary>
            The minimum LED group conditions are not met.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.TargetOutOfRange">
      <summary>
            Target is too near to the Tracker or too far away.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.TipMissing">
      <summary>
            No tip is attached.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.CompensationMissing">
      <summary>
            The Tracker, Probe or Tip is not compensated.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.TriggerTimeViolation">
      <summary>
            Measurement is invalid because the time difference to last measurement is smaller than defined by parameter minimal time delay.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.ZoomPosFrozen">
      <summary>
            Internal 6Dof Module error
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.TouchTriggerConfirmTimeout">
      <summary>
            Measurement is declined because of unclear trigger pulse.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.NoTargetLocked">
      <summary>
            No target is locked.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.ProbeIsSleeping">
      <summary>
            Probe is sleeping.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.TriggerOverrun">
      <summary>
            Measurement is invalid because the actual trigger rate is above 1kHz.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.ImageRmsTooHigh">
      <summary>
            Image RMS too high
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.WithoutTip">
      <summary>
            Measurement taken without the tip.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.TrackerPosFrozen">
      <summary>
            For AT90x only
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.BroadeningError">
      <summary>
            Set for ATS600 in case a measurement contains more than one distance (e.g. at an edge)
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.SpecialDistanceMode">
      <summary>
            Set for ATS600 in case the measurement is done using a special distance mode (e.g. measurement into the handle prism)
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.PointToReflector">
      <summary>
            Set for ATS600 in case a surface target is selected but the tracker points to a reflector
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.Triggered">
      <summary>
            Set for Triggered Measurement if it was triggered
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.Skipped">
      <summary>
            Set for Triggered Measurement if it should be skipped
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.Invalidated">
      <summary>
            Set for Triggered Measurement if it was invalidated
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlags.OutOfSync">
      <summary>
            Set for Triggered Measurement if it was out of sync
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.EMeasurementInfoType">
      <summary>
            Defines the type of the measurement by the used <see cref="T:LMF.Tracker.Targets.Target" />.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoType.Empty">
      <summary>
            No type information.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoType.NotLocked">
      <summary>
            No <see cref="T:LMF.Tracker.Targets.Target" /> was locked.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoType.Measurement3D">
      <summary>
            Target was a <see cref="T:LMF.Tracker.Targets.Reflectors.Reflector" />.
            </summary>
    </member>
    <member name="F:LMF.Tracker.MeasurementResults.EMeasurementInfoType.Measurement6D">
      <summary>
            Target was a <see cref="T:LMF.Tracker.Targets.Probes.Probe" />.
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.MeasurementInfo">
      <summary>
            This class is a compilation of different information to a <see cref="T:LMF.Tracker.MeasurementResults.Measurement" />.
            </summary>
    </member>
    <member name="M:LMF.Tracker.MeasurementResults.MeasurementInfo.#ctor(LMF.Tracker.Settings)">
      <summary>
            Creating a new measurement info should start with a setting that indicates that no error /warning flags
            are set and the measurement is ok. In case a measurement should indicate a warning or a problem it
            is the task of the caller to adapt the flags after construction.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.MeasurementInfo.Type">
      <summary>
            Gets the type of the measurement.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.MeasurementInfo.Flags">
      <summary>
            [Legacy] Gets the indicators of disturbed measurement. This flag is not able to show additional information or warnings. Use <see cref="T:LMF.Tracker.MeasurementResults.EMeasurementInfoIndicatorFlagsWithWarnings" /> for all information.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.MeasurementInfo.GUID">
      <summary>
            Gets the GUID of the last used part of the measurement.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.MeasurementInfo.ProbeSerialNumber">
      <summary>
            Gets the serial number of the used <see cref="T:LMF.Tracker.Targets.Probes.Probe" />.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.MeasurementInfo.MountNr">
      <summary>
            Gets the selected mount of the used <see cref="T:LMF.Tracker.Targets.Probes.Probe" />.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.MeasurementInfo.ProbeFace">
      <summary>
            Gets the selected probe face of the used <see cref="T:LMF.Tracker.Targets.Probes.Probe" />.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.MeasurementInfo.NumberOfLEDsVisible">
      <summary>
            Gets the count of LEDs which were visible during measurement.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.MeasurementInfo.NumberOfLEDsUsed">
      <summary>
            Gets the count of the LEDS which were actually used for the measurement.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.MeasurementInfo.FirstMeasAfterStartSignal">
      <summary>
            Gets if the measurement was the first after the start signal.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.MeasurementInfo.Mode">
      <summary>
            Defines the mode of the measurement.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.MeasurementInfo.FlagsWithWarnings">
      <summary>
            Gets the indicators of disturbed measurement.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.MeasurementInfo.PointIndex">
      <summary>
            Shows the point index of this measurement on the current scan line.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.MeasurementInfo.LineIndex">
      <summary>
            Shows the index of the current scan line the measurement point belongs to.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.MeasurementInfo.RegionIndex">
      <summary>
            Shows the index of the region the measurement belongs to.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.MeasurementInfo.Intensity">
      <summary>
            Shows the reflectivity of the target the tracker encountered during the measurement.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.MeasurementInfo.DistanceBroadening">
      <summary>
            Value indicating potential scan artifacts.
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.SpatialDirection">
      <summary>
            This class represents a spatial direction
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.SpatialDirection.X">
      <summary>
            Gets the X direction
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.SpatialDirection.Y">
      <summary>
            Gets the Y direction
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.SpatialDirection.Z">
      <summary>
            Gets the Z direction
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.TriggeredMeasurement">
      <summary>
            You will get TriggeredMeasurement if you use the <see cref="T:LMF.Tracker.Measurements.Profiles.CustomTriggerProfile" /> while doing measurements on a <see cref="T:LMF.Tracker.Targets.Reflectors.Reflector" /> or a <see cref="T:LMF.Tracker.Targets.Probes.Probe" />.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.TriggeredMeasurement.TimeStamp">
      <summary>
            Gets the time stamp of the measurement. 
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.TriggeredMeasurement.IsFace2">
      <summary>
            Gets if the measurement was taken in <see cref="T:LMF.Tracker.Face" /> two.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.TriggeredMeasurement.H">
      <summary>
            Gets the horizontal angle of the measurement.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.TriggeredMeasurement.V">
      <summary>
            Gets the vertical angle of the measurement.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.TriggeredMeasurement.D">
      <summary>
            Gets the distance of the measurement.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.TriggeredMeasurement.Q0">
      <summary>
            Gets the first quaternion value.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.TriggeredMeasurement.Q1">
      <summary>
            Gets the second quaternion value.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.TriggeredMeasurement.Q2">
      <summary>
            Gets the third quaternion value.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.TriggeredMeasurement.Q3">
      <summary>
            Gets the fourth quaternion value.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.TriggeredMeasurement.Info">
      <summary>
            Gets the <see cref="T:LMF.Tracker.MeasurementResults.MeasurementInfo" /> of the measurement.
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.TriggeredMeasurementCollection">
      <summary>
            A collection for <see cref="T:LMF.Tracker.MeasurementResults.TriggeredMeasurement" />.
            </summary>
    </member>
    <member name="M:LMF.Tracker.MeasurementResults.TriggeredMeasurementCollection.GetEnumerator">
      <summary>
            Returns an enumerator from a cloned collection that iterates through the collection.
            </summary>
      <returns>Returns an enumerator form type TriggeredMeasurement.</returns>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.TriggeredMeasurementCollection.Count">
      <summary>
            Gets the number of elements actually contained in the Collection.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.TriggeredMeasurementCollection.Item(System.Int32)">
      <summary>
            Gets a <see cref="T:LMF.Tracker.MeasurementResults.TriggeredMeasurement" /> element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>Element at specified index.</returns>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.TwoFaceMeasurement">
      <summary>
            Takes a measrement in each <see cref="T:LMF.Tracker.Face" />.
            </summary>
    </member>
    <member name="M:LMF.Tracker.MeasurementResults.TwoFaceMeasurement.Convert(LMF.Tracker.Settings)">
      <inheritDoc />
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.TwoFaceMeasurement.Face1Measurement">
      <summary>
            Gets a <see cref="T:LMF.Tracker.MeasurementResults.StationaryMeasurement3D" /> in <see cref="T:LMF.Tracker.Face" /> one.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.TwoFaceMeasurement.Face2Measurement">
      <summary>
            Gets a <see cref="T:LMF.Tracker.MeasurementResults.StationaryMeasurement3D" /> in <see cref="T:LMF.Tracker.Face" /> two.
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.SingleShotMeasurement3D">
      <summary>
            You will get SingleShotMeasurement3D if you use the <see cref="T:LMF.Tracker.Measurements.Profiles.ContinuousDistanceProfile" /> or the <see cref="T:LMF.Tracker.Measurements.Profiles.ContinuousTimeProfile" /> while doing measurements on a <see cref="T:LMF.Tracker.Targets.Reflectors.Reflector" />.
            </summary>
    </member>
    <member name="M:LMF.Tracker.MeasurementResults.SingleShotMeasurement3D.Convert(LMF.Tracker.Settings)">
      <inheritDoc />
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.SingleShotMeasurement3D.Position">
      <summary>
            Gets the <see cref="T:LMF.Tracker.MeasurementResults.SingleShotPosition" /> of the measurement.
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.StationaryMeasurement3D">
      <summary>
            You will get StationaryMeasurement3D if you use the <see cref="T:LMF.Tracker.Measurements.Profiles.StationaryMeasurementProfile" /> or the <see cref="T:LMF.Tracker.Measurements.Profiles.CustomStationaryMeasurementProfile" /> while doing measurements on a <see cref="T:LMF.Tracker.Targets.Reflectors.Reflector" />.
            </summary>
    </member>
    <member name="M:LMF.Tracker.MeasurementResults.StationaryMeasurement3D.Convert(LMF.Tracker.Settings)">
      <inheritDoc />
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.StationaryMeasurement3D.Position">
      <summary>
            Gets the <see cref="T:LMF.Tracker.MeasurementResults.StationaryPosition" /> of the measurement.
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.StationaryMeasurement6D">
      <summary>
            You will get SingleShotMeasurement3D if you use the <see cref="T:LMF.Tracker.Measurements.Profiles.StationaryMeasurementProfile" /> or the <see cref="T:LMF.Tracker.Measurements.Profiles.CustomStationaryMeasurementProfile" /> while doing measurements on a <see cref="T:LMF.Tracker.Targets.Probes.Probe" />.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.StationaryMeasurement6D.Rotation">
      <summary>
            Gets the <see cref="T:LMF.Tracker.MeasurementResults.StationaryRotation" /> of the measurement.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.StationaryMeasurement6D.ShankDirection">
      <summary>
            Gets the <see cref="P:LMF.Tracker.MeasurementResults.StationaryMeasurement6D.ShankDirection" /> of the measurement.
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.Measurement">
      <summary>
            Base class for all Measurements
            </summary>
    </member>
    <member name="M:LMF.Tracker.MeasurementResults.Measurement.Convert(LMF.Tracker.Settings)">
      <summary>
            Converts the measurement using the given Settings object.
            </summary>
      <param name="paramSettings">The settings you want to convert the measurement with</param>
      <returns>The converted measurement</returns>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.Measurement.TimeStamp">
      <summary>
            Gets the exact TimeStamp of the measurement, which comes form the controller 
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.Measurement.Temperature">
      <summary>
            Gets the temperature used to compensate the measurement.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.Measurement.Pressure">
      <summary>
            Gets the pressure used to compensate the measurement
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.Measurement.Humidity">
      <summary>
            Gets the humidity used to compensate the measurement.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.Measurement.MeasurementProfile">
      <summary>
            Gets the name of the used measurement profile.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.Measurement.Info">
      <summary>
            Gets the MeasurementInfo object, containing detailed status information about the measurement.
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.StationaryPosition">
      <summary>
            This class represents the position of a <see cref="T:LMF.Tracker.MeasurementResults.StationaryMeasurement3D" />.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.StationaryPosition.Coordinate1">
      <summary>
            Gets the first coordinate value.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.StationaryPosition.Coordinate2">
      <summary>
            Gets the second coordinate value.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.StationaryPosition.Coordinate3">
      <summary>
            Gets the third coordinate value.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.StationaryPosition.IsFace2">
      <summary>
            Gets if the coordinate was taken in <see cref="T:LMF.Tracker.Face" /> two.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.StationaryPosition.CoordinateType">
      <summary>
            Gets the <see cref="T:LMF.Units.ECoordinateType" /> in which the coordinate is written.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.StationaryPosition.Precision">
      <summary>
            Gets the precision of the measurement.
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.StationaryRotation">
      <summary>
            This class represents the rotation of a <see cref="T:LMF.Tracker.MeasurementResults.StationaryMeasurement6D" />.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.StationaryRotation.Value0">
      <summary>
            Gets only a value if <see cref="T:LMF.Units.ERotationType" /> is Quaternion.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.StationaryRotation.Value1">
      <summary>
            Gets the first value of rotation.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.StationaryRotation.Value2">
      <summary>
            Gets the second value of rotation.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.StationaryRotation.Value3">
      <summary>
            Gets the third value of rotation.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.StationaryRotation.RotationType">
      <summary>
            Gets the <see cref="T:LMF.Units.ERotationType" /> in which the rotation is written.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.StationaryRotation.Precision">
      <summary>
            Gets the precision of the measurement.
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.MeasurementCollection">
      <summary>
            A collection for all kind of <see cref="T:LMF.Tracker.MeasurementResults.Measurement" />.
            </summary>
    </member>
    <member name="M:LMF.Tracker.MeasurementResults.MeasurementCollection.GetEnumerator">
      <summary>
            Returns an enumerator from a cloned collection that iterates through the collection.
            </summary>
      <returns>Returns an enumerator form type Measurement.</returns>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.MeasurementCollection.Count">
      <summary>
            Gets the number of elements actually contained in the Collection.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.MeasurementCollection.Item(System.Int32)">
      <summary>
            Gets a <see cref="T:LMF.Tracker.MeasurementResults.Measurement" /> element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>Element at specified index.</returns>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.SingleShotMeasurement6D">
      <summary>
            You will get SingleShotMeasurement3D if you use the <see cref="T:LMF.Tracker.Measurements.Profiles.ContinuousDistanceProfile" /> or the <see cref="T:LMF.Tracker.Measurements.Profiles.ContinuousTimeProfile" /> while doing measurements on a <see cref="T:LMF.Tracker.Targets.Probes.Probe" />.
            </summary>
    </member>
    <member name="M:LMF.Tracker.MeasurementResults.SingleShotMeasurement6D.Convert(LMF.Tracker.Settings)">
      <inheritDoc />
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.SingleShotMeasurement6D.Rotation">
      <summary>
            Gets the <see cref="T:LMF.Tracker.MeasurementResults.SingleShotRotation" /> of the measurement.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.SingleShotMeasurement6D.ShankDirection">
      <summary>
            Gets the <see cref="T:LMF.Tracker.MeasurementResults.SpatialDirection" /> of the shank.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.SimpleMeasurement.TrackingOffsetX">
      <summary>
                Offset X of either the PSD (Genie) or the ATR (Wave)
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.SimpleMeasurement.TrackingOffsetY">
      <summary>
                Offset Y of either the PSD (Genie) or the ATR (Wave)
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.SingleShotRotation">
      <summary>
            This class represents the rotation of a <see cref="T:LMF.Tracker.MeasurementResults.SingleShotMeasurement6D" />.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.SingleShotRotation.Value0">
      <summary>
            Gets only a value if <see cref="T:LMF.Units.ERotationType" /> is quaternion.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.SingleShotRotation.Value1">
      <summary>
            Gets the first value of rotation.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.SingleShotRotation.Value2">
      <summary>
            Gets the second value of rotation.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.SingleShotRotation.Value3">
      <summary>
            Gets the third value of rotation.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.SingleShotRotation.RotationType">
      <summary>
            Gets the <see cref="T:LMF.Units.ERotationType" /> in which the rotation is written.
            </summary>
    </member>
    <member name="T:LMF.Tracker.MeasurementResults.SingleShotPosition">
      <summary>
            This class represents the coordination of a <see cref="T:LMF.Tracker.MeasurementResults.SingleShotMeasurement3D" />.
            </summary>
    </member>
    <member name="P:LMF.Tracker.MeasurementResults.SingleShotPosition.IsFace2">
      <summary>
            Gets if the coordinate was taken in <see cref="T:LMF.Tracker.Face" /> two.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Inclination.InclinationChangedEventArgs">
      <summary>
            A collection for all kind of <see cref="T:LMF.Tracker.MeasurementResults.Measurement" />.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Inclination.InclinationMonitoring">
      <summary>
            Inclination monitoring class used in order to perform nivel monitoring operations. This is only available for AT9x0 Trackers.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Inclination.InclinationMonitoring.InclinationChangedHandler">
      <summary>
            Delegate for InclinationChanged event
            </summary>
      <param name="sender">
      </param>
    </member>
    <member name="M:LMF.Tracker.Inclination.InclinationMonitoring.#ctor(LMF.Core.TRoot,LMF.Tracker.BasicTypes.ITrackerMachine)">
      <summary>
            The InclinationMonitoring is a process that runs in background to detect whether the Tracker is stable or not. 
            If the Tracker is moved or sinks slowly and exceeds a given Threshold, a warning is thrown to inform the user on the Tracker movement. 
            The delivered InclinationMeasurement is always converted to the Tracker coordinate system, independently of the horizontal position of the Tracker.
            - Monitoring can only be started when GetInclinationToGravity() has been performed before, else the WorkingRangeExceeded is flagged
            - Monitoring can only be started when the nivel is in working range, else the WorkingRangeExceeded is flagged
            </summary>
      <param name="parent">parent Tracker object</param>
    </member>
    <member name="M:LMF.Tracker.Inclination.InclinationMonitoring.Reset">
      <summary>
            Resets all exceeded flags.
            In case no session is running nothing else happens.
            In case a session is running the original one will be replaced by a new one based on the current
            inclination as new initial value.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Inclination.InclinationMonitoring.RaiseInclinationChanged">
      <summary>
            Common part of raising the change between the new and the legacy implementation of the level monitoring
            </summary>
    </member>
    <member name="P:LMF.Tracker.Inclination.InclinationMonitoring.Active">
      <summary>
            If set to true monitoring is started, if set to false monitoring is stopped
            - Monitoring can only be started when GetInclinationToGravity (OTG) has been performed for AT9x0, else the WorkingRangeExceeded is flagged. For ATS600
              no OTG is required.
            - Monitoring can only be started when the nivel is in working range, else the WorkingRangeExceeded is flagged
            </summary>
    </member>
    <member name="P:LMF.Tracker.Inclination.InclinationMonitoring.Initial">
      <summary>
            Initial inclination absolute value which is set on Reset(), typically
            on startup of the monitoring
            </summary>
    </member>
    <member name="P:LMF.Tracker.Inclination.InclinationMonitoring.Drift">
      <summary>
            Drift is the difference from Current and Initial inclination value
            </summary>
    </member>
    <member name="P:LMF.Tracker.Inclination.InclinationMonitoring.Current">
      <summary>
            Current inclination absolute value which is fired by the InclinationChanged event.
            The current inclination is updated constantly, depending on the defined Interval. 
            The user has to calculate the Drift on his own, by computing the difference 
            from Current and Initial inclination value 
            </summary>
    </member>
    <member name="P:LMF.Tracker.Inclination.InclinationMonitoring.ThresholdExceeded">
      <summary>
            Flagged if the Threshold has been exceeded. Additionally, a warning is thrown
            - when the ThresholdExceeded is flagged, the monitoring should be stopped by setting Active to false
            </summary>
    </member>
    <member name="P:LMF.Tracker.Inclination.InclinationMonitoring.ThresholdExceededTime">
      <summary>
            Provides the time the threshold has been exceeded. Provides no valid date
            and time in case the threshold has not been exceeded.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Inclination.InclinationMonitoring.WorkingRangeExceeded">
      <summary>
            Flagged if the working range (the calibrated range, not the full range of the sensor) of the nivel has been exceeded. Additionally, an error is thrown
            and the monitoring is stopped automatically.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Inclination.InclinationMonitoring.WorkingRangeExceededTime">
      <summary>
            Provides the time the working range has been exceeded. Provides no valid date
            and time in case the working range has not been exceeded.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Inclination.InclinationMonitoring.Threshold">
      <summary>
            The Threshold of the Nivel Monitoring. 
            Default value is 15 uRad
            TODO: In case an A-change is possible we should change that value to a value with range.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Inclination.InclinationMonitoring.Interval">
      <summary>
            The update interval of the current inclination. 
            Default value is 60 s.
            TODO: Once an A-Change is allowed the interval should be changed to a double value with range.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Inclination.InclinationMonitoring.ChangeThreshold">
      <summary>
            The minimum change that generates an asynchronous nivel monitoring event
            beside the regular interval.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Inclination.InclinationMonitoring.DeviationThreshold">
      <summary>
            The minimum deviation that is recorded in the nivel monitoring history.
            All changes below this value are not recorded to shorten the history.
            </summary>
    </member>
    <member name="E:LMF.Tracker.Inclination.InclinationMonitoring.InclinationChanged">
      <summary>
            The InclinationChanged event is fired with the current inclination values interval has been reached
            </summary>
    </member>
    <member name="T:LMF.Tracker.Inclination.InclinationToGravity">
      <summary>
            Inclination to gravity class used to store orient to gravity results
            </summary>
    </member>
    <member name="P:LMF.Tracker.Inclination.InclinationToGravity.TimeStamp">
      <summary>
            The current time stamp
            </summary>
    </member>
    <member name="P:LMF.Tracker.Inclination.InclinationToGravity.InclinationRotX">
      <summary>
            The current orient to gravity rotation angle on the X-Axis
            </summary>
    </member>
    <member name="P:LMF.Tracker.Inclination.InclinationToGravity.InclinationRotY">
      <summary>
            The current orient to gravity rotation angle on the Y-Axis
            </summary>
    </member>
    <member name="T:LMF.Tracker.Inclination.InclinationMeasurement">
      <summary>
            The inclination monitoring measurement, used to store inclination monitoring results
            </summary>
    </member>
    <member name="P:LMF.Tracker.Inclination.InclinationMeasurement.TimeStamp">
      <summary>
            The current time stamp
            </summary>
    </member>
    <member name="P:LMF.Tracker.Inclination.InclinationMeasurement.X">
      <summary>
            The current inclination angle on the X-Axis
            </summary>
    </member>
    <member name="P:LMF.Tracker.Inclination.InclinationMeasurement.Y">
      <summary>
            The current inclination angle on the Y-Axis
            </summary>
    </member>
    <member name="T:LMF.Tracker.Inclination.InclinationSensor">
      <summary>
            Inclination sensor class used to perform nivel monitoring and orient to gravity operations
            </summary>
    </member>
    <member name="T:LMF.Tracker.Inclination.InclinationSensor.GetInclinationToGravityFinishedHandler">
      <summary>
            Handler which is used, once the orient to gravity operation has been completed
            </summary>
      <param name="sender">the sender</param>
      <param name="paramInclinationToGravity">the orient to gravity result</param>
      <param name="ex">the Lmf exception which may have occured</param>
    </member>
    <member name="M:LMF.Tracker.Inclination.InclinationSensor.OnIntervalChangedVerifyValue(System.Double)">
      <summary>
            Verification method of the interval value to be used for the public LMF. In the private LMF Tracker Pilot shows its own limits.
            </summary>
      <param name="paramNewValue">
      </param>
    </member>
    <member name="M:LMF.Tracker.Inclination.InclinationSensor.OnThresholdChangedVerifyValue(System.Double)">
      <summary>
            For the public LMF the ChangeThreshold and the DeviationThreshold are coupled to the Threshold using a scale factor.
            This handler adapts them in case the Threshold is changed.
            For the private LMF they are independent.
            Is also used to verify the values.
            </summary>
      <param name="paramNewValue">
      </param>
    </member>
    <member name="M:LMF.Tracker.Inclination.InclinationSensor.Measure">
      <summary>
            Read out the Current inclination values
            </summary>
      <returns>Returns the inclination measurement with the angles in X and Y.</returns>
    </member>
    <member name="M:LMF.Tracker.Inclination.InclinationSensor.GetInclinationToGravity">
      <summary>
            Compensates the system to zero gravity (Internally call orient to gravity)
            </summary>
      <returns>Returns the inclination to gravity Rotations in X and Y</returns>
    </member>
    <member name="M:LMF.Tracker.Inclination.InclinationSensor.GetInclinationToGravityAsync">
      <summary>
            Compensates the system to zero gravity asynchronous.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Inclination.InclinationSensor.InclinedToGravity">
      <summary>
            Gets the inclination according to gravity.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Inclination.InclinationSensor.Monitoring">
      <summary>
            Gets the monitoring of the inclination sensor. (class which can monitor the inclination of the sensor)
            </summary>
    </member>
    <member name="P:LMF.Tracker.Inclination.InclinationSensor.CurrentInclinationToGravity">
      <summary>
            Gets the current inclination according to gravity.
            This property is persistent after LMF reconnect but not after controller reboot
            </summary>
    </member>
    <member name="E:LMF.Tracker.Inclination.InclinationSensor.GetInclinationToGravityFinished">
      <summary>
            This event is fired when GetInclinationToGravitiyAsync has finished.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Hardware.IHardwareScannerVelocity.MaxScannerVelocityHorizontal">
      <summary>
            Get the maximal scanner horizontal velocity. In rad/ms
            </summary>
    </member>
    <member name="P:LMF.Tracker.Hardware.IHardwareScannerVelocity.MaxScannerVelocityVertical">
      <summary>
            Get the maximal scanner vertical velocity. In rad/ms
            </summary>
    </member>
    <member name="T:LMF.Tracker.ErrorHandlingAdapter.StaticExceptionProvider">
      <summary>
            This class known how to create LmfException from error number
            Use this class only when is no other possibilities, or in static classes.
            When possible use instead <see cref="T:LMF.Core.ErrorHandling.IExceptionProvider" /> from <see cref="T:LMF.Core.IMachine" /></summary>
    </member>
    <member name="P:LMF.Tracker.Compensations.CompensationParameters.Name">
      <summary>
            Gets the name of the compensation parameter.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Compensations.CompensationParameters.IsValid">
      <summary>
            Gets the bool value if the compensation parameter is valid.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Compensations.Compensation">
      <summary>
            Base class for compensations.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Compensations.Compensation.#ctor">
      <summary>
            Initializes a new instance of the Compensation class with default settings.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Compensations.Compensation.Select">
      <summary>
            Selects the desired compensation as active compensation.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Compensations.Compensation.Name">
      <summary>
            Gets the name of the compensation.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Compensations.Compensation.Comment">
      <summary>
            Gets the comment of the compensation.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Compensations.Compensation.TimeStamp">
      <summary>
            Gets the TimeStamp of the compensation.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Compensations.CompensationCollection">
      <summary>
            This collection holds all compensations
            </summary>
    </member>
    <member name="P:LMF.Tracker.Compensations.CompensationCollection.Selected">
      <summary>
            Gets the selected compensation as compensation object.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Compensations.CompensationCollection.Count">
      <summary>
            Gives you the number of elements in the collection.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Compensations.CompensationCollection.Item(System.Int32)">
      <summary>
            Gets the compensation with specified index in collection.
            </summary>
      <param name="index">Specified index in compensation list.</param>
      <returns>
      </returns>
    </member>
    <member name="E:LMF.Tracker.Compensations.CompensationCollection.Changed">
      <summary>
            Occurs when something in the collection changes (added, deleted or edited compensations).
            </summary>
    </member>
    <member name="E:LMF.Tracker.Compensations.CompensationCollection.SelectedChanged">
      <summary>
            Occurs when the selected compensations has changed.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Compensations.ATS600.EATS600CameraType.Ovc">
      <summary>
            Overview Camera
            </summary>
    </member>
    <member name="F:LMF.Tracker.Compensations.ATS600.EATS600CameraType.AtrWide">
      <summary>
            Wide Angle Atr
            </summary>
    </member>
    <member name="F:LMF.Tracker.Compensations.ATS600.EATS600CameraType.Zero">
      <summary>
            Virtual camera. Is on the position of the laser.
            This camera is used as destination camera whe transforming from one coordinate system to other.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Compensations.ATS600.ATS600Compensation.PersistentCompensation">
      <summary>
                This is the only required element for the ATS600Compensation as Tracker Pilot internally
                uses the original WaveTrackerCompensation. So no translation into any LMF structure is required.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Compensations.AT401.AT401Compensation">
      <summary>
            Compensation for AT401
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.TargetCollectionWithConnectedProbe">
      <summary>
            Collection of Targets
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.TargetCollectionWithConnectedProbe.ConnectedProbes">
      <summary>
            List of current connected Probes
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.ConnectedProbe">
      <summary>
            Holds details to an <see cref="T:LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbe" /> currently connected by cable or wirless.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.ConnectedProbe.Probe">
      <summary>
            Reference to a probe in the <see cref="T:LMF.Tracker.Targets.TargetCollection" /></summary>
    </member>
    <member name="T:LMF.Tracker.Targets.ConnectedProbeCollection">
      <summary>
            A collection of all currently plugged in or wirelessly connected active probes. 
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.ConnectedProbeCollection.ChangedHandler">
      <summary>
            EventHandler delegate for <see cref="E:LMF.Tracker.Targets.ConnectedProbeCollection.Changed" /> event.
            </summary>
      <param name="sender">
      </param>
    </member>
    <member name="T:LMF.Tracker.Targets.ConnectedProbeCollection.ConnectBoxIpChangedHandler">
      <summary>
            EventHandler delegate for <see cref="E:LMF.Tracker.Targets.ConnectedProbeCollection.ConnectBoxIpChanged" /> event.
            </summary>
      <param name="sender">
      </param>
      <param name="newIp">
      </param>
    </member>
    <member name="E:LMF.Tracker.Targets.ConnectedProbeCollection.Changed">
      <summary>
            Occurs when the Collection has been modified.
            </summary>
    </member>
    <member name="E:LMF.Tracker.Targets.ConnectedProbeCollection.ConnectBoxIpChanged">
      <summary>
            Occurs when the ip of the connect box changes.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.LockOnToken">
      <summary>
            This LockOnToken is used to tell the tracker directly that it should use a specific target or a specific
            face of a probe for the lock-on process or the measurement. The LockOnToken is used by the commands
            <see cref="M:LMF.Tracker.Tracker.PositionToTarget(LMF.Tracker.Targets.LockOnToken,System.Boolean,System.Double,System.Double,System.Double)" /> and
            <see cref="M:LMF.Tracker.Measurements.MeasurementSettings.GoAndMeasureStationary(LMF.Tracker.Targets.LockOnToken,System.Boolean,System.Double,System.Double,System.Double)" />
            to make them faster by changing the target and face detection procedure: In case of a selectable target
            the target denoted by the LockOnToken is preselected and the tracker assumes this target at the given position.
            In case of a target that is not selectable (e.g. a probe) the detection procedure of the tracker is adapted to check first if the denoted
            target is at the given position and directly uses it. This also holds for the case a specific face of a probe is given through
            the LockOnToken.
            In case the tracker does not find the denoted target or probe face at the given position the normal (longer) detection
            procedure is executed. For the command GoAndMeasureStationary this fallback detection is disabled in case the LockOnToken
            denotes a reflector to speed up the measurement to the maximum.
            A LockOnToken may be retrieved by calling <see cref="M:LMF.Tracker.Targets.Target.GetLockOnToken" /> on the target
            or the probe face itself or by calling <see cref="M:LMF.Tracker.Targets.TargetCollection.CreateLockOnToken(System.String,System.String)" />
            The Name is the only visible property to the outside world and represents either the name of the target or the name
            of a probe face.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.LockOnToken.Name">
      <summary>
            Gives the user the name of the probe to be used. This is the only parameter that is presented
            to the user.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.LockOnToken.GUID">
      <summary>
            The GUID is used to use a different reflector than the preselected one. In case of an empty GUID (empty string, not null) the tracker
            just uses the preselected one.
            The GUID may also denote a probe. But this requires the tracker to look for the probe in the database. So
            it should be used as fallback only.
            The GUID has priority over all other parameters but is optional due to its bad performance.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.LockOnToken.ProbeType">
      <summary>
            Holds the type of the target to be used.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.LockOnToken.ProbeSerialNo">
      <summary>
            In case of a probe this number contains the serial number of the probe.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.LockOnToken.ProbeFaceNumber">
      <summary>
            For the probes that have several faces this number determines the required face.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.LockOnToken.Target">
      <summary>
            In case of a reflector we need the target to change the preselection in LMF in an efficient way.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Target">
      <summary>
            A target is any type of tool a tracker can perform measurements on.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.Target.Select">
      <summary>
            Selects this Target. Only works with targets where <see cref="P:LMF.Tracker.Targets.Target.IsSelectable" /> is true.
            Changes the <see cref="P:LMF.Tracker.Targets.TargetCollection.Selected" /> property if the selection was successful.
            If a Probe is active, it will preselect the target and change the <see cref="P:LMF.Tracker.Targets.TargetCollection.PreSelected" /> property.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.Target.GetLockOnToken">
      <summary>
            Returns the LockOnToken that is used by the PositionToTarget und GoAndMeasureStationary commands
            to tell the tracker the target directly instead of letting it detect it or taking the preselected target.
            This is the base function for all targets that works with the GUID. Using the GUID is not the fastest
            way as the tracker has to search for the probe. So using the derived versions makes sense for the 
            optimizations.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:LMF.Tracker.Targets.Target.IsSelectable">
      <summary>
            Returns wether this Target can be selected using <see cref="M:LMF.Tracker.Targets.Target.Select" /> or not.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.TargetCollection">
      <summary>
            Collection of Targets
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.TargetCollection.ChangedHandler">
      <summary>
            EventHandler delegate for the <see cref="E:LMF.Tracker.Targets.TargetCollection.Changed" /> event.
            </summary>
      <param name="sender">Sender collection</param>
    </member>
    <member name="T:LMF.Tracker.Targets.TargetCollection.SelectedChangedHandler">
      <summary>
             EventHandler delegate for the <see cref="E:LMF.Tracker.Targets.TargetCollection.SelectedChanged" /> event.
            </summary>
      <param name="sender">Sender collection</param>
      <param name="paramTarget">Newly selected Target</param>
    </member>
    <member name="T:LMF.Tracker.Targets.TargetCollection.PreSelectedChangedHandler">
      <summary>
            EventHandler delegate for the <see cref="E:LMF.Tracker.Targets.TargetCollection.PreSelectedChanged" /> event.
            </summary>
      <param name="sender">Sender collection</param>
      <param name="paramTarget">Newly preselected Target</param>
    </member>
    <member name="T:LMF.Tracker.Targets.TargetCollection.TargetPositionChangedHandler">
      <summary>
            EventHandler delegate for the <see cref="E:LMF.Tracker.Targets.TargetCollection.TargetPositionChanged" /> event.
            </summary>
      <param name="sender">Tracker</param>
      <param name="paramPosition">Target position</param>
    </member>
    <member name="T:LMF.Tracker.Targets.TargetCollection.ActiveTipChangedHandler">
      <summary>
            EventHandler delegate for the <see cref="E:LMF.Tracker.Targets.TargetCollection.ActiveTipChanged" /> event.
            </summary>
      <param name="sender">Tracker</param>
      <param name="paramTip">Newly attached Tip or null if removed</param>
    </member>
    <member name="M:LMF.Tracker.Targets.TargetCollection.GetEnumerator">
      <summary>
            Returns an enumerator of Target.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.Targets.TargetCollection.CreateLockOnToken(System.String,System.String)">
      <summary>
            Helper function to create a LockOnToken based on the given information of the user
            to select a target or a probe face that is currently available on the given tracker.
            The interface is rather generic to allow different inputs. Based on this input
            LMF looks for a target or even a probe face that is available on the tracker and that
            matches the given parameters.
            The search order in the target tree for the content of the first parameter is the following from top to bottom:
            <list type="bullet"><item><description>A matching GUID (any target or probe face)</description></item><item><description>A matching Name (any target)</description></item><item><description>A matching serial number (any probe)</description></item><item><description>A matching serial number (any probe) with the prefix "S" or "LLS" to support the way T-Scan collect uses the scanners.</description></item></list>
            The string comparison for these three possible input types is not case sensitive.
            The serial number is only unique within the same type of probe. Two probes of different type may have the same
            serial number. In that case the first one is taken by LMF when walking through the tree of targets.
            </summary>
      <param name="paramTarget">This parameter may contain one of the following parts:
                <list type="bullet"><item><description>GUID of any target or probe face</description></item><item><description>Name of any target</description></item><item><description>Serial number of any probe (with optionally the prefix "S" or "LLS")</description></item></list></param>
      <param name="faceNumber">This parameter is only relevant in case the first parameter (target) denotes a probe that contains
                                     several probe faces. In that case this parameter defines the ID of te face of the probe to lock on.
                                     In case this parameter is ommitted the probe face with ID 1 is taken as default.
                                     </param>
      <returns>In case all parameters are valid and the required target
                     (and probe face) is available on the tracker it returns a LockOnToken corresponding to the
                     required target (or probe face). In case the faceNumber is not valid it is treated as
                     default face (1). In case the target is not valid or not available on the tracker the method returns null
                     and writes a silent exception into the customer log.</returns>
      <example>
            There are some sample calls:
            <list type="bullet"><item><description>var token = CreateLockOnToken("D9796114-F2F0-4C06-ACF1-5B792B161A1F", null);  // Target or probe face using a GUID.</description></item><item><description>var token = CreateLockOnToken("D9796114-F2F0-4C06-ACF1-5B792B161A1F", "2"); // Probe face using GUID of probe and face ID.</description></item><item><description>var token = CreateLockOnToken("2034", "3"); // Probe face using serial number and face ID</description></item><item><description>var token = CreateLockOnToken("T-Probe #2034", "2"); // Probe face using probe name and face ID.</description></item></list></example>
    </member>
    <member name="P:LMF.Tracker.Targets.TargetCollection.Selected">
      <summary>
            Gets the currently Selected Target. This is a Reflector or a Probe depending whats locked on. If the beam is broken or no target is locked, the Selected target is set to null. In case of 40x Tracker the Selected Target is never null but the last locked on target on beam break. 
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.TargetCollection.PreSelected">
      <summary>
            Currently PreSelected Target, will become active as soon as you lock on a Reflector.
            </summary>
    </member>
    <member name="E:LMF.Tracker.Targets.TargetCollection.ActiveTipChanged">
      <summary>
            Occurs when the active Tip has changed.
            </summary>
    </member>
    <member name="E:LMF.Tracker.Targets.TargetCollection.TargetPositionChanged">
      <summary>
            DRO Stream, is sent 8 times per second if locked on a Target.
            </summary>
    </member>
    <member name="E:LMF.Tracker.Targets.TargetCollection.PreSelectedChanged">
      <summary>
            Occurs when the Preselected Target has changed. This happens when a user selects a new reflector.
            </summary>
    </member>
    <member name="E:LMF.Tracker.Targets.TargetCollection.SelectedChanged">
      <summary>
            Occurs when the Selected Target has changed. This happens when the Tracker locks on a new Target.
            </summary>
    </member>
    <member name="E:LMF.Tracker.Targets.TargetCollection.Changed">
      <summary>
            Occurs when the Collection has been modified, for example an unknown Probe has been attached.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.TargetSearch">
      <summary>
            The TargetSearch class is used to find targets in the field of view of the tracker by executing a spiral search.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.TargetSearch.FinishedEventHandler">
      <summary>
            EventHandler delegate for the <see cref="E:LMF.Tracker.Targets.TargetSearch.Finished" /> event
            </summary>
      <param name="sender">
      </param>
      <param name="foundTarget">
      </param>
      <param name="ex">
      </param>
    </member>
    <member name="M:LMF.Tracker.Targets.TargetSearch.Start">
      <summary>
            This will start a target search using the currently active settings. <see cref="P:LMF.Tracker.Targets.TargetSearch.ApproximateDistance" /> /  <see cref="P:LMF.Tracker.Targets.TargetSearch.Radius" /> /  <see cref="P:LMF.Tracker.Targets.TargetSearch.Timeout" /></summary>
      <returns>Returns the found target. Throws an exception if no target was found</returns>
    </member>
    <member name="M:LMF.Tracker.Targets.TargetSearch.StartAsync">
      <summary>
            This will start an asynchronous target search using the currently active settings. <see cref="P:LMF.Tracker.Targets.TargetSearch.ApproximateDistance" /> /  <see cref="P:LMF.Tracker.Targets.TargetSearch.Radius" /> /  <see cref="P:LMF.Tracker.Targets.TargetSearch.Timeout" />
            As soon as the target search is finished, the <see cref="E:LMF.Tracker.Targets.TargetSearch.Finished" /> event will be raised.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.TargetSearch.Stop">
      <summary>
            Stops the currently running target search. Has no effect if no target search is running.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.TargetSearch.ApproximateDistance">
      <summary>
            The approximate distance to the target
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.TargetSearch.Radius">
      <summary>
            The radius which is used to search for targets
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.TargetSearch.Timeout">
      <summary>
            The maximum amount of time the target search will run before stopping
            </summary>
    </member>
    <member name="E:LMF.Tracker.Targets.TargetSearch.Finished">
      <summary>
            Occurs as soon the TargetSearch has been finished
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Reflectors.SceReflector15">
      <summary>
            SCE reflectors are only supported with AT9x0 trackers.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Reflectors.CateyeReflector">
      <summary>
            Cateye reflectors are only supported with AT9x0 and AT901 trackers.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Reflectors.MirrorReflector">
      <summary>
            Mirror reflectors are only supported with AT40x trackers.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Reflectors.RedRingReflector78">
      <summary>
            Supported for all trackers.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Reflectors.BreakResistantReflector05">
      <summary>
            Break resistant 05' reflectors are not supported at the moment.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Reflectors.BreakResistantReflector15">
      <summary>
            Supported for all trackers families
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Reflectors.FixedInstallationReflector05">
      <summary>
            Supported for all trackers families
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Reflectors.RedRingReflector05">
      <summary>
            Supported for all trackers.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Reflectors.RedRingReflector15">
      <summary>
            Supported for all trackers.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Reflectors.ToolingBallReflector05">
      <summary>
            Supported for all trackers families except ATS600.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Reflectors.Reflector">
      <summary>
            A Reflector is a passive Target that is not detected automatically.
            Therefore you have to select the reflector you want to work with using the <see cref="M:LMF.Tracker.Targets.Reflectors.Reflector.Select" /> Method.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.Reflectors.Reflector.Select">
      <inheritDoc />
    </member>
    <member name="M:LMF.Tracker.Targets.Reflectors.Reflector.GetLockOnToken">
      <summary>
            Returns the LockOnToken that is used by the PositionToTarget und GoAndMeasureStationary commands
            to tell the tracker the target directly instead of letting it detect it or taking the preselected target.
            This variant is optimized for the reflectors by setting the probe type to reflector.
            The GUID may theoretically be deleted if the preselected reflector is used. But in case the user
            stores the LockOnToken in its software while the tracker changes the state the preselected reflector
            may change. So the GUID is mandatory to even use the correct ADM offset in case the preselected
            reflector has changed in between. Otherwise the user might get wrong measurements.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:LMF.Tracker.Targets.Reflectors.Reflector.SurfaceOffset">
      <summary>
            Gets the SurfaceOffset of this Reflector
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Reflectors.Reflector.ADMOffset">
      <summary>
            Gets the ADMOffset of this Reflector
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.ScanTargets.ReferenceSphere">
      <summary>
            Predefined sphere target used for several compensation procedures in Tracker Pilot.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.ScanTargets.CustomSphere">
      <summary>
            Defines a sphere target with a diameter that is selected by the customer. Using this target type the user may define
            his own spheres and measure their center point.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.ScanTargets.ScanTarget">
      <summary>
            Abstract base class for all scan targets to be able to properly distinguish between probes, reflectors and
            scan targets in general.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.ScanTargets.ScanTarget.Select">
      <inheritDoc />
    </member>
    <member name="T:LMF.Tracker.Targets.ScanTargets.Surface">
      <summary>
            Predefined target used to measure and scan all kinds of surfaces without using
            a reflector. It can be used to do any kind of measurement to e.g. a wall directly or
            to scan a wall using an appropriate scan profile.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.ScanTargets.Surface.GetLockOnToken">
      <summary>
            Returns the LockOnToken that is used by the PositionToTarget und GoAndMeasureStationary commands
            to tell the tracker the target directly instead of letting it detect it or taking the preselected target.
            Uses the base class but sets the probe type accordingly.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:LMF.Tracker.Targets.ScanTargets.Sphere">
      <summary>
            Abstract sphere target to be able to check if a target is a sphere (several sphere types are available).
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.ScanTargets.Sphere.GetLockOnToken">
      <summary>
            Returns the LockOnToken that is used by the PositionToTarget und GoAndMeasureStationary commands
            to tell the tracker the target directly instead of letting it detect it or taking the preselected target.
            Uses the base class but sets the probe type accordingly.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.ScanTargets.SteelSphere15">
      <summary>
            Predefined target to measure the center point of a steel sphere with a diameter of
            1.5 inches.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.Probe">
      <summary>
            Base class for Probes
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.Probe.SerialNumber">
      <summary>
            Gets the SerialNumber of this Probe
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.PassiveProbes.PassiveProbe">
      <summary>
            Passive probes are not recognized automatically from the Tracker and have to be selected manually like Reflectors.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.Probes.PassiveProbes.PassiveProbe.Select">
      <inheritDoc />
    </member>
    <member name="M:LMF.Tracker.Targets.Probes.PassiveProbes.PassiveProbe.Deselect">
      <summary>
            Deselects this Probe and selects the Preselected Target afterwards.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.Probes.PassiveProbes.PassiveProbe.GetLockOnToken">
      <summary>
            Returns the LockOnToken that is used by the PositionTo und GoAndMeasureStationary commands
            to tell the tracker the target directly instead of letting it detect it or taking the preselected target.
            This implementation is just provided to be able to do the correct logging in the customer log. But as the BProbe
            is not part of the AT9x0 series taking the LockOnToken is not optimizing the positioning and measurement process.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbe">
      <summary>
            ActiveProbes are Probe that are automatically set as the Selected Target as soon as you lock on. 
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbe.SelectedTipDefinitionChangedHandler">
      <summary>
            Occurs when the Active Tip of this Probe has been plugged in or removed.
            </summary>
      <param name="sender">Probe</param>
      <param name="Tip">Tip that has been plugged in, null if plugged out</param>
    </member>
    <member name="M:LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbe.Select">
      <summary>
            An ActiveProbe cannot be selected manually.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbe.GetLockOnToken">
      <summary>
            Returns the LockOnToken that is used by the PositionTo und GoAndMeasureStationary commands
            to tell the tracker the target directly instead of letting it detect it or taking the preselected target.
            This variant is optimized for the probes by providing the probe type and serial number. We have no
            face here as the customer works on the probe. To directly lock onto a probe face the LockOnToken must
            be received from a ProbeFace directly.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbe.GetLockOnTokenInternal">
      <summary>
            Helper function for cascading calls to GetLockOnToken to avoid double logging of this function.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbe.NumberOfMounts">
      <summary>
            Gets the nubmer of mounts of this probe.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbe.ActiveMount">
      <summary>
            Gets the number of the active mount of this probe. This value is 0 if no tip is connected or if the selected tip is a virtual tip!
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbe.Tips">
      <summary>
            Gets the collection of all Tips compensated for this probe.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbe.ProbeFaces">
      <summary>
            Gets the collection of all Faces of this probe
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbe.ProbeType">
      <summary>
            Internal ProbeType
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbeImportHelper">
      <summary>
            Helper functions for the import of some active probes: The terminology is based on the LMF target hierarchy. So a tip means
            a tip compensation. The hardware is denoted by the tip definition.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbeImportHelper.ImportFrom(LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbe,LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbe)">
      <summary>
            Import function to allow full and partial import of probes to allow to add a new probe and also to allow
            extending the probe by additional probe faces or new probe faces or new compensations or missing or new tips.
            Using this function an incremental extension of an probe in the target list is possible.
            Warning: All the comparisons of the age of the different elements must not include equality as
                     this deletes the elements in case of importing the same elements twice.
            </summary>
      <param name="existingProbe">
      </param>
      <param name="probeToImport">
      </param>
      <returns>Returns if a facecomp was overwritten or not</returns>
    </member>
    <member name="M:LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbeImportHelper.MarkExistingTipsToBeRemovedDueToNewerProbeFaceComp(LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbe,LMF.Tracker.Targets.Probes.ActiveProbes.Common.ProbeFace)">
      <summary>
            The tips are only marked to be removed. Removing the illegal ones (timestamp comparison between tip and probe face comp) is done later on
            in the function GetInvalidTips to avoid the tracker working on them too early.
            The handling of the tips is done per probe face as the face comps of them may have different
            timestamps (possibly older than the existing ones) so that not all tips are to be treated the same way.
            </summary>
      <param name="existingProbe">
      </param>
      <param name="existingFace">
      </param>
    </member>
    <member name="M:LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbeImportHelper.AddTipsToBeImported(LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbe,LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbe,LMF.Tracker.Targets.Probes.ActiveProbes.Common.ProbeFace)">
      <summary>
            Add the tips of the probe to be imported as the corresponding probe face comp is newer or of
            the same age as the existing one.
            The handling of the tips is done per probe face as the face comps of them may have different
            timestamps (possibly older than the existing ones) so that not all tips are to be treated the same way.
            </summary>
      <param name="existingProbe">
      </param>
      <param name="probeToImport">
      </param>
      <param name="existingFace">
      </param>
    </member>
    <member name="M:LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbeImportHelper.IsDuplicateVirtualTip(LMF.Tracker.Targets.Probes.ActiveProbes.Tips.TipCollection,LMF.Tracker.Targets.Probes.ActiveProbes.Tips.Tip)">
      <summary>
            Helper function to identify the duplicate virtual tips to avoid duplicates in the target list.
            </summary>
      <param name="existingTips">
      </param>
      <param name="importTip">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.TProbes.TProbe">
      <summary>
            T-Probe
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.Common.ProbeFaceCompensation">
      <summary>
            Compensation of a ProbeFace
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.Common.ProbeFace">
      <summary>
            Probe Face
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.Probes.ActiveProbes.Common.ProbeFace.GetLockOnToken">
      <summary>
            Returns the LockOnToken that is used by the PositionTo und GoAndMeasureStationary commands
            to tell the tracker the target directly instead of letting it detect it or taking the preselected target.
            This is the optimized version that defines the probe type, serial number and face directly.
            There is no GUID.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.Common.ProbeFaceCollection">
      <summary>
            Probe Face Collection
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.Common.ProbeFaceCollection.ChangedHandler">
      <summary>
            EventHandler delegate for <see cref="E:LMF.Tracker.Targets.Probes.ActiveProbes.Common.ProbeFaceCollection.Changed" /> event.
            </summary>
      <param name="sender">
      </param>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.Common.ProbeFaceCollection.SelectedChangedHandler">
      <summary>
            EventHandler delegate for <see cref="E:LMF.Tracker.Targets.Probes.ActiveProbes.Common.ProbeFaceCollection.SelectedChanged" /> event.
            </summary>
      <param name="sender">
      </param>
      <param name="paramProbeFace">
      </param>
    </member>
    <member name="E:LMF.Tracker.Targets.Probes.ActiveProbes.Common.ProbeFaceCollection.Changed">
      <summary>
            Occurs when the Collection has been modified.
            </summary>
    </member>
    <member name="E:LMF.Tracker.Targets.Probes.ActiveProbes.Common.ProbeFaceCollection.SelectedChanged">
      <summary>
            Occurs when the Tracker locked on another ProbeFace.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.TScans.LAS">
      <summary>
            Leica Absolute Scanner Probe
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.TScans.TScan">
      <summary>
            TScan Probe
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.TMacs.TMacExtended">
      <summary>
            T-Mac Extended has one or more Faces and a Mount to attach Tips.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.TMacs.TMacFrame">
      <summary>
            T-Mac Frame has one Face and no Mount to attach Tips.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.TMacs.TMac">
      <summary>
            T-Mac Base class
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.TMacs.TMacBasic">
      <summary>
            T-Mac Basic has one Face and no Mount to attach Tips.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.TMacs.TMacInspect">
      <summary>
            T-Mac Inspect has one or more Faces and a Mount to attach Tips.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.TMacs.TMacMultiface">
      <summary>
            T-Mac Multiface has more than one Faces and a Mount to attach Tips.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.AP21s.AP21">
      <summary>
            AP21
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.AS1XL">
      <summary>
            Absolute Scanner
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.AS1XL.Select">
      <summary>
            Selects this Tip. All following measurements will use this Tip Compensation.
            The selected tip is persistent after LMF reconnect but not after controller reboot.
            Warning: In case a tip (compensation) is set to ignored during a tip compensation wizard in Tracker Pilot
                     this deselects the tip as ignoring the tip selects a zero tip that overwrites the
                     previously active tip. So the desired tip needs to be selected again internally in
                     LMF once the tip should not be ignored anymore.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.AS1XL.Deselect">
      <summary>
            Deselects this Tip. This will set any other attached Tip active.
            Warning: In case a tip (compensation) is set to ignored during a tip compensation wizard in Tracker Pilot
                     this deselects the tip as ignoring the tip selects a zero tip that overwrites the
                     previously active tip. So the desired tip needs to be selected again internally in
                     LMF once the tip should not be ignored anymore.
                     Otherwise the physically connected tip definition and possibly its compensation (tip) is active.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.AS1XL.IsSelected">
      <summary>
            Checks whether this Tip is currently selected or not
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.AS1_1">
      <summary>
            Absolute Scanner
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.AS1_1.Select">
      <summary>
            Selects this Tip. All following measurements will use this Tip Compensation.
            The selected tip is persistent after LMF reconnect but not after controller reboot.
            Warning: In case a tip (compensation) is set to ignored during a tip compensation wizard in Tracker Pilot
                     this deselects the tip as ignoring the tip selects a zero tip that overwrites the
                     previously active tip. So the desired tip needs to be selected again internally in
                     LMF once the tip should not be ignored anymore.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.AS1_1.Deselect">
      <summary>
            Deselects this Tip. This will set any other attached Tip active.
            Warning: In case a tip (compensation) is set to ignored during a tip compensation wizard in Tracker Pilot
                     this deselects the tip as ignoring the tip selects a zero tip that overwrites the
                     previously active tip. So the desired tip needs to be selected again internally in
                     LMF once the tip should not be ignored anymore.
                     Otherwise the physically connected tip definition and possibly its compensation (tip) is active.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.AS1_1.IsSelected">
      <summary>
            Checks whether this Tip is currently selected or not
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.AS1Sim">
      <summary>
            Scanner Tip
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.AS1Sim.Select">
      <summary>
            Selects this Tip. All following measurements will use this Tip Compensation.
            The selected tip is persistent after LMF reconnect but not after controller reboot.
            Warning: In case a tip (compensation) is set to ignored during a tip compensation wizard in Tracker Pilot
                     this deselects the tip as ignoring the tip selects a zero tip that overwrites the
                     previously active tip. So the desired tip needs to be selected again internally in
                     LMF once the tip should not be ignored anymore.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.AS1Sim.Deselect">
      <summary>
            Deselects this Tip. This will set any other attached Tip active.
            Warning: In case a tip (compensation) is set to ignored during a tip compensation wizard in Tracker Pilot
                     this deselects the tip as ignoring the tip selects a zero tip that overwrites the
                     previously active tip. So the desired tip needs to be selected again internally in
                     LMF once the tip should not be ignored anymore.
                     Otherwise the physically connected tip definition and possibly its compensation (tip) is active.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.AS1Sim.IsSelected">
      <summary>
            Checks whether this Tip is currently selected or not
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.AS1">
      <summary>
            Scanner Tip
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.AS1.Select">
      <summary>
            Selects this Tip. All following measurements will use this Tip Compensation.
            The selected tip is persistent after LMF reconnect but not after controller reboot.
            Warning: In case a tip (compensation) is set to ignored during a tip compensation wizard in Tracker Pilot
                     this deselects the tip as ignoring the tip selects a zero tip that overwrites the
                     previously active tip. So the desired tip needs to be selected again internally in
                     LMF once the tip should not be ignored anymore.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.AS1.Deselect">
      <summary>
            Deselects this Tip. This will set any other attached Tip active.
            Warning: In case a tip (compensation) is set to ignored during a tip compensation wizard in Tracker Pilot
                     this deselects the tip as ignoring the tip selects a zero tip that overwrites the
                     previously active tip. So the desired tip needs to be selected again internally in
                     LMF once the tip should not be ignored anymore.
                     Otherwise the physically connected tip definition and possibly its compensation (tip) is active.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.AS1.IsSelected">
      <summary>
            Checks whether this Tip is currently selected or not
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.UnknownTip">
      <summary>
            If the software is too old to know the tip type or if a tip is defect and cannot send its type, it will be unknown.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.ScannerTip">
      <summary>
            Scanner Tip is only used for compatibility reasons and will never appear on a real system.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.VirtualTip">
      <summary>
            Virtual Tips can be selected used to work with Tips, that are not automatically recognized or to simulate a Tip Compensation.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.VirtualTip.Select">
      <summary>
            Selects this Virtual Tip. All following measurements will use this Tip Compensation.
            The selected tip is persistent after LMF reconnect but not after controller reboot.
            Warning: In case a tip (compensation) is set to ignored during a tip compensation wizard in Tracker Pilot
                     this deselects the virtual tip as ignoring the tip selects a zero tip that overwrites the
                     previously active virtual tip. So the desired virtual tip needs to be selected again internally in
                     LMF once the tip should not be ignored anymore.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.VirtualTip.Deselect">
      <summary>
            Deselects this Virtual Tip. This will set any other attached Tip active.
            Warning: In case a tip (compensation) is set to ignored during a tip compensation wizard in Tracker Pilot
                     this deselects the virtual tip as ignoring the tip selects a zero tip that overwrites the
                     previously active virtual tip. So the desired virtual tip needs to be selected again internally in
                     LMF once the tip should not be ignored anymore.
                     Otherwise the physically connected tip definition and possibly its compensation (tip) is active.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.VirtualTip.IsSelected">
      <summary>
            Checks whether this VirtualTip is currently selected or not
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.FixedTip">
      <summary>
            Fixed Tip
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.Tip">
      <summary>
            A Tip can be used with T-Probes and TMacs to measure hidden Points.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.Tip.IsSelectable">
      <summary>
            Checks wether this Tip is manually selectable or not.
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.Tip.ShankTimeStamp">
      <summary>
            TimeStamp of the Shank Compensation
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.Tip.ConnectedToMount">
      <summary>
            The number of the Mount the Tip is compensated for
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.Tip.CompensationTarget">
      <summary>
            The CompensationTarget of this Tip
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.Tip.TranslationX">
      <summary>
            X Translation
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.Tip.TranslationY">
      <summary>
            Y Translation
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.Tip.TranslationZ">
      <summary>
            Z Translation
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.Tip.ShankAngleX">
      <summary>
            X Shank angle
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.Tip.ShankAngleY">
      <summary>
            Y Shank angle
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.Tip.ShankAngleZ">
      <summary>
            Z Shank angle
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.Tip.ShankDiameter">
      <summary>
            The shank diameter
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.Tip.Length">
      <summary>
            The Tip length
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.Tip.BallDiameter">
      <summary>
            The BallDiameter
            </summary>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.Tip.ShankIsValid">
      <summary>
            Returns true if the Shank is compensated
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.TipCollection">
      <summary>
            Collection of Tips.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.TipCollection.ChangedHandler">
      <summary>
            EventHandler Delegate for <see cref="E:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.TipCollection.Changed" /> event.
            </summary>
      <param name="sender">The collection</param>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.TipCollection.SelectedChangedHandler">
      <summary>
            EventHandler Delegate for <see cref="P:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.TipCollection.Selected" /> event.
            </summary>
      <param name="sender">The sender collection</param>
      <param name="paramTip">The newly selected Tip</param>
    </member>
    <member name="P:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.TipCollection.Selected">
      <summary>
            This property is persistent after LMF reconnect but not after controller reboot
            </summary>
    </member>
    <member name="E:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.TipCollection.Changed">
      <summary>
            Occurs when the Collection has been modified
            </summary>
    </member>
    <member name="E:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.TipCollection.SelectedChanged">
      <summary>
            Occurs when the Selected Tip has changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.TouchTriggerTip">
      <summary>
            TouchTrigger Tip
            </summary>
    </member>
    <member name="T:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.PartnerTip">
      <summary>
            Fixed Tip
            </summary>
    </member>
    <member name="T:LMF.Tracker.Internals.IDistanceProvider">
      <summary>
            This interface provide information/functions related to the distance
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.IDistanceProvider.GetLastStereoAtrDistance">
      <summary>
            Get the last Atr distance
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.Internals.IDistanceProvider.GetLastDroDistance">
      <summary>
            Get the last Dro distance
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.Internals.IDistanceProvider.GetDefaultDistance">
      <summary>
            Get the default distance. The distance is used, when the ATR and DRO are 0.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:LMF.Tracker.Internals.ITrackerDiscoveryData">
      <summary>
            interface (private) for holding the tracker discovery data
            </summary>
    </member>
    <member name="T:LMF.Tracker.Internals.LmfQueueWorker">
      <summary>
            This class provides a number of parallel queues (default is 1) that execute the actions sequentially
            within the queue but all queues in parallel using the thread pool.
            It is used for all types of actions where the same type of action needs to preserve the action order but
            different types of actions have to be executed in parallel.
            This is the case for the TPI client where several indications (status change or measurement) have to be executed
            sequentially if they are of the same type but have to be executed in parallel if they are of different types.
            Using these parallel queues we allow the TPI client to immediately execute a TPI command in case an indication arrives.
            Otherwise this "callback" would run into a deadlock.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.LmfQueueWorker.#ctor(System.Threading.SynchronizationContext,System.Int32,System.Action{System.Exception})">
      <summary>
            Creation of the worker with the required number of parallel queues (default is 1).
            </summary>
      <param name="trackerSynchronizationContext">
      </param>
      <param name="numQueues">
      </param>
    </member>
    <member name="M:LMF.Tracker.Internals.LmfQueueWorker.SetTracker(LMF.Tracker.Tracker)">
      <summary>
            Set the tracker to be able to find out if the tracker is still connected.
            Otherwise the work does not need to be continued.
            The tracker is set through this method as the TPI client does not know the tracker
            when constructing the LmfQueueWorker.
            Important: The tracker has to be set before enqueuing any action. Otherwise
                       the action will be discarded.
            </summary>
      <param name="tracker">
      </param>
    </member>
    <member name="M:LMF.Tracker.Internals.LmfQueueWorker.SetMaxActionsInQueue(System.Int32,System.Int32)">
      <summary>
            Restricts the number of items of a queue. Setting it to 0 means that there is no restriction.
            Is used if a new action or a series of new actions fully replace the older ones.
            </summary>
      <param name="queueIndex">
      </param>
      <param name="maxQueueLength">
      </param>
    </member>
    <member name="M:LMF.Tracker.Internals.LmfQueueWorker.EnqueueAction(System.Action,System.Guid,System.Int32)">
      <summary>
            Interface method to deliver an action to be executed within a given queue (default is index 0).
            </summary>
      <param name="action">
      </param>
      <param name="actionId">The action identification. This can be user to check if the action was executed.</param>
      <param name="queueIndex">
      </param>
    </member>
    <member name="M:LMF.Tracker.Internals.LmfQueueWorker.TriggerExecution(System.Int32)">
      <summary>
            Internal helper function to enqueue an action to the thread pool if no other action of the same
            queue is running and the queue is not empty.
            It is triggered twice.
            - When an action is enqueued.
            - When an action terminates to trigger the next one.
            </summary>
      <param name="queueIndex">
      </param>
    </member>
    <member name="M:LMF.Tracker.Internals.LmfQueueWorker.GetNumberOfPendingActions(System.Int32)">
      <summary>
            Interface method to get the number of enqueued actions within a given queue. Can be used
            by any client to react to too many actions in the queue.
            The class writes a general warning in case the number is above 1000 anyway.
            </summary>
      <param name="queueIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.Internals.LmfQueueWorker.GetPendingActions(System.Int32)">
      <summary>
            Interface method to get the id of pending actions within a given queue.
            Can be used to check if the concrete action/actions was/where already executed.
            Only action's which are Enqueued with NOT Guid.Empty are listed.
            The class writes a general warning in case the number is above 1000 anyway.
            </summary>
      <param name="queueIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.Internals.LmfQueueWorker.IsActionRunning(System.Int32)">
      <summary>
            Interface method to find out if an action is currently running. It may be used in combination with
            GetNumberOfPendingActions to find out if the queue is empty and there is no running action anymore
            to make sure that all the work is done until the next action enters the queue.
            Important: Check first for the empty queue and then for the running one as the running flag
                       is shortly disabled between two subsequent actions on the same queue to
                       check if the next one may be started.
            </summary>
      <param name="queueIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:LMF.Tracker.Internals.TrackerProductLineHelper">
      <summary>
            Helper class to determinate product family from the tracker/trackerType
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.TrackerTypeHelper.ConvertInternalTrackerTypeToOfficialTrackerName(System.String)">
      <summary>
            Helper function to translate the internal to the official tracker type. In case the translation
            is not possible the raw value is returned to avoid throwing any exceptions.
            </summary>
      <param name="internalTrackerType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.Internals.TrackerTypeHelper.GetProductNameForSensorType(MGenieSensorPersistency.Common.ESensorType)">
      <summary>
            Helper function to translate the tracker type enum into the corresponding product name string.
            </summary>
      <param name="sensorType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.Internals.TrackerTypeHelper.TranslateSensorTypeToProductName(MGenieSensorPersistency.Common.ESensorType,System.String)">
      <summary>
            Internal helper function to translate the tracker type to the different required strings.
            </summary>
      <param name="sensorType">
      </param>
      <param name="separationCharacter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:LMF.Tracker.Internals.VideoStreamResolution">
      <summary>
            Determinate the video stream resolution.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Internals.VideoStreamResolution.SuperLow">
      <summary>
            Super low resolution (e.g. 40x)
            </summary>
    </member>
    <member name="F:LMF.Tracker.Internals.VideoStreamResolution.Low">
      <summary>
            The low resolution
            </summary>
    </member>
    <member name="F:LMF.Tracker.Internals.VideoStreamResolution.Medium">
      <summary>
            The medium resolution
            </summary>
    </member>
    <member name="F:LMF.Tracker.Internals.VideoStreamResolution.High">
      <summary>
            The high resolution
            </summary>
    </member>
    <member name="T:LMF.Tracker.Internals.VideoZoomLevel">
      <summary>
            Determinate the video zoom level.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Internals.VideoZoomLevel.Zoom1x">
      <summary>
            No zoom
            </summary>
    </member>
    <member name="F:LMF.Tracker.Internals.VideoZoomLevel.Zoom2x">
      <summary>
            2x zoom
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.Startup_Connect">
      <summary>
            Override this method to internally connect to the tracker device by its coorect protocol.
            Open the transport layer and prepare for sending and receiving messages.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.Startup_SetDefaultUnitsAndAlignments">
      <summary>
            Override this method to internally set the default units and alignment values
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.Startup_FillupTargets">
      <summary>
            Override this method and get all data from tracker to fill up the target list.
            This means objects like "Reflectors", "TMacs", "TProbes", etc. if any
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.Startup_FillupCompensations">
      <summary>
            Override this method and get all data from tracker to fill up the tracker compensation list.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.Startup_InitializeNetworkSettings">
      <summary>
            Override this method and get all data from tracker to initialize the network settings
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.Startup_PrepareStationaryMeasurementsWithProfiles">
      <summary>
            Override this method to prepare the stationary measurement object for incoming
            measurements and fill up the profiles list with MeasurementProfile objects which
            are supported by the specific tracker.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.Startup_PrepareContinuousMeasurementsWithProfiles">
      <summary>
            Override this method to prepare the continuous measurement object for incoming
            measurements and fill up the profiles list with TriggerProfile objects which
            are supported by the specific tracker.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.Startup_PrepareMeteoStationSensorCollections">
      <summary>
            Override this method to initialize the meteostation object and fill up the
            corresponding sensor collections for humidity, pressure and temperature with
            specific sensor classes which are support by this specific tracker.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.Startup_PrepareOVC">
      <summary>
            Override this method to prepare the OVC part to be ready for capturing video streams.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.Startup_PrepareTargetSearch">
      <summary>
            Override this method to prepare the target search
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.Startup_PrepareInclinationSensor">
      <summary>
            Override this method to prepare the inclination sensor to measure inclinations
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.Startup_InitializeMeasurementStatus">
      <summary>
            Override this method to get the actual measurement status and prepare for incoming changes
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.Startup_InitializeFaceStatus">
      <summary>
            Override this method to get the actual face status and prepare for changes
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.Startup_InitializePowerStati">
      <summary>
            Override this method to get the actual power stati of sub components and prepare for changes
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.Startup_InitializeAccuracyModel">
      <summary>
            Override this method to initialize accuracy model (used for tolerancing) of the tracker
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.Startup_InitializeTrackerObject">
      <summary>
            Override this method to initialize root object (Tracker) and prepare for changes
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.Startup_Finalize">
      <summary>
            Override this method to do some finalizing work at the end of the startup sequence
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.BeforeTryReestablishConnection">
      <summary>
            Override to call your code which should happened when tracker is disconnected, and reconnection will be started
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.TryReestablishConnection">
      <summary>
            Override to call your code which should happened on reestablish connection
            </summary>
      <returns> True if connection is successfully restored, False the reconnection failed.</returns>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.AfterTryReestablishConnection">
      <summary>
            Override to call your code which should happened after the connection was successfully reestablished after disconnect.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.RaiseConnectionLost(System.TimeSpan)">
      <summary>
            Is overriden only in simulators. The call simulate the connection lost with the time reconnectTime
            </summary>
      <param name="reconnectTime">
      </param>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.Startup_InitializeMeasurementConfiguration">
      <summary>
            Override this method to do initialize the MeasurementConfiguration
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.Shutdown_Disconnect">
      <summary>
            Override this method to shutdown the connection from adapter to the tracker
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.OverviewCameraStartAsync(System.Nullable{LMF.Tracker.Internals.VideoStreamResolution})">
      <summary>
            Start the Overview camera. The video stream is open with the 'videoStreamResolution'
            If the 'videoStreamResolution' == null, the last open/used videoStreamResolution is used. (used when automatically restarting the streams).
            </summary>
      <param name="videoStreamResolution">
      </param>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.RestartOverviewCameraStream">
      <summary>
            Function restart/recreate the camera stream without closing the dialog. If the camera stream was not active (OverviewCamera window was not open), function do nothing.
            The function is called after successful reconnect.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.SelectTarget(LMF.Tracker.Targets.Target)">
      <summary>
            Selects a new target. For Genie and Wave the system falls back to the target selected in the tracker
            in case of an exception. For the TPI based trackers this is not the case.
            </summary>
      <param name="target">
      </param>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.MotorRunIn">
      <summary>
            This method is used to recalibrate the Drais 1.5 motors in AT40x Trackers.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.WaitForReadyState(System.Int32)">
      <summary>
            Here we assume that the TargetChangeEvent leaving the target possibly locked onto before
            this positioning command has been received before the tracker returning from the command.
            The event locking onto the new target is assumed to be either before or after.
            </summary>
      <param name="time">
      </param>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.WaitForTargetChange(System.Int32)">
      <summary>
            Here we assume that the TargetChangeEvent leaving the target possibly locked onto before
            this positioning command has been received before the tracker returning from the command.
            The event locking onto the new target is assumed to be either before or after.
            </summary>
      <param name="time">
      </param>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.AllowRegionZoom">
      <summary>
            True if firmware allow region zoom. The region zoom is zoom with region of interest
            </summary>
      <returns>True if firmware allow region zoom. Default false.</returns>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.GetDefaultDistance">
      <summary>
            This distance is used, when LastDro or LastStereoAtr can not be used.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.UpdateForNewUserLevel(Leica.Security.Users.UserLevel)">
      <summary>
            Every adapter needs to do his own update. The default implementation needs to create an exception, therefore.
            </summary>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.CoupleTargets(LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbe,LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbe)">
      <summary>
            Combines to Target into one
            </summary>
      <param name="main">Target to extend with faces of partner</param>
      <param name="partner">Target to hide and map to main faces</param>
    </member>
    <member name="M:LMF.Tracker.Internals.Adapter.DecoupleTargets(LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbe,LMF.Tracker.Targets.Probes.ActiveProbes.ActiveProbe)">
      <summary>
            Restores Target it into to seperate Targets
            </summary>
      <param name="main">Combined Target</param>
      <param name="partner">Target to seperate</param>
    </member>
    <member name="T:LMF.Tracker.Enums.ESoundVolume">
      <summary>
            Defines the sound volume
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ESoundVolume.Quiet">
      <summary>
            The sound is off
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ESoundVolume.Low">
      <summary>
            The sound volume is low
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ESoundVolume.Mid">
      <summary>
            The sound volume is mid
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ESoundVolume.High">
      <summary>
            The sound volume is high
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.ETipWritability">
      <summary>
            Defines the type of a <see cref="T:LMF.Tracker.Enums.ETipWritability" />.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.EAreaScanMode">
      <summary>
            Defines the subtype of <see cref="T:LMF.Tracker.Measurements.Profiles.AreaScanProfile" />.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EAreaScanMode.None">
      <summary>
            Default value (not used)
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EAreaScanMode.StopAndGo">
      <summary>
            Scan using discrete points that are measured stationary
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EAreaScanMode.Continuous">
      <summary>
            Scan using a continuous tracker movement averaging according to the accuracy
             </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.EButtonAction">
      <summary>
            Defines different button behaviors of <see cref="T:LMF.Tracker.Enums.ERemoteSource" />. 
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EButtonAction.None">
      <summary>
            No button action.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EButtonAction.Up">
      <summary>
            The button was released. 
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EButtonAction.Down">
      <summary>
            The button was pressed.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EButtonAction.DoubleClick">
      <summary>
            The button was pressed twice in a short time period.
            Double click triggers three actions in the following order: Down, DoubleClick, Up
            Only works with At9x0 tracker family and <see cref="T:LMF.Tracker.Targets.Probes.ActiveProbes.TProbes.TProbe" />.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.ECameraType">
      <summary>
            Defines the Camera Type
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ECameraType.Ovc">
      <summary>
            Overview Camera
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ECameraType.Atr1">
      <summary>
            Atr1
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ECameraType.Atr2">
      <summary>
            Atr2
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ECameraType.AtrStereo">
      <summary>
            Stereo Atr
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.ECompensationState">
      <summary>
            Defines a compensation state.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ECompensationState.Unknown">
      <summary>
            Compensation state is unknown.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ECompensationState.Design">
      <summary>
            Compensation is designed.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ECompensationState.Fake">
      <summary>
            Compensation is a fake.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ECompensationState.Compensated">
      <summary>
            Compensation is correctly compensated.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ECompensationState.Invalid">
      <summary>
            Compensation is invalid.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.EProbeCommunicationChannel">
      <summary>
            Defines the channel the probe is connected on.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EProbeCommunicationChannel.NoChannel">
      <summary>
            Not connected
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EProbeCommunicationChannel.Cable1">
      <summary>
            Connected on cable 1
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EProbeCommunicationChannel.Cable2">
      <summary>
            Connected on cable 2
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EProbeCommunicationChannel.Wireless">
      <summary>
            Wireless connection through the laser
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.ERealtimeConfigurationMode">
      <summary>
            Defines a compensation state.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.ERealtimeExtrapolationMode">
      <summary>
            Defines a compensation state.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.EScanDirection">
      <summary>
            Defines the Scan Direction of Camera for OVC and PowerLock comp
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EScanDirection.Left">
      <summary>
            Left
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EScanDirection.Right">
      <summary>
            Right
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EScanDirection.Up">
      <summary>
            Up
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EScanDirection.Down">
      <summary>
            Down
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EScanDirection.Center">
      <summary>
            Center
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.EStartStopActiveLevel">
      <summary>
            The start/stop signal can be either low or high active (low active means low = start condition). Default is low.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EStartStopActiveLevel.Low">
      <summary>
            Measure if signal is low.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EStartStopActiveLevel.High">
      <summary>
            Measure if signal is high.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.EClockTransmission">
      <summary>
            The clock signal can be configured to work either with the positive or the negative clock transmission. Default is negative transmission.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EClockTransmission.Negative">
      <summary>
            Negative transmission triggers a measurement.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EClockTransmission.Positive">
      <summary>
            Positive transmission triggers a measurement.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.EStartStopSource">
      <summary>
            Defines whether the <see cref="T:LMF.Tracker.Enums.EStartStopActiveLevel" /> in <see cref="T:LMF.Tracker.Measurements.Profiles.CustomTriggerProfile" /> is used.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EStartStopSource.Ignored">
      <summary>
            Ignores the given active level.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EStartStopSource.Active">
      <summary>
            Uses the given active level.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.EAccuracy">
      <summary>
            Defines the accuracy of <see cref="T:LMF.Tracker.Measurements.Profiles.StationaryMeasurementProfile" />.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EAccuracy.Precise">
      <summary>
            A measurement takes enough time for a precise result.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EAccuracy.Standard">
      <summary>
            A measurement takes the default time.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EAccuracy.Fast">
      <summary>
            A measurement is taken fast.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.EClockSource">
      <summary>
            Defines measurements are triggered based on internal settings or on external signals.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EClockSource.Internal">
      <summary>
            takes measurements based on internal settings without any external conditions.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EClockSource.External">
      <summary>
            take measurements triggered by external signals.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.EDisplayUnitSystem">
      <summary>
            Defines the unit system.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EDisplayUnitSystem.Metric">
      <summary>
            Shows units in metric system.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EDisplayUnitSystem.Imperial">
      <summary>
            Shows units in imperial system.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.ERemoteSource">
      <summary>
            Defines the remote source.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ERemoteSource.TProbe">
      <summary>
            The remote source is a <see cref="T:LMF.Tracker.Targets.Probes.ActiveProbes.TProbes.TProbe" /> or any other <see cref="T:LMF.Tracker.Targets.Probes.Probe" /> with buttons.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ERemoteSource.IRRemoteControl">
      <summary>
            The remote source is a remote control.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.EStillImageMode">
      <summary>
            Defines the resolution of the still image
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EStillImageMode.Low">
      <summary>
            The low resolution OVC image
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EStillImageMode.Medium">
      <summary>
            The medium resolution OVC image
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EStillImageMode.High">
      <summary>
            The high resolution OVC image
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.ETipCompensationTarget">
      <summary>
            Defines which <see cref="T:LMF.Tracker.Targets.Probes.ActiveProbes.Common.ProbeFace" /> of a <see cref="T:LMF.Tracker.Targets.Probes.Probe" /> is compensated for a <see cref="T:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.Tip" />.
             </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ETipCompensationTarget.AllFaces">
      <summary>
            Deprecated: All faces are compensated for a tip.
            New interpretation: Not compensated for any face.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ETipCompensationTarget.Face1">
      <summary>
            Face 1 is compensated for a tip.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ETipCompensationTarget.Face2">
      <summary>
            Face 2 is compensated for a tip.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ETipCompensationTarget.Face3">
      <summary>
            Face 3 is compensated for a tip.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ETipCompensationTarget.Face4">
      <summary>
            Face 4 is compensated for a tip.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ETipCompensationTarget.Face5">
      <summary>
            Face 5 is compensated for a tip.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ETipCompensationTarget.Face6">
      <summary>
            Face 6 is compensated for a tip.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ETipCompensationTarget.Face7">
      <summary>
            Face 7 is compensated for a tip.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ETipCompensationTarget.Face8">
      <summary>
            Face 8 is compensated for a tip.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.ETipType">
      <summary>
            Defines the type of a <see cref="T:LMF.Tracker.Targets.Probes.ActiveProbes.Tips.Tip" />.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ETipType.None">
      <summary>
            Tip has no type.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ETipType.Fixed">
      <summary>
            Tip is a fixed tip.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ETipType.Scanner">
      <summary>
            Tip is a scanner tip.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ETipType.TouchTrigger">
      <summary>
            Tip is a touch trigger tip.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ETipType.OpticalTrigger">
      <summary>
            Tip is an optical trigger tip.
            Warning: This type is deprecated as it has never really been used.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ETipType.AS1">
      <summary>
            Tip is representing an AS1 scanner.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ETipType.AS1Simulator">
      <summary>
            Tip is representing a simulator of the AS1 scanner. Used for RandD testing only.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ETipType.Partner">
      <summary>
            Represents a Link to map Probes
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ETipType.Virtual">
      <summary>
            Tip is a virtual tip.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.ETriggeredInfoFlag">
      <summary>
            Delivers additional info which source flagged the triggerd measurement
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EUserLevel.Standard">
      <summary>
              This is the standard customer user
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EUserLevel.Intermediate">
      <summary>
            Special user with rights between standard and advanced
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EUserLevel.Advanced">
      <summary>
              This is the advanced customer user
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EUserLevel.Administrator">
      <summary>
              This is the administrator (customer IT guy) account for managing the passwords
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EUserLevel.Support">
      <summary>
              This is our internal and external support guy
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EUserLevel.Service">
      <summary>
            This is for service personnel
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EUserLevel.Factory">
      <summary>
              This is our internal factory and production guy
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EUserLevel.Metrology">
      <summary>
              This is our internal metrology guy
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EUserLevel.Programmer">
      <summary>
              This is for INTERNAL use only! Only for programmers!
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.EWarmUpState">
      <summary>
            Defines the different warmup states of the Tracker
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EWarmUpState.Startup">
      <summary>
            Tracker has been started and is not warmed up
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EWarmUpState.DoFirstInit">
      <summary>
            Tracker should be initialized, but is not warmed up
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EWarmUpState.FirstInitDone">
      <summary>
            Tracker is initialized, but not warmed up
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EWarmUpState.SecondInit">
      <summary>
            Tracker warmed up and should be initialized
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EWarmUpState.SecondInitDone">
      <summary>
            Tracker is initialized and warmed up
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.EInclinationValidation">
      <summary>
            Defines a validation for Qualtiy Checks
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EInclinationValidation.None">
      <summary>
            Default value that is required so that an instance that has no meaningful value set yet is valid.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EInclinationValidation.OnlyGood">
      <summary>
            A quality check allows to work when all the requirements are in specification. 
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EInclinationValidation.Warning">
      <summary>
            A quality check allows to work although the requirements are not fully in specification.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.EMeteoSource">
      <summary>
            Defines <see cref="T:LMF.Tracker.Meteo.MeteoSource" /> for the tracker.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EMeteoSource.ManualMeteo">
      <summary>
            Meteo data are manual values.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EMeteoSource.LiveMeteo">
      <summary>
            Meteo data are live from sensor.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.ENetworkMode">
      <summary>
            Defines the network modes.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ENetworkMode.StaticIP">
      <summary>
            A static IP is used.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ENetworkMode.DHCP">
      <summary>
            A IP from DHCP is used.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.EWLANEncryptionMode">
      <summary>
            Defines the encryption mode.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EWLANEncryptionMode.None">
      <summary>
            No WLAN encryption.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EWLANEncryptionMode.WEP">
      <summary>
            The WLAN encryption is WEP.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EWLANEncryptionMode.WPA2PSK">
      <summary>
            The WLAN encryption is WPA2PSK.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.EWLANPowerStatus">
      <summary>
            Defines the WLAN power status.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EWLANPowerStatus.NotAvailable">
      <summary>
            No status is available.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EWLANPowerStatus.Off">
      <summary>
            WLAN is off.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EWLANPowerStatus.On">
      <summary>
            WLAN is on.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.EWLANTopology">
      <summary>
            Defines the WLAN Topology.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EWLANTopology.AdHoc">
      <summary>
            AdHoc 
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EWLANTopology.Infrastructure">
      <summary>
            Infrastructure mode over an external Router.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.EMeasurementStatus">
      <summary>
            Defines in which <see cref="N:LMF.Tracker.MeasurementStatus" /> the tracker is.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EMeasurementStatus.ReadyToMeasure">
      <summary>
            Defines that the tracker is actually ready to measure.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EMeasurementStatus.MeasurementInProgress">
      <summary>
            Defines that the tracker is actually measuring.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EMeasurementStatus.NotReady">
      <summary>
            Defines that the tracker is not ready to measure. The reasons why can be found in the precondition list of <see cref="N:LMF.Tracker.MeasurementStatus" />.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EMeasurementStatus.Invalid">
      <summary>
            Defines that the tracker is not ready to measure. The reasons why can be found in the precondition list of <see cref="N:LMF.Tracker.MeasurementStatus" />.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.ERemoteButton">
      <summary>
            Defines buttons from remote controls.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ERemoteButton.ButtonA">
      <summary>
            ButtonA refers to button A on a remote source.
            When using a T-Probe 1, all Buttons are mapped to ButtonA
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ERemoteButton.ButtonB">
      <summary>
            ButtonB refers to button B on a remote source.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ERemoteButton.ButtonC">
      <summary>
            ButtonC refers to button C on a remote source.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ERemoteButton.ButtonD">
      <summary>
            ButtonD refers to button D on a remote source.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ERemoteButton.ButtonE">
      <summary>
            ButtonE refers to button E on a remote source. Only available for AP21.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.ERemoteButton.ButtonF">
      <summary>
            ButtonF refers to button F on a remote source. Only available for AP21.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.EFace">
      <summary>
            Defines the current <see cref="T:LMF.Tracker.Face" /> position.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EFace.Face1">
      <summary>
        <see cref="T:LMF.Tracker.Face" /> position one.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EFace.Face2">
      <summary>
        <see cref="T:LMF.Tracker.Face" /> position two.
            </summary>
    </member>
    <member name="T:LMF.Tracker.Enums.EPowerSource">
      <summary>
            Defines the <see cref="T:LMF.Tracker.BasicTypes.EnumTypes.PowerSourceValue" />.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EPowerSource.Mains">
      <summary>
            Power over cable.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EPowerSource.Battery">
      <summary>
            Power from battery.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EPowerSource.PowerOverEthernet">
      <summary>
            Power over ethernet. Only available for AT40x.
            </summary>
    </member>
    <member name="F:LMF.Tracker.Enums.EPowerSource.BatteryProblem">
      <summary>
             Problem with battery
             </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.AccuracyValue">
      <summary>
            Convenience class for <see cref="T:LMF.Tracker.Enums.EAccuracy" /> values.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.AccuracyValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.BasicTypes.EnumTypes.AccuracyValue.Changed" /> event.
            </summary>
      <param name="sender">the sender object</param>
      <param name="paramNewValue">the new value</param>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.AccuracyValue.Value">
      <summary>
            Get or set the accuracy.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.AccuracyValue.Label">
      <summary>
            Get the label.
            </summary>
    </member>
    <member name="E:LMF.Tracker.BasicTypes.EnumTypes.AccuracyValue.Changed">
      <summary>
            Occurs when the value has changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.AreaScanModeValue">
      <summary>
            Convenience class for <see cref="T:LMF.Tracker.Enums.EAreaScanMode" /> values.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.AreaScanModeValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.BasicTypes.EnumTypes.AreaScanModeValue.Changed" /> event.
            </summary>
      <param name="sender">the sender object</param>
      <param name="paramNewValue">the new value</param>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.AreaScanModeValue.Value">
      <summary>
            Get or set the accuracy.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.AreaScanModeValue.Label">
      <summary>
            Get the label.
            </summary>
    </member>
    <member name="E:LMF.Tracker.BasicTypes.EnumTypes.AreaScanModeValue.Changed">
      <summary>
            Occurs when the value has changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.ProbeCommunicationChannelValue">
      <summary>
            Convenience class for <see cref="T:LMF.Tracker.Enums.EProbeCommunicationChannel" /> values.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.ProbeCommunicationChannelValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.BasicTypes.EnumTypes.ProbeCommunicationChannelValue.Changed" /> event.
            </summary>
      <param name="sender">the sender object</param>
      <param name="paramNewValue">the new value</param>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.ProbeCommunicationChannelValue.Value">
      <summary>
            Get or set the accuracy.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.ProbeCommunicationChannelValue.Label">
      <summary>
            Get the label.
            </summary>
    </member>
    <member name="E:LMF.Tracker.BasicTypes.EnumTypes.ProbeCommunicationChannelValue.Changed">
      <summary>
            Occurs when the value has changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.LineScanModeValue">
      <summary>
            Convenience class for <see cref="T:LMF.Tracker.Measurements.Scanning.Line.ELineScanMode" /> values.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.LineScanModeValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.BasicTypes.EnumTypes.LineScanModeValue.Changed" /> event.
            </summary>
      <param name="sender">the sender object</param>
      <param name="paramNewValue">the new value</param>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.LineScanModeValue.Value">
      <summary>
            Get or set the accuracy.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.LineScanModeValue.Label">
      <summary>
            Get the label.
            </summary>
    </member>
    <member name="E:LMF.Tracker.BasicTypes.EnumTypes.LineScanModeValue.Changed">
      <summary>
            Occurs when the value has changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.ReadOnlyAdmTypeValue">
      <summary>
            Convenience class for <see cref="T:LMF.Tracker.Enums.EAdmType" /> values.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.ReadOnlyAdmTypeValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.BasicTypes.EnumTypes.ReadOnlyAdmTypeValue.Changed" /> event.
            </summary>
      <param name="sender">the sender object</param>
      <param name="paramNewValue">the new value</param>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.ReadOnlyAdmTypeValue.Value">
      <summary>
            Get or set the AdmType.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.ReadOnlyAdmTypeValue.Label">
      <summary>
            Get the label.
            </summary>
    </member>
    <member name="E:LMF.Tracker.BasicTypes.EnumTypes.ReadOnlyAdmTypeValue.Changed">
      <summary>
            Occurs when the value has changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.ClockSourceValue">
      <summary>
            Convenience class for <see cref="T:LMF.Tracker.Enums.EClockSource" /> values.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.ClockSourceValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.BasicTypes.EnumTypes.ClockSourceValue.Changed" /> event.
            </summary>
      <param name="sender">the sender object</param>
      <param name="paramNewValue">the new value</param>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.ClockSourceValue.Value">
      <summary>
            Get or set the ClockSource value.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.ClockSourceValue.Label">
      <summary>
            Get the label.
            </summary>
    </member>
    <member name="E:LMF.Tracker.BasicTypes.EnumTypes.ClockSourceValue.Changed">
      <summary>
            Occurs when the value has changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.ClockTransmissionValue">
      <summary>
            Convenience class for <see cref="T:LMF.Tracker.Enums.EClockTransmission" /> values
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.ClockTransmissionValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.BasicTypes.EnumTypes.ClockTransmissionValue.Changed" /> event.
            </summary>
      <param name="sender">the sender object</param>
      <param name="paramNewValue">the new value</param>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.ClockTransmissionValue.Value">
      <summary>
            Get or set the ClockTransmission value.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.ClockTransmissionValue.Label">
      <summary>
            Get the label.
            </summary>
    </member>
    <member name="E:LMF.Tracker.BasicTypes.EnumTypes.ClockTransmissionValue.Changed">
      <summary>
            Occurs when the value has changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.ImageRmsValidationValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.BasicTypes.EnumTypes.ImageRmsValidationValue.Changed" /> event.
            </summary>
      <param name="sender">the sender object</param>
      <param name="paramNewValue">the new value</param>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.ImageRmsValidationValue.Value">
      <summary>
            Gets or sets the Image RMS Validation value.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.ImageRmsValidationValue.Label">
      <summary>
            Gets the label.
            </summary>
    </member>
    <member name="E:LMF.Tracker.BasicTypes.EnumTypes.ImageRmsValidationValue.Changed">
      <summary>
            Occurs when the value has changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.InitializationQualityCheckModeValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.BasicTypes.EnumTypes.InitializationQualityCheckModeValue.Changed" /> event.
            </summary>
      <param name="sender">the sender object</param>
      <param name="paramNewValue">the new value</param>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.InitializationQualityCheckModeValue.Value">
      <summary>
            Gets or sets the Image RMS Validation value.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.InitializationQualityCheckModeValue.Label">
      <summary>
            Gets the label.
            </summary>
    </member>
    <member name="E:LMF.Tracker.BasicTypes.EnumTypes.InitializationQualityCheckModeValue.Changed">
      <summary>
            Occurs when the value has changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.InclinationValidationValue">
      <summary>
            Convenience class for <see cref="T:LMF.Tracker.Enums.EInclinationValidation" /> values.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.InclinationValidationValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.BasicTypes.EnumTypes.InclinationValidationValue.Changed" /> event.
            </summary>
      <param name="sender">the sender object</param>
      <param name="paramNewValue">the new value</param>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.InclinationValidationValue.Value">
      <summary>
            Get or set the InclinationValidation.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.InclinationValidationValue.Label">
      <summary>
            Get the label.
            </summary>
    </member>
    <member name="E:LMF.Tracker.BasicTypes.EnumTypes.InclinationValidationValue.Changed">
      <summary>
            Occurs when the value has changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.BProbeLedRingValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.BasicTypes.EnumTypes.BProbeLedRingValue.Changed" /> event.
            </summary>
      <param name="sender">the sender object</param>
      <param name="paramNewValue">the new value</param>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.BProbeLedRingValue.Value">
      <summary>
            Gets or sets the Image RMS Validation value.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.BProbeLedRingValue.Label">
      <summary>
            Gets the label.
            </summary>
    </member>
    <member name="E:LMF.Tracker.BasicTypes.EnumTypes.BProbeLedRingValue.Changed">
      <summary>
            Occurs when the value has changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.RealtimeConfigurationModeValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.BasicTypes.EnumTypes.RealtimeConfigurationModeValue.Changed" /> event.
            </summary>
      <param name="sender">the sender object</param>
      <param name="paramNewValue">the new value</param>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.RealtimeExtrapolationModeValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.BasicTypes.EnumTypes.RealtimeExtrapolationModeValue.Changed" /> event.
            </summary>
      <param name="sender">the sender object</param>
      <param name="paramNewValue">the new value</param>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.SoundVolumeValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.BasicTypes.EnumTypes.SoundVolumeValue.Changed" /> event.
            </summary>
      <param name="sender">the sender object</param>
      <param name="paramNewValue">the new value</param>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.SoundVolumeValue.Value">
      <summary>
            Gets or sets the Image RMS Validation value.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.SoundVolumeValue.Label">
      <summary>
            Gets the label.
            </summary>
    </member>
    <member name="E:LMF.Tracker.BasicTypes.EnumTypes.SoundVolumeValue.Changed">
      <summary>
            Occurs when the value has changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.StartStopSourceValue">
      <summary>
            Convenience class for <see cref="T:LMF.Tracker.Enums.EStartStopSource" /> values
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.StartStopSourceValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.BasicTypes.EnumTypes.StartStopSourceValue.Changed" /> event.
            </summary>
      <param name="sender">the sender object</param>
      <param name="paramNewValue">the new value</param>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.StartStopSourceValue.Value">
      <summary>
            Gets or sets the StartStopSource.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.StartStopSourceValue.Label">
      <summary>
            Get the label.
            </summary>
    </member>
    <member name="E:LMF.Tracker.BasicTypes.EnumTypes.StartStopSourceValue.Changed">
      <summary>
            Occurs when the value has changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.StartStopActiveLevelValue">
      <summary>
            Convenience class for <see cref="T:LMF.Tracker.Enums.EStartStopActiveLevel" /> values
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.StartStopActiveLevelValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.BasicTypes.EnumTypes.StartStopActiveLevelValue.Changed" /> event.
            </summary>
      <param name="sender">the sender object</param>
      <param name="paramNewValue">the new value</param>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.StartStopActiveLevelValue.Value">
      <summary>
            Gets or sets the StartStopActiveLevel.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.StartStopActiveLevelValue.Label">
      <summary>
            Get the label.
            </summary>
    </member>
    <member name="E:LMF.Tracker.BasicTypes.EnumTypes.StartStopActiveLevelValue.Changed">
      <summary>
            Occurs when the value has changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.ReadOnlyPowerSourceValue">
      <summary>
            Convenience class for read only <see cref="T:LMF.Tracker.Enums.EClockSource" /> values.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.ReadOnlyPowerSourceValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.BasicTypes.EnumTypes.ReadOnlyPowerSourceValue.Changed" /> event.
            </summary>
      <param name="sender">the sender object</param>
      <param name="paramNewValue">the new value</param>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.ReadOnlyPowerSourceValue.Value">
      <summary>
            Gets the PowerSource value.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.ReadOnlyPowerSourceValue.Label">
      <summary>
            Get the label.
            </summary>
    </member>
    <member name="E:LMF.Tracker.BasicTypes.EnumTypes.ReadOnlyPowerSourceValue.Changed">
      <summary>
            Occurs when the value has changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.VibrationDetectionLevelValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.BasicTypes.EnumTypes.VibrationDetectionLevelValue.Changed" /> event.
            </summary>
      <param name="sender">the sender object</param>
      <param name="paramNewValue">the new value</param>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.VibrationDetectionLevelValue.Value">
      <summary>
            Gets or sets the Image RMS Validation value.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.VibrationDetectionLevelValue.Label">
      <summary>
            Gets the label.
            </summary>
    </member>
    <member name="E:LMF.Tracker.BasicTypes.EnumTypes.VibrationDetectionLevelValue.Changed">
      <summary>
            Occurs when the value has changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.WarmUpStateValue">
      <summary>
            Convenience class for <see cref="T:LMF.Tracker.Enums.EWarmUpState" /> values
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.WarmUpStateValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.BasicTypes.EnumTypes.WarmUpStateValue.Changed" /> event.
            </summary>
      <param name="sender">the sender object</param>
      <param name="paramNewValue">the new value</param>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.WarmUpStateValue.Value">
      <summary>
            Get or set the Warm up state value.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.WarmUpStateValue.Label">
      <summary>
            Get the label.
            </summary>
    </member>
    <member name="E:LMF.Tracker.BasicTypes.EnumTypes.WarmUpStateValue.Changed">
      <summary>
            Occurs when the value has changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.PowerSourceValue">
      <summary>
            Convenience class for <see cref="T:LMF.Tracker.Enums.EPowerSource" /> values
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.EnumTypes.PowerSourceValue.ChangedEventHandler">
      <summary>
            Event handler for the <see cref="E:LMF.Tracker.BasicTypes.EnumTypes.PowerSourceValue.Changed" /> event.
            </summary>
      <param name="sender">the sender object</param>
      <param name="paramNewValue">the new value</param>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.PowerSourceValue.Value">
      <summary>
            Get or set the PowerSource value.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.EnumTypes.PowerSourceValue.Label">
      <summary>
            Get the label.
            </summary>
    </member>
    <member name="E:LMF.Tracker.BasicTypes.EnumTypes.PowerSourceValue.Changed">
      <summary>
            Occurs when the value has changed.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.DoubleValue.SimpleDoubleValueWithRange">
      <summary>
            Convenience class for read only double values with a minimum and maximum range
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.DoubleValue.SimpleDoubleValueWithRange.MinValue">
      <summary>
            Gets the minimum value in user Units defined in the <see cref="T:LMF.Tracker.Settings" /> object.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.DoubleValue.SimpleDoubleValueWithRange.MaxValue">
      <summary>
            Gets the maximum value in user Units defined in the <see cref="T:LMF.Tracker.Settings" /> object.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.DoubleValue.SimpleDoubleValueWithRange.MinValueInBaseUnits">
      <summary>
            Gets the minimum value in base units.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.DoubleValue.SimpleDoubleValueWithRange.MaxValueInBaseUnits">
      <summary>
            Gets the maximum value in base units.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.DoubleValue.SimpleDoubleValue">
      <summary>
            Convenience class for double values. Not connected with the Settings object on the Tracker.
            </summary>
    </member>
    <member name="M:LMF.Tracker.BasicTypes.DoubleValue.SimpleDoubleValue.Equals(System.Object)">
      <inheritDoc />
    </member>
    <member name="P:LMF.Tracker.BasicTypes.DoubleValue.SimpleDoubleValue.ValueInBaseUnits">
      <summary>
            Gets the value in base units.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.DoubleValue.SimpleDoubleValue.UnitString">
      <summary>
            Gets the active Unit as string, for example [mm]
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.DoubleValue.SimpleDoubleValue.UnitType">
      <summary>
            Gets the active UnitType
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.DoubleValue.SimpleDoubleValue.Label">
      <summary>
            Gets the label.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.DoubleValue.SimpleDoubleValue.Value">
      <summary>
            Gets the Value in the defined <see cref="P:LMF.Tracker.BasicTypes.DoubleValue.SimpleDoubleValue.UnitType" /></summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.DoubleValue.SimpleDoubleValueWithAccuracy">
      <summary>
            Convenience class for double values with an accuracy. Not connected with the Settings object on the Tracker.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.DoubleValue.SimpleDoubleValueWithAccuracy.AccuracyInBaseUnits">
      <summary>
            Gets the accuracy in base units.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.DoubleValue.SimpleDoubleValueWithAccuracy.Accuracy">
      <summary>
            Gets the accuracy in the defined <see cref="P:LMF.Tracker.BasicTypes.DoubleValue.SimpleDoubleValue.UnitType" /></summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.DoubleValue.SingleShotStatisticDoubleValue">
      <summary>
            Convenience Class for doubles used in Measurement results.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.DoubleValue.StationaryStatisticDoubleValue">
      <summary>
            Convenience class for doubles with an additional precision property, used in Measurement Results.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.DoubleValue.StationaryStatisticDoubleValue.Precision">
      <summary>
            Gets the Precision of this value.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.Collections.NamedCollectionItemObject">
      <summary>
            Class for items of a collection with a Name and ProductName.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.Collections.NamedCollectionItemObject.Name">
      <summary>
            Gets the Name of the object.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.Collections.NamedCollectionItemObject.Comment">
      <summary>
             Gets the Comment of the object.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.Collections.NamedCollectionItemObject.ProductName">
      <summary>
             Gets the ProductName of the object.
            </summary>
    </member>
    <member name="P:LMF.Tracker.BasicTypes.Collections.NamedCollectionItemObject.TimeStamp">
      <summary>
             Gets the TimeStamp of the object.
            </summary>
    </member>
    <member name="T:LMF.Tracker.BasicTypes.Collections.StringObjectDictionary">
      <summary>
      </summary>
    </member>
  </members>
</doc>